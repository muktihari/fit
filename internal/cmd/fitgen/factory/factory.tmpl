// This Template contains multiple template definitions.

{{ define "header" }}
// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: {{ .SDKVersion }}

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

{{ end }}

// Template definition for [factory.go]
{{ define "factory" }}
{{ template "header" . }}
package {{ .Package }}

import (
	"errors"
	"fmt"

	"github.com/muktihari/fit/proto"
	"github.com/muktihari/fit/profile"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
)

const (
	// NameUnknown is unknown message or field name
	NameUnknown string = "unknown"
)

var (
	// ErrRegisterForbidden occurs when trying to create manufacturer specific message outside available range.
	ErrRegisterForbidden = errors.New("register is forbidden")
)

// Factory handles creation and registration for Fit's message and field.
type Factory struct {
	mesgs []proto.Message
}

// New creates new Factory with predefined messages.
// Use this if you work with multiple manufacturers that have different manufacturer specific messages, 
// Otherwise, use StandardFactory().
// 
// New is not receiving messages on purpose: to comply with Fit term and conditions which is not allowing edit on existing messages. 
// Receiving messages through here means we need to validate all of it, while RegisterMesg is already exist for that purpose.
func New() *Factory { return &Factory{mesgs: predefinedMessages()} }

{{ template "create_mesg_doc" -}}
func (f *Factory) CreateMesg(num typedef.MesgNum) proto.Message {
	if num >= typedef.MesgNum(len(f.mesgs)) {
		return createUnknownMesg(num)
	}
	
	if f.mesgs[num].Num != num {
		return createUnknownMesg(num)
	}

	return f.mesgs[num].Clone() // dereference any pointer values
}

{{ template "create_mesg_only_doc" -}}
func (f *Factory) CreateMesgOnly(num typedef.MesgNum) proto.Message {
	if num >= typedef.MesgNum(len(f.mesgs)) {
		return createUnknownMesg(num)
	}

	if f.mesgs[num].Num != num {
		return createUnknownMesg(num)
	}

	mesg := f.mesgs[num]       // shallow copy
	mesg.Fields = nil 	       // zeroed
	mesg.DeveloperFields = nil // zeroed

	return mesg
}

func createUnknownMesg(num typedef.MesgNum) proto.Message {
	return proto.Message{Num: num}
}

{{ template "create_field_doc" -}}
func (f *Factory) CreateField(mesgNum typedef.MesgNum, num byte) proto.Field {
	if mesgNum >= typedef.MesgNum(len(f.mesgs)) {
		return createUnknownField(mesgNum, num)
	}

	if f.mesgs[mesgNum].Num != mesgNum {
		return createUnknownField(mesgNum, num)
	}

	if num >= byte(len(f.mesgs[mesgNum].Fields)) {
		return createUnknownField(mesgNum, num)
	}

	if f.mesgs[mesgNum].Fields[num].FieldBase == nil {
		return createUnknownField(mesgNum, num)
	}

	return f.mesgs[mesgNum].Fields[num]
}

func createUnknownField(mesgNum typedef.MesgNum, num byte) proto.Field {
	return proto.Field{FieldBase: &proto.FieldBase{Name: NameUnknown, Num: num, Scale: 1, Offset: 0}}
}

{{ template "register_mesg_doc" -}}
func (f *Factory) RegisterMesg(mesg proto.Message) error {
	if mesg.Num < typedef.MesgNumMfgRangeMin || mesg.Num > typedef.MesgNumMfgRangeMax {
		return fmt.Errorf("could not register mesg num \"%#X\", available range: %#X-%#X: %w",
			mesg.Num, typedef.MesgNumMfgRangeMin, typedef.MesgNumMfgRangeMax, ErrRegisterForbidden)
	}
	
	mesg = mesg.Clone()
	f.mesgs[mesg.Num] = mesg

	return nil
}

func predefinedMessages() []proto.Message { // Use slice to ensure O(1) lookup
	return {{ .Messages }}
}
{{ end }} // end of "factory"

// Template definition for [exported.go] 
{{ define "exported"}}
{{ template "header" . }}

package {{ .Package }}

 import (
	"github.com/muktihari/fit/proto"
	"github.com/muktihari/fit/profile/typedef"
)

 var std = New()

// StandardFactory returns standard factory.
func StandardFactory() *Factory { return std }

{{ template "create_mesg_doc" -}}
func CreateMesg(num typedef.MesgNum) proto.Message {
	return std.CreateMesg(num)
}

{{- template "create_mesg_only_doc" -}}
func CreateMesgOnly(num typedef.MesgNum) proto.Message{
	return std.CreateMesgOnly(num)
}

{{ template "create_field_doc" -}}
func CreateField(mesgNum typedef.MesgNum, num byte) proto.Field {
	return std.CreateField(mesgNum, num)
}

{{ template "register_mesg_doc" -}}
func RegisterMesg(mesg proto.Message) error {
	return std.RegisterMesg(mesg)
}

{{ end }} // end of "exported"

// Funcs & Methods Shared Documentations:
{{ define "create_mesg_doc" }}
// CreateMesg creates new message based on defined messages in the factory. If not found, it returns new message with "unknown" name.
{{ end }}

{{ define "create_mesg_only_doc" }}
// CreateMesgOnly is similar to CreateMesg, but it sets Fields and DeveloperFields to nil. This is useful when we plan to fill these values ourselves
// to avoid unnecessary malloc when cloning them, as they will be removed anyway. For example, the decoding process will populate them with decoded data.
{{ end }}

{{ define "create_field_doc" }}
// CreateField creates new field based on defined messages in the factory. If not found, it returns new field with "unknown" name.
// 
// Returned Field's FieldBase is a pointer, referencing a value in this factory to reduce unnecessary malloc or runtime duffcopy
// since the content should not be changed.
{{ end }}

{{ define "register_mesg_doc" }}
// RegisterMesg registers manufacturer specific message within available range between 0xFF00 - 0xFFFE.
// Return an error if num is outside that range. If same mesg number is given, it will replace the old mesg of the same number.
//
// By registering, any Fit file containing these messages can be recognized instead of returning "unknown" message.
{{ end }}