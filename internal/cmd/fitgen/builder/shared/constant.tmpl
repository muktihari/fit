{{ define "constant" }}
// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: {{ .SDKVersion }}

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

{{ .PackageDoc }}
package {{ .Package }}


import (
    {{ if .Imports -}}
        {{ range $_, $v := .Imports }}
            {{ printf "%q" $v }}
        {{ end -}}
    {{ end -}}
    {{ if .AllowRegister }}"fmt"{{ end }}
)

type {{ .Type }} {{ .Base }}

const (
    {{ range .Constants -}}
    {{ .Name }} {{ .Type }} {{ .Op }} {{ .Value }} {{ if .Comment }} // {{ .Comment }} {{ end }}
    {{ end -}}
)

{{ if eq .StringerMode 0x0 }} {{ template "stringer_map" . }} {{ else }} {{ template "stringer_array" . }} {{ end }}

var strto{{ .Type | ToLower }} = func() map[string]{{ .Type }} {
	m := make(map[string]{{ .Type }})
	for t, str := range {{ .Type | ToLower }}tostrs {
		m[str] = {{ .Type }}(t)
	}
	return m
}()

// FromString parse string into {{ .Type }} constant it's represent, return {{ .Type }}Invalid if not found.
func {{ .Type }}FromString(s string) {{ .Type }} {
    val, ok := strto{{ .Type | ToLower }}[s]
    if !ok {
        return strto{{ .Type | ToLower }}["invalid"]
    }
    return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func List{{ .Type }}() []{{ .Type }} {
    vs := make([]{{ .Type }}, 0, len({{ .Type | ToLower }}tostrs))
    for i := range {{ .Type | ToLower }}tostrs {
        vs = append(vs, {{ .Type }}(i))
    }
    return vs
}

{{ if .AllowRegister }}
{{ template "register" . }}
{{ end }}

{{ end }} // end of constant

// Stringer Definitions:
{{ define "stringer_array" }}
var {{ $.Type | ToLower }}tostrs = [...]string{
    {{ range .Constants -}}
    {{ .Name -}}: {{ printf "%q" .String }},
    {{ end -}}
}

{{ $r := printf "%.1s" $.Type | ToLower }}
{{ $vals := print $.Type "tostrs" | ToLower }}
func ({{ $r }} {{ $.Type }}) String() string {
    {{- $lessThanZeroOp := print $r " < 0 || " -}}
    {{ if eq (printf "%.1s" $.Base) "u" -}}
    {{ $lessThanZeroOp = "" }}
    {{ end -}}
    if {{ $lessThanZeroOp }} {{ $r }} >= {{ $.Type }}(len({{ $vals }})) {
        {{ if eq (sprintf "%.4s" .Base) "byte" -}}
            return strconv.Itoa(int({{ $r }}))
        {{ else if eq (sprintf "%.3s" .Base) "int" -}}
            return strconv.FormatInt(int64({{ $r }}), 10)
        {{ else if eq (sprintf "%.4s" .Base) "uint" -}}
            return strconv.FormatUint(uint64({{ $r }}), 10)
        {{ else if eq (sprintf "%.7s" .Base) "float32" -}}
            return strconv.FormatFloat(float64({{ $r }}), 'f', -1, 32)
        {{ else if eq (sprintf "%.7s" .Base) "float64" -}}
            return strconv.FormatFloat(float64({{ $r }}), 'f', -1, 64)
        {{ else if eq .Base "string" -}}
            return string({{ $r }})
        {{ end -}}
    }
    return {{ $vals }}[{{ $r }}]
}
{{ end }}

{{ define "stringer_map" }}
var {{ .Type | ToLower }}tostrs = map[{{ .Type }}]string{
    {{ range .Constants -}}
    {{ .Name -}}: {{ printf "%q" .String }},
    {{ end -}}
}

{{ $r := printf "%.1s" .Type | ToLower }}
{{ $vals := print $.Type "tostrs" | ToLower }}
func ({{ $r }} {{ .Type }}) String() string {
    val, ok := {{ $vals }}[{{ $r }}]
    if !ok {
        {{ if eq (sprintf "%.4s" .Base) "byte" -}}
            return strconv.Itoa(int({{ $r }}))
        {{ else if eq (sprintf "%.3s" .Base) "int" -}}
            return strconv.FormatInt(int64({{ $r }}), 10)
        {{ else if eq (sprintf "%.4s" .Base) "uint" -}}
            return strconv.FormatUint(uint64({{ $r }}), 10)
        {{ else if eq (sprintf "%.7s" .Base) "float32" -}}
            return strconv.FormatFloat(float64({{ $r }}), 'f', -1, 32)
        {{ else if eq (sprintf "%.7s" .Base) "float64" -}}
            return strconv.FormatFloat(float64({{ $r }}), 'f', -1, 64)
        {{ else if eq .Base "string" -}}
            return string({{ $r }})
        {{ end -}}
    }
    return val
}
{{ end }}

// Registrer Manufacturer Specific Type:
{{ define "register" }}
// {{ .Type }}Register registers a manufacturer specific {{ .Type }} so that the value can be recognized. 
// It is recommended to define the constants somewhere else to track your own specifications.
// 
// This is intended for those who prefer using this SDK as it is without the need to generate custom SDK using cmd/fitgen.
func {{ .Type }}Register(v {{ .Type }}, s string) error {
	if v >= {{ .Type}}Invalid {
		return fmt.Errorf("could not register outside max range: %d", {{ .Type}}Invalid)
	}

	{{ if eq .StringerMode 0x0 -}} 
		if str, ok := {{ .Type | ToLower }}tostrs[v]; ok {
			return fmt.Errorf("could not register to an existing {{ .Type }}: %d (%s)", v, str)
		}
	{{ else -}}
		if str := {{ .Type | ToLower }}tostrs[v]; v != "" {
			return fmt.Errorf("could not register to an existing {{ .Type }}: %d (%s)", v, str)
		}
	{{ end }}

	{{ .Type | ToLower }}tostrs[v] = s
	strto{{ .Type | ToLower }}[s] = v

	return nil
}
{{ end }}