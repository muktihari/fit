// Copyright 2024 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build ignore

// Generate mesg.Num and field.Num string lookup

package main

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"

	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/profile/typedef"
)

func genLookup() {
	var buf bytes.Buffer

	mesgNums := typedef.ListMesgNum()

	buf.WriteString(`// Code generated by cmd/fitconv/fitcsv/lookup.go using 'go generate'. DO NOT EDIT.

// Copyright 2024 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package fitcsv

import (
	"github.com/muktihari/fit/profile/typedef"
)

var mesgNumLookup = map[string]typedef.MesgNum{
	`)
	for _, mesgNum := range mesgNums {
		if mesgNum >= typedef.MesgNumMfgRangeMin {
			continue
		}
		buf.WriteString(fmt.Sprintf("%q: %d,\n", mesgNum.String(), mesgNum))
	}
	buf.WriteByte('}')

	buf.WriteString(`

var fieldNumLookup = [...]map[string]byte{
	`)
	for _, mesgNum := range mesgNums {
		if mesgNum >= typedef.MesgNumMfgRangeMin {
			continue
		}
		buf.WriteString(fmt.Sprintf("%d: map[string]byte{\n", mesgNum))
		mesg := factory.CreateMesg(mesgNum)
		for _, field := range mesg.Fields {
			buf.WriteString(fmt.Sprintf("%q: %d,\n", field.Name, field.Num))
		}
		buf.WriteString("},\n")
	}
	buf.WriteByte('}')

	filename := "fitcsv/lookup_gen.go"
	err := os.WriteFile(filename, buf.Bytes(), 0666)
	if err != nil {
		fmt.Fprintf(os.Stderr, "mesgnum_lookup: %s\n", err)
		os.Exit(2)
	}

	buf.Reset()
	cmd := exec.Command("gofmt", "-s", "-w", filename)
	cmd.Stderr = &buf
	if err := cmd.Run(); err != nil {
		fmt.Fprintf(os.Stderr, "gofmt -s -w %s, stderr: \n%s\n", filename, buf.String())
		os.Exit(2)
	}
}

func main() {
	genLookup()
}
