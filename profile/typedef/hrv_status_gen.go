// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type HrvStatus byte

const (
	HrvStatusNone       HrvStatus = 0
	HrvStatusPoor       HrvStatus = 1
	HrvStatusLow        HrvStatus = 2
	HrvStatusUnbalanced HrvStatus = 3
	HrvStatusBalanced   HrvStatus = 4
	HrvStatusInvalid    HrvStatus = 0xFF // INVALID
)

var hrvstatustostrs = map[HrvStatus]string{
	HrvStatusNone:       "none",
	HrvStatusPoor:       "poor",
	HrvStatusLow:        "low",
	HrvStatusUnbalanced: "unbalanced",
	HrvStatusBalanced:   "balanced",
	HrvStatusInvalid:    "invalid",
}

func (h HrvStatus) String() string {
	val, ok := hrvstatustostrs[h]
	if !ok {
		return strconv.Itoa(int(h))
	}
	return val
}

var strtohrvstatus = func() map[string]HrvStatus {
	m := make(map[string]HrvStatus)
	for t, str := range hrvstatustostrs {
		m[str] = HrvStatus(t)
	}
	return m
}()

// FromString parse string into HrvStatus constant it's represent, return HrvStatusInvalid if not found.
func HrvStatusFromString(s string) HrvStatus {
	val, ok := strtohrvstatus[s]
	if !ok {
		return strtohrvstatus["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListHrvStatus() []HrvStatus {
	vs := make([]HrvStatus, 0, len(hrvstatustostrs))
	for i := range hrvstatustostrs {
		vs = append(vs, HrvStatus(i))
	}
	return vs
}
