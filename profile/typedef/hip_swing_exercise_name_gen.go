// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type HipSwingExerciseName uint16

const (
	HipSwingExerciseNameSingleArmKettlebellSwing HipSwingExerciseName = 0
	HipSwingExerciseNameSingleArmDumbbellSwing   HipSwingExerciseName = 1
	HipSwingExerciseNameStepOutSwing             HipSwingExerciseName = 2
	HipSwingExerciseNameInvalid                  HipSwingExerciseName = 0xFFFF // INVALID
)

var hipswingexercisenametostrs = map[HipSwingExerciseName]string{
	HipSwingExerciseNameSingleArmKettlebellSwing: "single_arm_kettlebell_swing",
	HipSwingExerciseNameSingleArmDumbbellSwing:   "single_arm_dumbbell_swing",
	HipSwingExerciseNameStepOutSwing:             "step_out_swing",
	HipSwingExerciseNameInvalid:                  "invalid",
}

func (h HipSwingExerciseName) String() string {
	val, ok := hipswingexercisenametostrs[h]
	if !ok {
		return strconv.FormatUint(uint64(h), 10)
	}
	return val
}

var strtohipswingexercisename = func() map[string]HipSwingExerciseName {
	m := make(map[string]HipSwingExerciseName)
	for t, str := range hipswingexercisenametostrs {
		m[str] = HipSwingExerciseName(t)
	}
	return m
}()

// FromString parse string into HipSwingExerciseName constant it's represent, return HipSwingExerciseNameInvalid if not found.
func HipSwingExerciseNameFromString(s string) HipSwingExerciseName {
	val, ok := strtohipswingexercisename[s]
	if !ok {
		return strtohipswingexercisename["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListHipSwingExerciseName() []HipSwingExerciseName {
	vs := make([]HipSwingExerciseName, 0, len(hipswingexercisenametostrs))
	for i := range hipswingexercisenametostrs {
		vs = append(vs, HipSwingExerciseName(i))
	}
	return vs
}
