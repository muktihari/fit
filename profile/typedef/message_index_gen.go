// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type MessageIndex uint16

const (
	MessageIndexSelected MessageIndex = 0x8000 // message is selected if set
	MessageIndexReserved MessageIndex = 0x7000 // reserved (default 0)
	MessageIndexMask     MessageIndex = 0x0FFF // index
	MessageIndexInvalid  MessageIndex = 0xFFFF // INVALID
)

var messageindextostrs = map[MessageIndex]string{
	MessageIndexSelected: "selected",
	MessageIndexReserved: "reserved",
	MessageIndexMask:     "mask",
	MessageIndexInvalid:  "invalid",
}

func (m MessageIndex) String() string {
	val, ok := messageindextostrs[m]
	if !ok {
		return strconv.FormatUint(uint64(m), 10)
	}
	return val
}

var strtomessageindex = func() map[string]MessageIndex {
	m := make(map[string]MessageIndex)
	for t, str := range messageindextostrs {
		m[str] = MessageIndex(t)
	}
	return m
}()

// FromString parse string into MessageIndex constant it's represent, return MessageIndexInvalid if not found.
func MessageIndexFromString(s string) MessageIndex {
	val, ok := strtomessageindex[s]
	if !ok {
		return strtomessageindex["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListMessageIndex() []MessageIndex {
	vs := make([]MessageIndex, 0, len(messageindextostrs))
	for i := range messageindextostrs {
		vs = append(vs, MessageIndex(i))
	}
	return vs
}
