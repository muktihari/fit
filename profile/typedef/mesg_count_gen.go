// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type MesgCount byte

const (
	MesgCountNumPerFile     MesgCount = 0
	MesgCountMaxPerFile     MesgCount = 1
	MesgCountMaxPerFileType MesgCount = 2
	MesgCountInvalid        MesgCount = 0xFF // INVALID
)

var mesgcounttostrs = map[MesgCount]string{
	MesgCountNumPerFile:     "num_per_file",
	MesgCountMaxPerFile:     "max_per_file",
	MesgCountMaxPerFileType: "max_per_file_type",
	MesgCountInvalid:        "invalid",
}

func (m MesgCount) String() string {
	val, ok := mesgcounttostrs[m]
	if !ok {
		return strconv.Itoa(int(m))
	}
	return val
}

var strtomesgcount = func() map[string]MesgCount {
	m := make(map[string]MesgCount)
	for t, str := range mesgcounttostrs {
		m[str] = MesgCount(t)
	}
	return m
}()

// FromString parse string into MesgCount constant it's represent, return MesgCountInvalid if not found.
func MesgCountFromString(s string) MesgCount {
	val, ok := strtomesgcount[s]
	if !ok {
		return strtomesgcount["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListMesgCount() []MesgCount {
	vs := make([]MesgCount, 0, len(mesgcounttostrs))
	for i := range mesgcounttostrs {
		vs = append(vs, MesgCount(i))
	}
	return vs
}
