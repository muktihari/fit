// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type WktStepTarget byte

const (
	WktStepTargetSpeed        WktStepTarget = 0
	WktStepTargetHeartRate    WktStepTarget = 1
	WktStepTargetOpen         WktStepTarget = 2
	WktStepTargetCadence      WktStepTarget = 3
	WktStepTargetPower        WktStepTarget = 4
	WktStepTargetGrade        WktStepTarget = 5
	WktStepTargetResistance   WktStepTarget = 6
	WktStepTargetPower3S      WktStepTarget = 7
	WktStepTargetPower10S     WktStepTarget = 8
	WktStepTargetPower30S     WktStepTarget = 9
	WktStepTargetPowerLap     WktStepTarget = 10
	WktStepTargetSwimStroke   WktStepTarget = 11
	WktStepTargetSpeedLap     WktStepTarget = 12
	WktStepTargetHeartRateLap WktStepTarget = 13
	WktStepTargetInvalid      WktStepTarget = 0xFF // INVALID
)

var wktsteptargettostrs = map[WktStepTarget]string{
	WktStepTargetSpeed:        "speed",
	WktStepTargetHeartRate:    "heart_rate",
	WktStepTargetOpen:         "open",
	WktStepTargetCadence:      "cadence",
	WktStepTargetPower:        "power",
	WktStepTargetGrade:        "grade",
	WktStepTargetResistance:   "resistance",
	WktStepTargetPower3S:      "power_3s",
	WktStepTargetPower10S:     "power_10s",
	WktStepTargetPower30S:     "power_30s",
	WktStepTargetPowerLap:     "power_lap",
	WktStepTargetSwimStroke:   "swim_stroke",
	WktStepTargetSpeedLap:     "speed_lap",
	WktStepTargetHeartRateLap: "heart_rate_lap",
	WktStepTargetInvalid:      "invalid",
}

func (w WktStepTarget) String() string {
	val, ok := wktsteptargettostrs[w]
	if !ok {
		return strconv.Itoa(int(w))
	}
	return val
}

var strtowktsteptarget = func() map[string]WktStepTarget {
	m := make(map[string]WktStepTarget)
	for t, str := range wktsteptargettostrs {
		m[str] = WktStepTarget(t)
	}
	return m
}()

// FromString parse string into WktStepTarget constant it's represent, return WktStepTargetInvalid if not found.
func WktStepTargetFromString(s string) WktStepTarget {
	val, ok := strtowktsteptarget[s]
	if !ok {
		return strtowktsteptarget["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListWktStepTarget() []WktStepTarget {
	vs := make([]WktStepTarget, 0, len(wktsteptargettostrs))
	for i := range wktsteptargettostrs {
		vs = append(vs, WktStepTarget(i))
	}
	return vs
}
