// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type SegmentLeaderboardType byte

const (
	SegmentLeaderboardTypeOverall      SegmentLeaderboardType = 0
	SegmentLeaderboardTypePersonalBest SegmentLeaderboardType = 1
	SegmentLeaderboardTypeConnections  SegmentLeaderboardType = 2
	SegmentLeaderboardTypeGroup        SegmentLeaderboardType = 3
	SegmentLeaderboardTypeChallenger   SegmentLeaderboardType = 4
	SegmentLeaderboardTypeKom          SegmentLeaderboardType = 5
	SegmentLeaderboardTypeQom          SegmentLeaderboardType = 6
	SegmentLeaderboardTypePr           SegmentLeaderboardType = 7
	SegmentLeaderboardTypeGoal         SegmentLeaderboardType = 8
	SegmentLeaderboardTypeRival        SegmentLeaderboardType = 9
	SegmentLeaderboardTypeClubLeader   SegmentLeaderboardType = 10
	SegmentLeaderboardTypeInvalid      SegmentLeaderboardType = 0xFF // INVALID
)

var segmentleaderboardtypetostrs = map[SegmentLeaderboardType]string{
	SegmentLeaderboardTypeOverall:      "overall",
	SegmentLeaderboardTypePersonalBest: "personal_best",
	SegmentLeaderboardTypeConnections:  "connections",
	SegmentLeaderboardTypeGroup:        "group",
	SegmentLeaderboardTypeChallenger:   "challenger",
	SegmentLeaderboardTypeKom:          "kom",
	SegmentLeaderboardTypeQom:          "qom",
	SegmentLeaderboardTypePr:           "pr",
	SegmentLeaderboardTypeGoal:         "goal",
	SegmentLeaderboardTypeRival:        "rival",
	SegmentLeaderboardTypeClubLeader:   "club_leader",
	SegmentLeaderboardTypeInvalid:      "invalid",
}

func (s SegmentLeaderboardType) String() string {
	val, ok := segmentleaderboardtypetostrs[s]
	if !ok {
		return strconv.Itoa(int(s))
	}
	return val
}

var strtosegmentleaderboardtype = func() map[string]SegmentLeaderboardType {
	m := make(map[string]SegmentLeaderboardType)
	for t, str := range segmentleaderboardtypetostrs {
		m[str] = SegmentLeaderboardType(t)
	}
	return m
}()

// FromString parse string into SegmentLeaderboardType constant it's represent, return SegmentLeaderboardTypeInvalid if not found.
func SegmentLeaderboardTypeFromString(s string) SegmentLeaderboardType {
	val, ok := strtosegmentleaderboardtype[s]
	if !ok {
		return strtosegmentleaderboardtype["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListSegmentLeaderboardType() []SegmentLeaderboardType {
	vs := make([]SegmentLeaderboardType, 0, len(segmentleaderboardtypetostrs))
	for i := range segmentleaderboardtypetostrs {
		vs = append(vs, SegmentLeaderboardType(i))
	}
	return vs
}
