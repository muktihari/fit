// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type SegmentLeaderboardType byte

const (
	SegmentLeaderboardTypeOverall      SegmentLeaderboardType = 0
	SegmentLeaderboardTypePersonalBest SegmentLeaderboardType = 1
	SegmentLeaderboardTypeConnections  SegmentLeaderboardType = 2
	SegmentLeaderboardTypeGroup        SegmentLeaderboardType = 3
	SegmentLeaderboardTypeChallenger   SegmentLeaderboardType = 4
	SegmentLeaderboardTypeKom          SegmentLeaderboardType = 5
	SegmentLeaderboardTypeQom          SegmentLeaderboardType = 6
	SegmentLeaderboardTypePr           SegmentLeaderboardType = 7
	SegmentLeaderboardTypeGoal         SegmentLeaderboardType = 8
	SegmentLeaderboardTypeCarrot       SegmentLeaderboardType = 9
	SegmentLeaderboardTypeClubLeader   SegmentLeaderboardType = 10
	SegmentLeaderboardTypeRival        SegmentLeaderboardType = 11
	SegmentLeaderboardTypeLast         SegmentLeaderboardType = 12
	SegmentLeaderboardTypeRecentBest   SegmentLeaderboardType = 13
	SegmentLeaderboardTypeCourseRecord SegmentLeaderboardType = 14
	SegmentLeaderboardTypeInvalid      SegmentLeaderboardType = 0xFF
)

func (s SegmentLeaderboardType) Byte() byte { return byte(s) }

func (s SegmentLeaderboardType) String() string {
	switch s {
	case SegmentLeaderboardTypeOverall:
		return "overall"
	case SegmentLeaderboardTypePersonalBest:
		return "personal_best"
	case SegmentLeaderboardTypeConnections:
		return "connections"
	case SegmentLeaderboardTypeGroup:
		return "group"
	case SegmentLeaderboardTypeChallenger:
		return "challenger"
	case SegmentLeaderboardTypeKom:
		return "kom"
	case SegmentLeaderboardTypeQom:
		return "qom"
	case SegmentLeaderboardTypePr:
		return "pr"
	case SegmentLeaderboardTypeGoal:
		return "goal"
	case SegmentLeaderboardTypeCarrot:
		return "carrot"
	case SegmentLeaderboardTypeClubLeader:
		return "club_leader"
	case SegmentLeaderboardTypeRival:
		return "rival"
	case SegmentLeaderboardTypeLast:
		return "last"
	case SegmentLeaderboardTypeRecentBest:
		return "recent_best"
	case SegmentLeaderboardTypeCourseRecord:
		return "course_record"
	default:
		return "SegmentLeaderboardTypeInvalid(" + strconv.Itoa(int(s)) + ")"
	}
}

// FromString parse string into SegmentLeaderboardType constant it's represent, return SegmentLeaderboardTypeInvalid if not found.
func SegmentLeaderboardTypeFromString(s string) SegmentLeaderboardType {
	switch s {
	case "overall":
		return SegmentLeaderboardTypeOverall
	case "personal_best":
		return SegmentLeaderboardTypePersonalBest
	case "connections":
		return SegmentLeaderboardTypeConnections
	case "group":
		return SegmentLeaderboardTypeGroup
	case "challenger":
		return SegmentLeaderboardTypeChallenger
	case "kom":
		return SegmentLeaderboardTypeKom
	case "qom":
		return SegmentLeaderboardTypeQom
	case "pr":
		return SegmentLeaderboardTypePr
	case "goal":
		return SegmentLeaderboardTypeGoal
	case "carrot":
		return SegmentLeaderboardTypeCarrot
	case "club_leader":
		return SegmentLeaderboardTypeClubLeader
	case "rival":
		return SegmentLeaderboardTypeRival
	case "last":
		return SegmentLeaderboardTypeLast
	case "recent_best":
		return SegmentLeaderboardTypeRecentBest
	case "course_record":
		return SegmentLeaderboardTypeCourseRecord
	default:
		return SegmentLeaderboardTypeInvalid
	}
}

// List returns all constants.
func ListSegmentLeaderboardType() []SegmentLeaderboardType {
	return []SegmentLeaderboardType{
		SegmentLeaderboardTypeOverall,
		SegmentLeaderboardTypePersonalBest,
		SegmentLeaderboardTypeConnections,
		SegmentLeaderboardTypeGroup,
		SegmentLeaderboardTypeChallenger,
		SegmentLeaderboardTypeKom,
		SegmentLeaderboardTypeQom,
		SegmentLeaderboardTypePr,
		SegmentLeaderboardTypeGoal,
		SegmentLeaderboardTypeCarrot,
		SegmentLeaderboardTypeClubLeader,
		SegmentLeaderboardTypeRival,
		SegmentLeaderboardTypeLast,
		SegmentLeaderboardTypeRecentBest,
		SegmentLeaderboardTypeCourseRecord,
	}
}
