// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type PowerPhaseType byte

const (
	PowerPhaseTypePowerPhaseStartAngle PowerPhaseType = 0
	PowerPhaseTypePowerPhaseEndAngle   PowerPhaseType = 1
	PowerPhaseTypePowerPhaseArcLength  PowerPhaseType = 2
	PowerPhaseTypePowerPhaseCenter     PowerPhaseType = 3
	PowerPhaseTypeInvalid              PowerPhaseType = 0xFF
)

func (p PowerPhaseType) Byte() byte { return byte(p) }

func (p PowerPhaseType) String() string {
	switch p {
	case PowerPhaseTypePowerPhaseStartAngle:
		return "power_phase_start_angle"
	case PowerPhaseTypePowerPhaseEndAngle:
		return "power_phase_end_angle"
	case PowerPhaseTypePowerPhaseArcLength:
		return "power_phase_arc_length"
	case PowerPhaseTypePowerPhaseCenter:
		return "power_phase_center"
	default:
		return "PowerPhaseTypeInvalid(" + strconv.Itoa(int(p)) + ")"
	}
}

// FromString parse string into PowerPhaseType constant it's represent, return PowerPhaseTypeInvalid if not found.
func PowerPhaseTypeFromString(s string) PowerPhaseType {
	switch s {
	case "power_phase_start_angle":
		return PowerPhaseTypePowerPhaseStartAngle
	case "power_phase_end_angle":
		return PowerPhaseTypePowerPhaseEndAngle
	case "power_phase_arc_length":
		return PowerPhaseTypePowerPhaseArcLength
	case "power_phase_center":
		return PowerPhaseTypePowerPhaseCenter
	default:
		return PowerPhaseTypeInvalid
	}
}

// List returns all constants.
func ListPowerPhaseType() []PowerPhaseType {
	return []PowerPhaseType{
		PowerPhaseTypePowerPhaseStartAngle,
		PowerPhaseTypePowerPhaseEndAngle,
		PowerPhaseTypePowerPhaseArcLength,
		PowerPhaseTypePowerPhaseCenter,
	}
}
