// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type PowerPhaseType byte

const (
	PowerPhaseTypePowerPhaseStartAngle PowerPhaseType = 0
	PowerPhaseTypePowerPhaseEndAngle   PowerPhaseType = 1
	PowerPhaseTypePowerPhaseArcLength  PowerPhaseType = 2
	PowerPhaseTypePowerPhaseCenter     PowerPhaseType = 3
	PowerPhaseTypeInvalid              PowerPhaseType = 0xFF // INVALID
)

var powerphasetypetostrs = map[PowerPhaseType]string{
	PowerPhaseTypePowerPhaseStartAngle: "power_phase_start_angle",
	PowerPhaseTypePowerPhaseEndAngle:   "power_phase_end_angle",
	PowerPhaseTypePowerPhaseArcLength:  "power_phase_arc_length",
	PowerPhaseTypePowerPhaseCenter:     "power_phase_center",
	PowerPhaseTypeInvalid:              "invalid",
}

func (p PowerPhaseType) String() string {
	val, ok := powerphasetypetostrs[p]
	if !ok {
		return strconv.Itoa(int(p))
	}
	return val
}

var strtopowerphasetype = func() map[string]PowerPhaseType {
	m := make(map[string]PowerPhaseType)
	for t, str := range powerphasetypetostrs {
		m[str] = PowerPhaseType(t)
	}
	return m
}()

// FromString parse string into PowerPhaseType constant it's represent, return PowerPhaseTypeInvalid if not found.
func PowerPhaseTypeFromString(s string) PowerPhaseType {
	val, ok := strtopowerphasetype[s]
	if !ok {
		return strtopowerphasetype["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListPowerPhaseType() []PowerPhaseType {
	vs := make([]PowerPhaseType, 0, len(powerphasetypetostrs))
	for i := range powerphasetypetostrs {
		vs = append(vs, PowerPhaseType(i))
	}
	return vs
}
