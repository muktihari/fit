// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type TissueModelType byte

const (
	TissueModelTypeZhl16C  TissueModelType = 0    // Buhlmann's decompression algorithm, version C
	TissueModelTypeInvalid TissueModelType = 0xFF // INVALID
)

var tissuemodeltypetostrs = map[TissueModelType]string{
	TissueModelTypeZhl16C:  "zhl_16c",
	TissueModelTypeInvalid: "invalid",
}

func (t TissueModelType) String() string {
	val, ok := tissuemodeltypetostrs[t]
	if !ok {
		return strconv.Itoa(int(t))
	}
	return val
}

var strtotissuemodeltype = func() map[string]TissueModelType {
	m := make(map[string]TissueModelType)
	for t, str := range tissuemodeltypetostrs {
		m[str] = TissueModelType(t)
	}
	return m
}()

// FromString parse string into TissueModelType constant it's represent, return TissueModelTypeInvalid if not found.
func TissueModelTypeFromString(s string) TissueModelType {
	val, ok := strtotissuemodeltype[s]
	if !ok {
		return strtotissuemodeltype["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListTissueModelType() []TissueModelType {
	vs := make([]TissueModelType, 0, len(tissuemodeltypetostrs))
	for i := range tissuemodeltypetostrs {
		vs = append(vs, TissueModelType(i))
	}
	return vs
}
