// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type BatteryStatus uint8

const (
	BatteryStatusNew      BatteryStatus = 1
	BatteryStatusGood     BatteryStatus = 2
	BatteryStatusOk       BatteryStatus = 3
	BatteryStatusLow      BatteryStatus = 4
	BatteryStatusCritical BatteryStatus = 5
	BatteryStatusCharging BatteryStatus = 6
	BatteryStatusUnknown  BatteryStatus = 7
	BatteryStatusInvalid  BatteryStatus = 0xFF // INVALID
)

var batterystatustostrs = map[BatteryStatus]string{
	BatteryStatusNew:      "new",
	BatteryStatusGood:     "good",
	BatteryStatusOk:       "ok",
	BatteryStatusLow:      "low",
	BatteryStatusCritical: "critical",
	BatteryStatusCharging: "charging",
	BatteryStatusUnknown:  "unknown",
	BatteryStatusInvalid:  "invalid",
}

func (b BatteryStatus) String() string {
	val, ok := batterystatustostrs[b]
	if !ok {
		return strconv.FormatUint(uint64(b), 10)
	}
	return val
}

var strtobatterystatus = func() map[string]BatteryStatus {
	m := make(map[string]BatteryStatus)
	for t, str := range batterystatustostrs {
		m[str] = BatteryStatus(t)
	}
	return m
}()

// FromString parse string into BatteryStatus constant it's represent, return BatteryStatusInvalid if not found.
func BatteryStatusFromString(s string) BatteryStatus {
	val, ok := strtobatterystatus[s]
	if !ok {
		return strtobatterystatus["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListBatteryStatus() []BatteryStatus {
	vs := make([]BatteryStatus, 0, len(batterystatustostrs))
	for i := range batterystatustostrs {
		vs = append(vs, BatteryStatus(i))
	}
	return vs
}
