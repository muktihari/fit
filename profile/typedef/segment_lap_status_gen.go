// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type SegmentLapStatus byte

const (
	SegmentLapStatusEnd     SegmentLapStatus = 0
	SegmentLapStatusFail    SegmentLapStatus = 1
	SegmentLapStatusInvalid SegmentLapStatus = 0xFF // INVALID
)

var segmentlapstatustostrs = map[SegmentLapStatus]string{
	SegmentLapStatusEnd:     "end",
	SegmentLapStatusFail:    "fail",
	SegmentLapStatusInvalid: "invalid",
}

func (s SegmentLapStatus) String() string {
	val, ok := segmentlapstatustostrs[s]
	if !ok {
		return strconv.Itoa(int(s))
	}
	return val
}

var strtosegmentlapstatus = func() map[string]SegmentLapStatus {
	m := make(map[string]SegmentLapStatus)
	for t, str := range segmentlapstatustostrs {
		m[str] = SegmentLapStatus(t)
	}
	return m
}()

// FromString parse string into SegmentLapStatus constant it's represent, return SegmentLapStatusInvalid if not found.
func SegmentLapStatusFromString(s string) SegmentLapStatus {
	val, ok := strtosegmentlapstatus[s]
	if !ok {
		return strtosegmentlapstatus["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListSegmentLapStatus() []SegmentLapStatus {
	vs := make([]SegmentLapStatus, 0, len(segmentlapstatustostrs))
	for i := range segmentlapstatustostrs {
		vs = append(vs, SegmentLapStatus(i))
	}
	return vs
}
