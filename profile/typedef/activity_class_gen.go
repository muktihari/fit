// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type ActivityClass byte

const (
	ActivityClassLevel    ActivityClass = 0x7F // 0 to 100
	ActivityClassLevelMax ActivityClass = 100
	ActivityClassAthlete  ActivityClass = 0x80
	ActivityClassInvalid  ActivityClass = 0xFF // INVALID
)

var activityclasstostrs = map[ActivityClass]string{
	ActivityClassLevel:    "level",
	ActivityClassLevelMax: "level_max",
	ActivityClassAthlete:  "athlete",
	ActivityClassInvalid:  "invalid",
}

func (a ActivityClass) String() string {
	val, ok := activityclasstostrs[a]
	if !ok {
		return strconv.Itoa(int(a))
	}
	return val
}

var strtoactivityclass = func() map[string]ActivityClass {
	m := make(map[string]ActivityClass)
	for t, str := range activityclasstostrs {
		m[str] = ActivityClass(t)
	}
	return m
}()

// FromString parse string into ActivityClass constant it's represent, return ActivityClassInvalid if not found.
func ActivityClassFromString(s string) ActivityClass {
	val, ok := strtoactivityclass[s]
	if !ok {
		return strtoactivityclass["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListActivityClass() []ActivityClass {
	vs := make([]ActivityClass, 0, len(activityclasstostrs))
	for i := range activityclasstostrs {
		vs = append(vs, ActivityClass(i))
	}
	return vs
}
