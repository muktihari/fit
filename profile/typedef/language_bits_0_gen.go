// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type LanguageBits0 uint8

const (
	LanguageBits0English  LanguageBits0 = 0x01
	LanguageBits0French   LanguageBits0 = 0x02
	LanguageBits0Italian  LanguageBits0 = 0x04
	LanguageBits0German   LanguageBits0 = 0x08
	LanguageBits0Spanish  LanguageBits0 = 0x10
	LanguageBits0Croatian LanguageBits0 = 0x20
	LanguageBits0Czech    LanguageBits0 = 0x40
	LanguageBits0Danish   LanguageBits0 = 0x80
	LanguageBits0Invalid  LanguageBits0 = 0x0 // INVALID
)

var languagebits0tostrs = map[LanguageBits0]string{
	LanguageBits0English:  "english",
	LanguageBits0French:   "french",
	LanguageBits0Italian:  "italian",
	LanguageBits0German:   "german",
	LanguageBits0Spanish:  "spanish",
	LanguageBits0Croatian: "croatian",
	LanguageBits0Czech:    "czech",
	LanguageBits0Danish:   "danish",
	LanguageBits0Invalid:  "invalid",
}

func (l LanguageBits0) String() string {
	val, ok := languagebits0tostrs[l]
	if !ok {
		return strconv.FormatUint(uint64(l), 10)
	}
	return val
}

var strtolanguagebits0 = func() map[string]LanguageBits0 {
	m := make(map[string]LanguageBits0)
	for t, str := range languagebits0tostrs {
		m[str] = LanguageBits0(t)
	}
	return m
}()

// FromString parse string into LanguageBits0 constant it's represent, return LanguageBits0Invalid if not found.
func LanguageBits0FromString(s string) LanguageBits0 {
	val, ok := strtolanguagebits0[s]
	if !ok {
		return strtolanguagebits0["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListLanguageBits0() []LanguageBits0 {
	vs := make([]LanguageBits0, 0, len(languagebits0tostrs))
	for i := range languagebits0tostrs {
		vs = append(vs, LanguageBits0(i))
	}
	return vs
}
