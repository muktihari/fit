// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type AntChannelId uint32

const (
	AntChannelIdAntExtendedDeviceNumberUpperNibble AntChannelId = 0xF0000000
	AntChannelIdAntTransmissionTypeLowerNibble     AntChannelId = 0x0F000000
	AntChannelIdAntDeviceType                      AntChannelId = 0x00FF0000
	AntChannelIdAntDeviceNumber                    AntChannelId = 0x0000FFFF
	AntChannelIdInvalid                            AntChannelId = 0x0 // INVALID
)

var antchannelidtostrs = map[AntChannelId]string{
	AntChannelIdAntExtendedDeviceNumberUpperNibble: "ant_extended_device_number_upper_nibble",
	AntChannelIdAntTransmissionTypeLowerNibble:     "ant_transmission_type_lower_nibble",
	AntChannelIdAntDeviceType:                      "ant_device_type",
	AntChannelIdAntDeviceNumber:                    "ant_device_number",
	AntChannelIdInvalid:                            "invalid",
}

func (a AntChannelId) String() string {
	val, ok := antchannelidtostrs[a]
	if !ok {
		return strconv.FormatUint(uint64(a), 10)
	}
	return val
}

var strtoantchannelid = func() map[string]AntChannelId {
	m := make(map[string]AntChannelId)
	for t, str := range antchannelidtostrs {
		m[str] = AntChannelId(t)
	}
	return m
}()

// FromString parse string into AntChannelId constant it's represent, return AntChannelIdInvalid if not found.
func AntChannelIdFromString(s string) AntChannelId {
	val, ok := strtoantchannelid[s]
	if !ok {
		return strtoantchannelid["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListAntChannelId() []AntChannelId {
	vs := make([]AntChannelId, 0, len(antchannelidtostrs))
	for i := range antchannelidtostrs {
		vs = append(vs, AntChannelId(i))
	}
	return vs
}
