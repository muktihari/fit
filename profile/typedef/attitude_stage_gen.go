// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type AttitudeStage byte

const (
	AttitudeStageFailed   AttitudeStage = 0
	AttitudeStageAligning AttitudeStage = 1
	AttitudeStageDegraded AttitudeStage = 2
	AttitudeStageValid    AttitudeStage = 3
	AttitudeStageInvalid  AttitudeStage = 0xFF // INVALID
)

var attitudestagetostrs = map[AttitudeStage]string{
	AttitudeStageFailed:   "failed",
	AttitudeStageAligning: "aligning",
	AttitudeStageDegraded: "degraded",
	AttitudeStageValid:    "valid",
	AttitudeStageInvalid:  "invalid",
}

func (a AttitudeStage) String() string {
	val, ok := attitudestagetostrs[a]
	if !ok {
		return strconv.Itoa(int(a))
	}
	return val
}

var strtoattitudestage = func() map[string]AttitudeStage {
	m := make(map[string]AttitudeStage)
	for t, str := range attitudestagetostrs {
		m[str] = AttitudeStage(t)
	}
	return m
}()

// FromString parse string into AttitudeStage constant it's represent, return AttitudeStageInvalid if not found.
func AttitudeStageFromString(s string) AttitudeStage {
	val, ok := strtoattitudestage[s]
	if !ok {
		return strtoattitudestage["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListAttitudeStage() []AttitudeStage {
	vs := make([]AttitudeStage, 0, len(attitudestagetostrs))
	for i := range attitudestagetostrs {
		vs = append(vs, AttitudeStage(i))
	}
	return vs
}
