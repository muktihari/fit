// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type GasConsumptionRateType byte

const (
	GasConsumptionRateTypePressureSac GasConsumptionRateType = 0 // Pressure-based Surface Air Consumption
	GasConsumptionRateTypeVolumeSac   GasConsumptionRateType = 1 // Volumetric Surface Air Consumption
	GasConsumptionRateTypeRmv         GasConsumptionRateType = 2 // Respiratory Minute Volume
	GasConsumptionRateTypeInvalid     GasConsumptionRateType = 0xFF
)

func (g GasConsumptionRateType) Byte() byte { return byte(g) }

func (g GasConsumptionRateType) String() string {
	switch g {
	case GasConsumptionRateTypePressureSac:
		return "pressure_sac"
	case GasConsumptionRateTypeVolumeSac:
		return "volume_sac"
	case GasConsumptionRateTypeRmv:
		return "rmv"
	default:
		return "GasConsumptionRateTypeInvalid(" + strconv.Itoa(int(g)) + ")"
	}
}

// FromString parse string into GasConsumptionRateType constant it's represent, return GasConsumptionRateTypeInvalid if not found.
func GasConsumptionRateTypeFromString(s string) GasConsumptionRateType {
	switch s {
	case "pressure_sac":
		return GasConsumptionRateTypePressureSac
	case "volume_sac":
		return GasConsumptionRateTypeVolumeSac
	case "rmv":
		return GasConsumptionRateTypeRmv
	default:
		return GasConsumptionRateTypeInvalid
	}
}

// List returns all constants.
func ListGasConsumptionRateType() []GasConsumptionRateType {
	return []GasConsumptionRateType{
		GasConsumptionRateTypePressureSac,
		GasConsumptionRateTypeVolumeSac,
		GasConsumptionRateTypeRmv,
	}
}
