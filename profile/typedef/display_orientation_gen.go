// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type DisplayOrientation byte

const (
	DisplayOrientationAuto             DisplayOrientation = 0 // automatic if the device supports it
	DisplayOrientationPortrait         DisplayOrientation = 1
	DisplayOrientationLandscape        DisplayOrientation = 2
	DisplayOrientationPortraitFlipped  DisplayOrientation = 3    // portrait mode but rotated 180 degrees
	DisplayOrientationLandscapeFlipped DisplayOrientation = 4    // landscape mode but rotated 180 degrees
	DisplayOrientationInvalid          DisplayOrientation = 0xFF // INVALID
)

var displayorientationtostrs = map[DisplayOrientation]string{
	DisplayOrientationAuto:             "auto",
	DisplayOrientationPortrait:         "portrait",
	DisplayOrientationLandscape:        "landscape",
	DisplayOrientationPortraitFlipped:  "portrait_flipped",
	DisplayOrientationLandscapeFlipped: "landscape_flipped",
	DisplayOrientationInvalid:          "invalid",
}

func (d DisplayOrientation) String() string {
	val, ok := displayorientationtostrs[d]
	if !ok {
		return strconv.Itoa(int(d))
	}
	return val
}

var strtodisplayorientation = func() map[string]DisplayOrientation {
	m := make(map[string]DisplayOrientation)
	for t, str := range displayorientationtostrs {
		m[str] = DisplayOrientation(t)
	}
	return m
}()

// FromString parse string into DisplayOrientation constant it's represent, return DisplayOrientationInvalid if not found.
func DisplayOrientationFromString(s string) DisplayOrientation {
	val, ok := strtodisplayorientation[s]
	if !ok {
		return strtodisplayorientation["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListDisplayOrientation() []DisplayOrientation {
	vs := make([]DisplayOrientation, 0, len(displayorientationtostrs))
	for i := range displayorientationtostrs {
		vs = append(vs, DisplayOrientation(i))
	}
	return vs
}
