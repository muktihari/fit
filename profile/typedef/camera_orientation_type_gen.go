// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type CameraOrientationType byte

const (
	CameraOrientationTypeCameraOrientation0   CameraOrientationType = 0
	CameraOrientationTypeCameraOrientation90  CameraOrientationType = 1
	CameraOrientationTypeCameraOrientation180 CameraOrientationType = 2
	CameraOrientationTypeCameraOrientation270 CameraOrientationType = 3
	CameraOrientationTypeInvalid              CameraOrientationType = 0xFF // INVALID
)

var cameraorientationtypetostrs = map[CameraOrientationType]string{
	CameraOrientationTypeCameraOrientation0:   "camera_orientation_0",
	CameraOrientationTypeCameraOrientation90:  "camera_orientation_90",
	CameraOrientationTypeCameraOrientation180: "camera_orientation_180",
	CameraOrientationTypeCameraOrientation270: "camera_orientation_270",
	CameraOrientationTypeInvalid:              "invalid",
}

func (c CameraOrientationType) String() string {
	val, ok := cameraorientationtypetostrs[c]
	if !ok {
		return strconv.Itoa(int(c))
	}
	return val
}

var strtocameraorientationtype = func() map[string]CameraOrientationType {
	m := make(map[string]CameraOrientationType)
	for t, str := range cameraorientationtypetostrs {
		m[str] = CameraOrientationType(t)
	}
	return m
}()

// FromString parse string into CameraOrientationType constant it's represent, return CameraOrientationTypeInvalid if not found.
func CameraOrientationTypeFromString(s string) CameraOrientationType {
	val, ok := strtocameraorientationtype[s]
	if !ok {
		return strtocameraorientationtype["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListCameraOrientationType() []CameraOrientationType {
	vs := make([]CameraOrientationType, 0, len(cameraorientationtypetostrs))
	for i := range cameraorientationtypetostrs {
		vs = append(vs, CameraOrientationType(i))
	}
	return vs
}
