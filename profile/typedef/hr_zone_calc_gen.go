// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type HrZoneCalc byte

const (
	HrZoneCalcCustom       HrZoneCalc = 0
	HrZoneCalcPercentMaxHr HrZoneCalc = 1
	HrZoneCalcPercentHrr   HrZoneCalc = 2
	HrZoneCalcPercentLthr  HrZoneCalc = 3
	HrZoneCalcInvalid      HrZoneCalc = 0xFF // INVALID
)

var hrzonecalctostrs = map[HrZoneCalc]string{
	HrZoneCalcCustom:       "custom",
	HrZoneCalcPercentMaxHr: "percent_max_hr",
	HrZoneCalcPercentHrr:   "percent_hrr",
	HrZoneCalcPercentLthr:  "percent_lthr",
	HrZoneCalcInvalid:      "invalid",
}

func (h HrZoneCalc) String() string {
	val, ok := hrzonecalctostrs[h]
	if !ok {
		return strconv.Itoa(int(h))
	}
	return val
}

var strtohrzonecalc = func() map[string]HrZoneCalc {
	m := make(map[string]HrZoneCalc)
	for t, str := range hrzonecalctostrs {
		m[str] = HrZoneCalc(t)
	}
	return m
}()

// FromString parse string into HrZoneCalc constant it's represent, return HrZoneCalcInvalid if not found.
func HrZoneCalcFromString(s string) HrZoneCalc {
	val, ok := strtohrzonecalc[s]
	if !ok {
		return strtohrzonecalc["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListHrZoneCalc() []HrZoneCalc {
	vs := make([]HrZoneCalc, 0, len(hrzonecalctostrs))
	for i := range hrzonecalctostrs {
		vs = append(vs, HrZoneCalc(i))
	}
	return vs
}
