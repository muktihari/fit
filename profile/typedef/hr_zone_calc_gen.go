// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type HrZoneCalc byte

const (
	HrZoneCalcCustom       HrZoneCalc = 0
	HrZoneCalcPercentMaxHr HrZoneCalc = 1
	HrZoneCalcPercentHrr   HrZoneCalc = 2
	HrZoneCalcPercentLthr  HrZoneCalc = 3
	HrZoneCalcInvalid      HrZoneCalc = 0xFF
)

func (h HrZoneCalc) Byte() byte { return byte(h) }

func (h HrZoneCalc) String() string {
	switch h {
	case HrZoneCalcCustom:
		return "custom"
	case HrZoneCalcPercentMaxHr:
		return "percent_max_hr"
	case HrZoneCalcPercentHrr:
		return "percent_hrr"
	case HrZoneCalcPercentLthr:
		return "percent_lthr"
	default:
		return "HrZoneCalcInvalid(" + strconv.Itoa(int(h)) + ")"
	}
}

// FromString parse string into HrZoneCalc constant it's represent, return HrZoneCalcInvalid if not found.
func HrZoneCalcFromString(s string) HrZoneCalc {
	switch s {
	case "custom":
		return HrZoneCalcCustom
	case "percent_max_hr":
		return HrZoneCalcPercentMaxHr
	case "percent_hrr":
		return HrZoneCalcPercentHrr
	case "percent_lthr":
		return HrZoneCalcPercentLthr
	default:
		return HrZoneCalcInvalid
	}
}

// List returns all constants.
func ListHrZoneCalc() []HrZoneCalc {
	return []HrZoneCalc{
		HrZoneCalcCustom,
		HrZoneCalcPercentMaxHr,
		HrZoneCalcPercentHrr,
		HrZoneCalcPercentLthr,
	}
}
