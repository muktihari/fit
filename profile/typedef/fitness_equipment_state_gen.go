// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type FitnessEquipmentState byte

const (
	FitnessEquipmentStateReady   FitnessEquipmentState = 0
	FitnessEquipmentStateInUse   FitnessEquipmentState = 1
	FitnessEquipmentStatePaused  FitnessEquipmentState = 2
	FitnessEquipmentStateUnknown FitnessEquipmentState = 3    // lost connection to fitness equipment
	FitnessEquipmentStateInvalid FitnessEquipmentState = 0xFF // INVALID
)

var fitnessequipmentstatetostrs = map[FitnessEquipmentState]string{
	FitnessEquipmentStateReady:   "ready",
	FitnessEquipmentStateInUse:   "in_use",
	FitnessEquipmentStatePaused:  "paused",
	FitnessEquipmentStateUnknown: "unknown",
	FitnessEquipmentStateInvalid: "invalid",
}

func (f FitnessEquipmentState) String() string {
	val, ok := fitnessequipmentstatetostrs[f]
	if !ok {
		return strconv.Itoa(int(f))
	}
	return val
}

var strtofitnessequipmentstate = func() map[string]FitnessEquipmentState {
	m := make(map[string]FitnessEquipmentState)
	for t, str := range fitnessequipmentstatetostrs {
		m[str] = FitnessEquipmentState(t)
	}
	return m
}()

// FromString parse string into FitnessEquipmentState constant it's represent, return FitnessEquipmentStateInvalid if not found.
func FitnessEquipmentStateFromString(s string) FitnessEquipmentState {
	val, ok := strtofitnessequipmentstate[s]
	if !ok {
		return strtofitnessequipmentstate["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListFitnessEquipmentState() []FitnessEquipmentState {
	vs := make([]FitnessEquipmentState, 0, len(fitnessequipmentstatetostrs))
	for i := range fitnessequipmentstatetostrs {
		vs = append(vs, FitnessEquipmentState(i))
	}
	return vs
}
