// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type GoalRecurrence byte

const (
	GoalRecurrenceOff     GoalRecurrence = 0
	GoalRecurrenceDaily   GoalRecurrence = 1
	GoalRecurrenceWeekly  GoalRecurrence = 2
	GoalRecurrenceMonthly GoalRecurrence = 3
	GoalRecurrenceYearly  GoalRecurrence = 4
	GoalRecurrenceCustom  GoalRecurrence = 5
	GoalRecurrenceInvalid GoalRecurrence = 0xFF // INVALID
)

var goalrecurrencetostrs = map[GoalRecurrence]string{
	GoalRecurrenceOff:     "off",
	GoalRecurrenceDaily:   "daily",
	GoalRecurrenceWeekly:  "weekly",
	GoalRecurrenceMonthly: "monthly",
	GoalRecurrenceYearly:  "yearly",
	GoalRecurrenceCustom:  "custom",
	GoalRecurrenceInvalid: "invalid",
}

func (g GoalRecurrence) String() string {
	val, ok := goalrecurrencetostrs[g]
	if !ok {
		return strconv.Itoa(int(g))
	}
	return val
}

var strtogoalrecurrence = func() map[string]GoalRecurrence {
	m := make(map[string]GoalRecurrence)
	for t, str := range goalrecurrencetostrs {
		m[str] = GoalRecurrence(t)
	}
	return m
}()

// FromString parse string into GoalRecurrence constant it's represent, return GoalRecurrenceInvalid if not found.
func GoalRecurrenceFromString(s string) GoalRecurrence {
	val, ok := strtogoalrecurrence[s]
	if !ok {
		return strtogoalrecurrence["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListGoalRecurrence() []GoalRecurrence {
	vs := make([]GoalRecurrence, 0, len(goalrecurrencetostrs))
	for i := range goalrecurrencetostrs {
		vs = append(vs, GoalRecurrence(i))
	}
	return vs
}
