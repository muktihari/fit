// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type Tone byte

const (
	ToneOff            Tone = 0
	ToneTone           Tone = 1
	ToneVibrate        Tone = 2
	ToneToneAndVibrate Tone = 3
	ToneInvalid        Tone = 0xFF // INVALID
)

var tonetostrs = map[Tone]string{
	ToneOff:            "off",
	ToneTone:           "tone",
	ToneVibrate:        "vibrate",
	ToneToneAndVibrate: "tone_and_vibrate",
	ToneInvalid:        "invalid",
}

func (t Tone) String() string {
	val, ok := tonetostrs[t]
	if !ok {
		return strconv.Itoa(int(t))
	}
	return val
}

var strtotone = func() map[string]Tone {
	m := make(map[string]Tone)
	for t, str := range tonetostrs {
		m[str] = Tone(t)
	}
	return m
}()

// FromString parse string into Tone constant it's represent, return ToneInvalid if not found.
func ToneFromString(s string) Tone {
	val, ok := strtotone[s]
	if !ok {
		return strtotone["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListTone() []Tone {
	vs := make([]Tone, 0, len(tonetostrs))
	for i := range tonetostrs {
		vs = append(vs, Tone(i))
	}
	return vs
}
