// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type TurnType byte

const (
	TurnTypeArrivingIdx             TurnType = 0
	TurnTypeArrivingLeftIdx         TurnType = 1
	TurnTypeArrivingRightIdx        TurnType = 2
	TurnTypeArrivingViaIdx          TurnType = 3
	TurnTypeArrivingViaLeftIdx      TurnType = 4
	TurnTypeArrivingViaRightIdx     TurnType = 5
	TurnTypeBearKeepLeftIdx         TurnType = 6
	TurnTypeBearKeepRightIdx        TurnType = 7
	TurnTypeContinueIdx             TurnType = 8
	TurnTypeExitLeftIdx             TurnType = 9
	TurnTypeExitRightIdx            TurnType = 10
	TurnTypeFerryIdx                TurnType = 11
	TurnTypeRoundabout45Idx         TurnType = 12
	TurnTypeRoundabout90Idx         TurnType = 13
	TurnTypeRoundabout135Idx        TurnType = 14
	TurnTypeRoundabout180Idx        TurnType = 15
	TurnTypeRoundabout225Idx        TurnType = 16
	TurnTypeRoundabout270Idx        TurnType = 17
	TurnTypeRoundabout315Idx        TurnType = 18
	TurnTypeRoundabout360Idx        TurnType = 19
	TurnTypeRoundaboutNeg45Idx      TurnType = 20
	TurnTypeRoundaboutNeg90Idx      TurnType = 21
	TurnTypeRoundaboutNeg135Idx     TurnType = 22
	TurnTypeRoundaboutNeg180Idx     TurnType = 23
	TurnTypeRoundaboutNeg225Idx     TurnType = 24
	TurnTypeRoundaboutNeg270Idx     TurnType = 25
	TurnTypeRoundaboutNeg315Idx     TurnType = 26
	TurnTypeRoundaboutNeg360Idx     TurnType = 27
	TurnTypeRoundaboutGenericIdx    TurnType = 28
	TurnTypeRoundaboutNegGenericIdx TurnType = 29
	TurnTypeSharpTurnLeftIdx        TurnType = 30
	TurnTypeSharpTurnRightIdx       TurnType = 31
	TurnTypeTurnLeftIdx             TurnType = 32
	TurnTypeTurnRightIdx            TurnType = 33
	TurnTypeUturnLeftIdx            TurnType = 34
	TurnTypeUturnRightIdx           TurnType = 35
	TurnTypeIconInvIdx              TurnType = 36
	TurnTypeIconIdxCnt              TurnType = 37
	TurnTypeInvalid                 TurnType = 0xFF // INVALID
)

var turntypetostrs = map[TurnType]string{
	TurnTypeArrivingIdx:             "arriving_idx",
	TurnTypeArrivingLeftIdx:         "arriving_left_idx",
	TurnTypeArrivingRightIdx:        "arriving_right_idx",
	TurnTypeArrivingViaIdx:          "arriving_via_idx",
	TurnTypeArrivingViaLeftIdx:      "arriving_via_left_idx",
	TurnTypeArrivingViaRightIdx:     "arriving_via_right_idx",
	TurnTypeBearKeepLeftIdx:         "bear_keep_left_idx",
	TurnTypeBearKeepRightIdx:        "bear_keep_right_idx",
	TurnTypeContinueIdx:             "continue_idx",
	TurnTypeExitLeftIdx:             "exit_left_idx",
	TurnTypeExitRightIdx:            "exit_right_idx",
	TurnTypeFerryIdx:                "ferry_idx",
	TurnTypeRoundabout45Idx:         "roundabout_45_idx",
	TurnTypeRoundabout90Idx:         "roundabout_90_idx",
	TurnTypeRoundabout135Idx:        "roundabout_135_idx",
	TurnTypeRoundabout180Idx:        "roundabout_180_idx",
	TurnTypeRoundabout225Idx:        "roundabout_225_idx",
	TurnTypeRoundabout270Idx:        "roundabout_270_idx",
	TurnTypeRoundabout315Idx:        "roundabout_315_idx",
	TurnTypeRoundabout360Idx:        "roundabout_360_idx",
	TurnTypeRoundaboutNeg45Idx:      "roundabout_neg_45_idx",
	TurnTypeRoundaboutNeg90Idx:      "roundabout_neg_90_idx",
	TurnTypeRoundaboutNeg135Idx:     "roundabout_neg_135_idx",
	TurnTypeRoundaboutNeg180Idx:     "roundabout_neg_180_idx",
	TurnTypeRoundaboutNeg225Idx:     "roundabout_neg_225_idx",
	TurnTypeRoundaboutNeg270Idx:     "roundabout_neg_270_idx",
	TurnTypeRoundaboutNeg315Idx:     "roundabout_neg_315_idx",
	TurnTypeRoundaboutNeg360Idx:     "roundabout_neg_360_idx",
	TurnTypeRoundaboutGenericIdx:    "roundabout_generic_idx",
	TurnTypeRoundaboutNegGenericIdx: "roundabout_neg_generic_idx",
	TurnTypeSharpTurnLeftIdx:        "sharp_turn_left_idx",
	TurnTypeSharpTurnRightIdx:       "sharp_turn_right_idx",
	TurnTypeTurnLeftIdx:             "turn_left_idx",
	TurnTypeTurnRightIdx:            "turn_right_idx",
	TurnTypeUturnLeftIdx:            "uturn_left_idx",
	TurnTypeUturnRightIdx:           "uturn_right_idx",
	TurnTypeIconInvIdx:              "icon_inv_idx",
	TurnTypeIconIdxCnt:              "icon_idx_cnt",
	TurnTypeInvalid:                 "invalid",
}

func (t TurnType) String() string {
	val, ok := turntypetostrs[t]
	if !ok {
		return strconv.Itoa(int(t))
	}
	return val
}

var strtoturntype = func() map[string]TurnType {
	m := make(map[string]TurnType)
	for t, str := range turntypetostrs {
		m[str] = TurnType(t)
	}
	return m
}()

// FromString parse string into TurnType constant it's represent, return TurnTypeInvalid if not found.
func TurnTypeFromString(s string) TurnType {
	val, ok := strtoturntype[s]
	if !ok {
		return strtoturntype["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListTurnType() []TurnType {
	vs := make([]TurnType, 0, len(turntypetostrs))
	for i := range turntypetostrs {
		vs = append(vs, TurnType(i))
	}
	return vs
}
