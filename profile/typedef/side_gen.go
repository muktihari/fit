// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type Side byte

const (
	SideRight   Side = 0
	SideLeft    Side = 1
	SideInvalid Side = 0xFF // INVALID
)

var sidetostrs = map[Side]string{
	SideRight:   "right",
	SideLeft:    "left",
	SideInvalid: "invalid",
}

func (s Side) String() string {
	val, ok := sidetostrs[s]
	if !ok {
		return strconv.Itoa(int(s))
	}
	return val
}

var strtoside = func() map[string]Side {
	m := make(map[string]Side)
	for t, str := range sidetostrs {
		m[str] = Side(t)
	}
	return m
}()

// FromString parse string into Side constant it's represent, return SideInvalid if not found.
func SideFromString(s string) Side {
	val, ok := strtoside[s]
	if !ok {
		return strtoside["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListSide() []Side {
	vs := make([]Side, 0, len(sidetostrs))
	for i := range sidetostrs {
		vs = append(vs, Side(i))
	}
	return vs
}
