// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.133

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type LeftRightBalance100 uint16

const (
	LeftRightBalance100Mask    LeftRightBalance100 = 0x3FFF // % contribution scaled by 100
	LeftRightBalance100Right   LeftRightBalance100 = 0x8000 // data corresponds to right if set, otherwise unknown
	LeftRightBalance100Invalid LeftRightBalance100 = 0xFFFF
)

func (l LeftRightBalance100) String() string {
	switch l {
	case LeftRightBalance100Mask:
		return "mask"
	case LeftRightBalance100Right:
		return "right"
	default:
		return "LeftRightBalance100Invalid(" + strconv.FormatUint(uint64(l), 10) + ")"
	}
}

// FromString parse string into LeftRightBalance100 constant it's represent, return LeftRightBalance100Invalid if not found.
func LeftRightBalance100FromString(s string) LeftRightBalance100 {
	switch s {
	case "mask":
		return LeftRightBalance100Mask
	case "right":
		return LeftRightBalance100Right
	default:
		return LeftRightBalance100Invalid
	}
}

// List returns all constants.
func ListLeftRightBalance100() []LeftRightBalance100 {
	return []LeftRightBalance100{
		LeftRightBalance100Mask,
		LeftRightBalance100Right,
	}
}
