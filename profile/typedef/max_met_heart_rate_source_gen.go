// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type MaxMetHeartRateSource byte

const (
	MaxMetHeartRateSourceWhr     MaxMetHeartRateSource = 0    // Wrist Heart Rate Monitor
	MaxMetHeartRateSourceHrm     MaxMetHeartRateSource = 1    // Chest Strap Heart Rate Monitor
	MaxMetHeartRateSourceInvalid MaxMetHeartRateSource = 0xFF // INVALID
)

var maxmetheartratesourcetostrs = map[MaxMetHeartRateSource]string{
	MaxMetHeartRateSourceWhr:     "whr",
	MaxMetHeartRateSourceHrm:     "hrm",
	MaxMetHeartRateSourceInvalid: "invalid",
}

func (m MaxMetHeartRateSource) String() string {
	val, ok := maxmetheartratesourcetostrs[m]
	if !ok {
		return strconv.Itoa(int(m))
	}
	return val
}

var strtomaxmetheartratesource = func() map[string]MaxMetHeartRateSource {
	m := make(map[string]MaxMetHeartRateSource)
	for t, str := range maxmetheartratesourcetostrs {
		m[str] = MaxMetHeartRateSource(t)
	}
	return m
}()

// FromString parse string into MaxMetHeartRateSource constant it's represent, return MaxMetHeartRateSourceInvalid if not found.
func MaxMetHeartRateSourceFromString(s string) MaxMetHeartRateSource {
	val, ok := strtomaxmetheartratesource[s]
	if !ok {
		return strtomaxmetheartratesource["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListMaxMetHeartRateSource() []MaxMetHeartRateSource {
	vs := make([]MaxMetHeartRateSource, 0, len(maxmetheartratesourcetostrs))
	for i := range maxmetheartratesourcetostrs {
		vs = append(vs, MaxMetHeartRateSource(i))
	}
	return vs
}
