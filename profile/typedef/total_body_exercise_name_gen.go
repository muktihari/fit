// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type TotalBodyExerciseName uint16

const (
	TotalBodyExerciseNameBurpee                           TotalBodyExerciseName = 0
	TotalBodyExerciseNameWeightedBurpee                   TotalBodyExerciseName = 1
	TotalBodyExerciseNameBurpeeBoxJump                    TotalBodyExerciseName = 2
	TotalBodyExerciseNameWeightedBurpeeBoxJump            TotalBodyExerciseName = 3
	TotalBodyExerciseNameHighPullBurpee                   TotalBodyExerciseName = 4
	TotalBodyExerciseNameManMakers                        TotalBodyExerciseName = 5
	TotalBodyExerciseNameOneArmBurpee                     TotalBodyExerciseName = 6
	TotalBodyExerciseNameSquatThrusts                     TotalBodyExerciseName = 7
	TotalBodyExerciseNameWeightedSquatThrusts             TotalBodyExerciseName = 8
	TotalBodyExerciseNameSquatPlankPushUp                 TotalBodyExerciseName = 9
	TotalBodyExerciseNameWeightedSquatPlankPushUp         TotalBodyExerciseName = 10
	TotalBodyExerciseNameStandingTRotationBalance         TotalBodyExerciseName = 11
	TotalBodyExerciseNameWeightedStandingTRotationBalance TotalBodyExerciseName = 12
	TotalBodyExerciseNameInvalid                          TotalBodyExerciseName = 0xFFFF // INVALID
)

var totalbodyexercisenametostrs = map[TotalBodyExerciseName]string{
	TotalBodyExerciseNameBurpee:                           "burpee",
	TotalBodyExerciseNameWeightedBurpee:                   "weighted_burpee",
	TotalBodyExerciseNameBurpeeBoxJump:                    "burpee_box_jump",
	TotalBodyExerciseNameWeightedBurpeeBoxJump:            "weighted_burpee_box_jump",
	TotalBodyExerciseNameHighPullBurpee:                   "high_pull_burpee",
	TotalBodyExerciseNameManMakers:                        "man_makers",
	TotalBodyExerciseNameOneArmBurpee:                     "one_arm_burpee",
	TotalBodyExerciseNameSquatThrusts:                     "squat_thrusts",
	TotalBodyExerciseNameWeightedSquatThrusts:             "weighted_squat_thrusts",
	TotalBodyExerciseNameSquatPlankPushUp:                 "squat_plank_push_up",
	TotalBodyExerciseNameWeightedSquatPlankPushUp:         "weighted_squat_plank_push_up",
	TotalBodyExerciseNameStandingTRotationBalance:         "standing_t_rotation_balance",
	TotalBodyExerciseNameWeightedStandingTRotationBalance: "weighted_standing_t_rotation_balance",
	TotalBodyExerciseNameInvalid:                          "invalid",
}

func (t TotalBodyExerciseName) String() string {
	val, ok := totalbodyexercisenametostrs[t]
	if !ok {
		return strconv.FormatUint(uint64(t), 10)
	}
	return val
}

var strtototalbodyexercisename = func() map[string]TotalBodyExerciseName {
	m := make(map[string]TotalBodyExerciseName)
	for t, str := range totalbodyexercisenametostrs {
		m[str] = TotalBodyExerciseName(t)
	}
	return m
}()

// FromString parse string into TotalBodyExerciseName constant it's represent, return TotalBodyExerciseNameInvalid if not found.
func TotalBodyExerciseNameFromString(s string) TotalBodyExerciseName {
	val, ok := strtototalbodyexercisename[s]
	if !ok {
		return strtototalbodyexercisename["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListTotalBodyExerciseName() []TotalBodyExerciseName {
	vs := make([]TotalBodyExerciseName, 0, len(totalbodyexercisenametostrs))
	for i := range totalbodyexercisenametostrs {
		vs = append(vs, TotalBodyExerciseName(i))
	}
	return vs
}
