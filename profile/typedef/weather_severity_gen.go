// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type WeatherSeverity byte

const (
	WeatherSeverityUnknown   WeatherSeverity = 0
	WeatherSeverityWarning   WeatherSeverity = 1
	WeatherSeverityWatch     WeatherSeverity = 2
	WeatherSeverityAdvisory  WeatherSeverity = 3
	WeatherSeverityStatement WeatherSeverity = 4
	WeatherSeverityInvalid   WeatherSeverity = 0xFF // INVALID
)

var weatherseveritytostrs = map[WeatherSeverity]string{
	WeatherSeverityUnknown:   "unknown",
	WeatherSeverityWarning:   "warning",
	WeatherSeverityWatch:     "watch",
	WeatherSeverityAdvisory:  "advisory",
	WeatherSeverityStatement: "statement",
	WeatherSeverityInvalid:   "invalid",
}

func (w WeatherSeverity) String() string {
	val, ok := weatherseveritytostrs[w]
	if !ok {
		return strconv.Itoa(int(w))
	}
	return val
}

var strtoweatherseverity = func() map[string]WeatherSeverity {
	m := make(map[string]WeatherSeverity)
	for t, str := range weatherseveritytostrs {
		m[str] = WeatherSeverity(t)
	}
	return m
}()

// FromString parse string into WeatherSeverity constant it's represent, return WeatherSeverityInvalid if not found.
func WeatherSeverityFromString(s string) WeatherSeverity {
	val, ok := strtoweatherseverity[s]
	if !ok {
		return strtoweatherseverity["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListWeatherSeverity() []WeatherSeverity {
	vs := make([]WeatherSeverity, 0, len(weatherseveritytostrs))
	for i := range weatherseveritytostrs {
		vs = append(vs, WeatherSeverity(i))
	}
	return vs
}
