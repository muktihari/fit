// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type Event byte

const (
	EventTimer                 Event = 0    // Group 0. Start / stop_all
	EventWorkout               Event = 3    // start / stop
	EventWorkoutStep           Event = 4    // Start at beginning of workout. Stop at end of each step.
	EventPowerDown             Event = 5    // stop_all group 0
	EventPowerUp               Event = 6    // stop_all group 0
	EventOffCourse             Event = 7    // start / stop group 0
	EventSession               Event = 8    // Stop at end of each session.
	EventLap                   Event = 9    // Stop at end of each lap.
	EventCoursePoint           Event = 10   // marker
	EventBattery               Event = 11   // marker
	EventVirtualPartnerPace    Event = 12   // Group 1. Start at beginning of activity if VP enabled, when VP pace is changed during activity or VP enabled mid activity. stop_disable when VP disabled.
	EventHrHighAlert           Event = 13   // Group 0. Start / stop when in alert condition.
	EventHrLowAlert            Event = 14   // Group 0. Start / stop when in alert condition.
	EventSpeedHighAlert        Event = 15   // Group 0. Start / stop when in alert condition.
	EventSpeedLowAlert         Event = 16   // Group 0. Start / stop when in alert condition.
	EventCadHighAlert          Event = 17   // Group 0. Start / stop when in alert condition.
	EventCadLowAlert           Event = 18   // Group 0. Start / stop when in alert condition.
	EventPowerHighAlert        Event = 19   // Group 0. Start / stop when in alert condition.
	EventPowerLowAlert         Event = 20   // Group 0. Start / stop when in alert condition.
	EventRecoveryHr            Event = 21   // marker
	EventBatteryLow            Event = 22   // marker
	EventTimeDurationAlert     Event = 23   // Group 1. Start if enabled mid activity (not required at start of activity). Stop when duration is reached. stop_disable if disabled.
	EventDistanceDurationAlert Event = 24   // Group 1. Start if enabled mid activity (not required at start of activity). Stop when duration is reached. stop_disable if disabled.
	EventCalorieDurationAlert  Event = 25   // Group 1. Start if enabled mid activity (not required at start of activity). Stop when duration is reached. stop_disable if disabled.
	EventActivity              Event = 26   // Group 1.. Stop at end of activity.
	EventFitnessEquipment      Event = 27   // marker
	EventLength                Event = 28   // Stop at end of each length.
	EventUserMarker            Event = 32   // marker
	EventSportPoint            Event = 33   // marker
	EventCalibration           Event = 36   // start/stop/marker
	EventFrontGearChange       Event = 42   // marker
	EventRearGearChange        Event = 43   // marker
	EventRiderPositionChange   Event = 44   // marker
	EventElevHighAlert         Event = 45   // Group 0. Start / stop when in alert condition.
	EventElevLowAlert          Event = 46   // Group 0. Start / stop when in alert condition.
	EventCommTimeout           Event = 47   // marker
	EventAutoActivityDetect    Event = 54   // marker
	EventDiveAlert             Event = 56   // marker
	EventDiveGasSwitched       Event = 57   // marker
	EventTankPressureReserve   Event = 71   // marker
	EventTankPressureCritical  Event = 72   // marker
	EventTankLost              Event = 73   // marker
	EventRadarThreatAlert      Event = 75   // start/stop/marker
	EventTankBatteryLow        Event = 76   // marker
	EventTankPodConnected      Event = 81   // marker - tank pod has connected
	EventTankPodDisconnected   Event = 82   // marker - tank pod has lost connection
	EventInvalid               Event = 0xFF // INVALID
)

var eventtostrs = map[Event]string{
	EventTimer:                 "timer",
	EventWorkout:               "workout",
	EventWorkoutStep:           "workout_step",
	EventPowerDown:             "power_down",
	EventPowerUp:               "power_up",
	EventOffCourse:             "off_course",
	EventSession:               "session",
	EventLap:                   "lap",
	EventCoursePoint:           "course_point",
	EventBattery:               "battery",
	EventVirtualPartnerPace:    "virtual_partner_pace",
	EventHrHighAlert:           "hr_high_alert",
	EventHrLowAlert:            "hr_low_alert",
	EventSpeedHighAlert:        "speed_high_alert",
	EventSpeedLowAlert:         "speed_low_alert",
	EventCadHighAlert:          "cad_high_alert",
	EventCadLowAlert:           "cad_low_alert",
	EventPowerHighAlert:        "power_high_alert",
	EventPowerLowAlert:         "power_low_alert",
	EventRecoveryHr:            "recovery_hr",
	EventBatteryLow:            "battery_low",
	EventTimeDurationAlert:     "time_duration_alert",
	EventDistanceDurationAlert: "distance_duration_alert",
	EventCalorieDurationAlert:  "calorie_duration_alert",
	EventActivity:              "activity",
	EventFitnessEquipment:      "fitness_equipment",
	EventLength:                "length",
	EventUserMarker:            "user_marker",
	EventSportPoint:            "sport_point",
	EventCalibration:           "calibration",
	EventFrontGearChange:       "front_gear_change",
	EventRearGearChange:        "rear_gear_change",
	EventRiderPositionChange:   "rider_position_change",
	EventElevHighAlert:         "elev_high_alert",
	EventElevLowAlert:          "elev_low_alert",
	EventCommTimeout:           "comm_timeout",
	EventAutoActivityDetect:    "auto_activity_detect",
	EventDiveAlert:             "dive_alert",
	EventDiveGasSwitched:       "dive_gas_switched",
	EventTankPressureReserve:   "tank_pressure_reserve",
	EventTankPressureCritical:  "tank_pressure_critical",
	EventTankLost:              "tank_lost",
	EventRadarThreatAlert:      "radar_threat_alert",
	EventTankBatteryLow:        "tank_battery_low",
	EventTankPodConnected:      "tank_pod_connected",
	EventTankPodDisconnected:   "tank_pod_disconnected",
	EventInvalid:               "invalid",
}

func (e Event) String() string {
	val, ok := eventtostrs[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return val
}

var strtoevent = func() map[string]Event {
	m := make(map[string]Event)
	for t, str := range eventtostrs {
		m[str] = Event(t)
	}
	return m
}()

// FromString parse string into Event constant it's represent, return EventInvalid if not found.
func EventFromString(s string) Event {
	val, ok := strtoevent[s]
	if !ok {
		return strtoevent["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListEvent() []Event {
	vs := make([]Event, 0, len(eventtostrs))
	for i := range eventtostrs {
		vs = append(vs, Event(i))
	}
	return vs
}
