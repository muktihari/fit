// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type Schedule byte

const (
	ScheduleWorkout Schedule = 0
	ScheduleCourse  Schedule = 1
	ScheduleInvalid Schedule = 0xFF // INVALID
)

var scheduletostrs = map[Schedule]string{
	ScheduleWorkout: "workout",
	ScheduleCourse:  "course",
	ScheduleInvalid: "invalid",
}

func (s Schedule) String() string {
	val, ok := scheduletostrs[s]
	if !ok {
		return strconv.Itoa(int(s))
	}
	return val
}

var strtoschedule = func() map[string]Schedule {
	m := make(map[string]Schedule)
	for t, str := range scheduletostrs {
		m[str] = Schedule(t)
	}
	return m
}()

// FromString parse string into Schedule constant it's represent, return ScheduleInvalid if not found.
func ScheduleFromString(s string) Schedule {
	val, ok := strtoschedule[s]
	if !ok {
		return strtoschedule["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListSchedule() []Schedule {
	vs := make([]Schedule, 0, len(scheduletostrs))
	for i := range scheduletostrs {
		vs = append(vs, Schedule(i))
	}
	return vs
}
