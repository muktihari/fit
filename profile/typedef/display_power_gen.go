// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type DisplayPower byte

const (
	DisplayPowerWatts      DisplayPower = 0
	DisplayPowerPercentFtp DisplayPower = 1
	DisplayPowerInvalid    DisplayPower = 0xFF // INVALID
)

var displaypowertostrs = map[DisplayPower]string{
	DisplayPowerWatts:      "watts",
	DisplayPowerPercentFtp: "percent_ftp",
	DisplayPowerInvalid:    "invalid",
}

func (d DisplayPower) String() string {
	val, ok := displaypowertostrs[d]
	if !ok {
		return strconv.Itoa(int(d))
	}
	return val
}

var strtodisplaypower = func() map[string]DisplayPower {
	m := make(map[string]DisplayPower)
	for t, str := range displaypowertostrs {
		m[str] = DisplayPower(t)
	}
	return m
}()

// FromString parse string into DisplayPower constant it's represent, return DisplayPowerInvalid if not found.
func DisplayPowerFromString(s string) DisplayPower {
	val, ok := strtodisplaypower[s]
	if !ok {
		return strtodisplaypower["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListDisplayPower() []DisplayPower {
	vs := make([]DisplayPower, 0, len(displaypowertostrs))
	for i := range displaypowertostrs {
		vs = append(vs, DisplayPower(i))
	}
	return vs
}
