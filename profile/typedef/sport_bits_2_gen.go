// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type SportBits2 uint8

const (
	SportBits2Mountaineering SportBits2 = 0x01
	SportBits2Hiking         SportBits2 = 0x02
	SportBits2Multisport     SportBits2 = 0x04
	SportBits2Paddling       SportBits2 = 0x08
	SportBits2Flying         SportBits2 = 0x10
	SportBits2EBiking        SportBits2 = 0x20
	SportBits2Motorcycling   SportBits2 = 0x40
	SportBits2Boating        SportBits2 = 0x80
	SportBits2Invalid        SportBits2 = 0x0 // INVALID
)

var sportbits2tostrs = map[SportBits2]string{
	SportBits2Mountaineering: "mountaineering",
	SportBits2Hiking:         "hiking",
	SportBits2Multisport:     "multisport",
	SportBits2Paddling:       "paddling",
	SportBits2Flying:         "flying",
	SportBits2EBiking:        "e_biking",
	SportBits2Motorcycling:   "motorcycling",
	SportBits2Boating:        "boating",
	SportBits2Invalid:        "invalid",
}

func (s SportBits2) String() string {
	val, ok := sportbits2tostrs[s]
	if !ok {
		return strconv.FormatUint(uint64(s), 10)
	}
	return val
}

var strtosportbits2 = func() map[string]SportBits2 {
	m := make(map[string]SportBits2)
	for t, str := range sportbits2tostrs {
		m[str] = SportBits2(t)
	}
	return m
}()

// FromString parse string into SportBits2 constant it's represent, return SportBits2Invalid if not found.
func SportBits2FromString(s string) SportBits2 {
	val, ok := strtosportbits2[s]
	if !ok {
		return strtosportbits2["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListSportBits2() []SportBits2 {
	vs := make([]SportBits2, 0, len(sportbits2tostrs))
	for i := range sportbits2tostrs {
		vs = append(vs, SportBits2(i))
	}
	return vs
}
