// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type FitBaseUnit uint16

const (
	FitBaseUnitOther    FitBaseUnit = 0
	FitBaseUnitKilogram FitBaseUnit = 1
	FitBaseUnitPound    FitBaseUnit = 2
	FitBaseUnitInvalid  FitBaseUnit = 0xFFFF // INVALID
)

var fitbaseunittostrs = map[FitBaseUnit]string{
	FitBaseUnitOther:    "other",
	FitBaseUnitKilogram: "kilogram",
	FitBaseUnitPound:    "pound",
	FitBaseUnitInvalid:  "invalid",
}

func (f FitBaseUnit) String() string {
	val, ok := fitbaseunittostrs[f]
	if !ok {
		return strconv.FormatUint(uint64(f), 10)
	}
	return val
}

var strtofitbaseunit = func() map[string]FitBaseUnit {
	m := make(map[string]FitBaseUnit)
	for t, str := range fitbaseunittostrs {
		m[str] = FitBaseUnit(t)
	}
	return m
}()

// FromString parse string into FitBaseUnit constant it's represent, return FitBaseUnitInvalid if not found.
func FitBaseUnitFromString(s string) FitBaseUnit {
	val, ok := strtofitbaseunit[s]
	if !ok {
		return strtofitbaseunit["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListFitBaseUnit() []FitBaseUnit {
	vs := make([]FitBaseUnit, 0, len(fitbaseunittostrs))
	for i := range fitbaseunittostrs {
		vs = append(vs, FitBaseUnit(i))
	}
	return vs
}
