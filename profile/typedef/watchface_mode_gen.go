// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type WatchfaceMode byte

const (
	WatchfaceModeDigital   WatchfaceMode = 0
	WatchfaceModeAnalog    WatchfaceMode = 1
	WatchfaceModeConnectIq WatchfaceMode = 2
	WatchfaceModeDisabled  WatchfaceMode = 3
	WatchfaceModeInvalid   WatchfaceMode = 0xFF // INVALID
)

var watchfacemodetostrs = map[WatchfaceMode]string{
	WatchfaceModeDigital:   "digital",
	WatchfaceModeAnalog:    "analog",
	WatchfaceModeConnectIq: "connect_iq",
	WatchfaceModeDisabled:  "disabled",
	WatchfaceModeInvalid:   "invalid",
}

func (w WatchfaceMode) String() string {
	val, ok := watchfacemodetostrs[w]
	if !ok {
		return strconv.Itoa(int(w))
	}
	return val
}

var strtowatchfacemode = func() map[string]WatchfaceMode {
	m := make(map[string]WatchfaceMode)
	for t, str := range watchfacemodetostrs {
		m[str] = WatchfaceMode(t)
	}
	return m
}()

// FromString parse string into WatchfaceMode constant it's represent, return WatchfaceModeInvalid if not found.
func WatchfaceModeFromString(s string) WatchfaceMode {
	val, ok := strtowatchfacemode[s]
	if !ok {
		return strtowatchfacemode["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListWatchfaceMode() []WatchfaceMode {
	vs := make([]WatchfaceMode, 0, len(watchfacemodetostrs))
	for i := range watchfacemodetostrs {
		vs = append(vs, WatchfaceMode(i))
	}
	return vs
}
