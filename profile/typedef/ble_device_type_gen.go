// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type BleDeviceType uint8

const (
	BleDeviceTypeConnectedGps     BleDeviceType = 0 // GPS that is provided over a proprietary bluetooth service
	BleDeviceTypeHeartRate        BleDeviceType = 1
	BleDeviceTypeBikePower        BleDeviceType = 2
	BleDeviceTypeBikeSpeedCadence BleDeviceType = 3
	BleDeviceTypeBikeSpeed        BleDeviceType = 4
	BleDeviceTypeBikeCadence      BleDeviceType = 5
	BleDeviceTypeFootpod          BleDeviceType = 6
	BleDeviceTypeBikeTrainer      BleDeviceType = 7    // Indoor-Bike FTMS protocol
	BleDeviceTypeInvalid          BleDeviceType = 0xFF // INVALID
)

var bledevicetypetostrs = map[BleDeviceType]string{
	BleDeviceTypeConnectedGps:     "connected_gps",
	BleDeviceTypeHeartRate:        "heart_rate",
	BleDeviceTypeBikePower:        "bike_power",
	BleDeviceTypeBikeSpeedCadence: "bike_speed_cadence",
	BleDeviceTypeBikeSpeed:        "bike_speed",
	BleDeviceTypeBikeCadence:      "bike_cadence",
	BleDeviceTypeFootpod:          "footpod",
	BleDeviceTypeBikeTrainer:      "bike_trainer",
	BleDeviceTypeInvalid:          "invalid",
}

func (b BleDeviceType) String() string {
	val, ok := bledevicetypetostrs[b]
	if !ok {
		return strconv.FormatUint(uint64(b), 10)
	}
	return val
}

var strtobledevicetype = func() map[string]BleDeviceType {
	m := make(map[string]BleDeviceType)
	for t, str := range bledevicetypetostrs {
		m[str] = BleDeviceType(t)
	}
	return m
}()

// FromString parse string into BleDeviceType constant it's represent, return BleDeviceTypeInvalid if not found.
func BleDeviceTypeFromString(s string) BleDeviceType {
	val, ok := strtobledevicetype[s]
	if !ok {
		return strtobledevicetype["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListBleDeviceType() []BleDeviceType {
	vs := make([]BleDeviceType, 0, len(bledevicetypetostrs))
	for i := range bledevicetypetostrs {
		vs = append(vs, BleDeviceType(i))
	}
	return vs
}
