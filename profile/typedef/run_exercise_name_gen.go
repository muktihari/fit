// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type RunExerciseName uint16

const (
	RunExerciseNameRun     RunExerciseName = 0
	RunExerciseNameWalk    RunExerciseName = 1
	RunExerciseNameJog     RunExerciseName = 2
	RunExerciseNameSprint  RunExerciseName = 3
	RunExerciseNameInvalid RunExerciseName = 0xFFFF // INVALID
)

var runexercisenametostrs = map[RunExerciseName]string{
	RunExerciseNameRun:     "run",
	RunExerciseNameWalk:    "walk",
	RunExerciseNameJog:     "jog",
	RunExerciseNameSprint:  "sprint",
	RunExerciseNameInvalid: "invalid",
}

func (r RunExerciseName) String() string {
	val, ok := runexercisenametostrs[r]
	if !ok {
		return strconv.FormatUint(uint64(r), 10)
	}
	return val
}

var strtorunexercisename = func() map[string]RunExerciseName {
	m := make(map[string]RunExerciseName)
	for t, str := range runexercisenametostrs {
		m[str] = RunExerciseName(t)
	}
	return m
}()

// FromString parse string into RunExerciseName constant it's represent, return RunExerciseNameInvalid if not found.
func RunExerciseNameFromString(s string) RunExerciseName {
	val, ok := strtorunexercisename[s]
	if !ok {
		return strtorunexercisename["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListRunExerciseName() []RunExerciseName {
	vs := make([]RunExerciseName, 0, len(runexercisenametostrs))
	for i := range runexercisenametostrs {
		vs = append(vs, RunExerciseName(i))
	}
	return vs
}
