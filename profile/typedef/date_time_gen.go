// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type DateTime uint32

const (
	DateTimeMin     DateTime = 0x10000000 // if date_time is < 0x10000000 then it is system time (seconds from device power on)
	DateTimeInvalid DateTime = 0xFFFFFFFF // INVALID
)

var datetimetostrs = map[DateTime]string{
	DateTimeMin:     "min",
	DateTimeInvalid: "invalid",
}

func (d DateTime) String() string {
	val, ok := datetimetostrs[d]
	if !ok {
		return strconv.FormatUint(uint64(d), 10)
	}
	return val
}

var strtodatetime = func() map[string]DateTime {
	m := make(map[string]DateTime)
	for t, str := range datetimetostrs {
		m[str] = DateTime(t)
	}
	return m
}()

// FromString parse string into DateTime constant it's represent, return DateTimeInvalid if not found.
func DateTimeFromString(s string) DateTime {
	val, ok := strtodatetime[s]
	if !ok {
		return strtodatetime["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListDateTime() []DateTime {
	vs := make([]DateTime, 0, len(datetimetostrs))
	for i := range datetimetostrs {
		vs = append(vs, DateTime(i))
	}
	return vs
}
