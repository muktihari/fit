// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type LocalDateTime uint32

const (
	LocalDateTimeMin     LocalDateTime = 0x10000000 // if date_time is < 0x10000000 then it is system time (seconds from device power on)
	LocalDateTimeInvalid LocalDateTime = 0xFFFFFFFF // INVALID
)

var localdatetimetostrs = map[LocalDateTime]string{
	LocalDateTimeMin:     "min",
	LocalDateTimeInvalid: "invalid",
}

func (l LocalDateTime) String() string {
	val, ok := localdatetimetostrs[l]
	if !ok {
		return strconv.FormatUint(uint64(l), 10)
	}
	return val
}

var strtolocaldatetime = func() map[string]LocalDateTime {
	m := make(map[string]LocalDateTime)
	for t, str := range localdatetimetostrs {
		m[str] = LocalDateTime(t)
	}
	return m
}()

// FromString parse string into LocalDateTime constant it's represent, return LocalDateTimeInvalid if not found.
func LocalDateTimeFromString(s string) LocalDateTime {
	val, ok := strtolocaldatetime[s]
	if !ok {
		return strtolocaldatetime["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListLocalDateTime() []LocalDateTime {
	vs := make([]LocalDateTime, 0, len(localdatetimetostrs))
	for i := range localdatetimetostrs {
		vs = append(vs, LocalDateTime(i))
	}
	return vs
}
