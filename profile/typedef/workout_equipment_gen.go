// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type WorkoutEquipment byte

const (
	WorkoutEquipmentNone          WorkoutEquipment = 0
	WorkoutEquipmentSwimFins      WorkoutEquipment = 1
	WorkoutEquipmentSwimKickboard WorkoutEquipment = 2
	WorkoutEquipmentSwimPaddles   WorkoutEquipment = 3
	WorkoutEquipmentSwimPullBuoy  WorkoutEquipment = 4
	WorkoutEquipmentSwimSnorkel   WorkoutEquipment = 5
	WorkoutEquipmentInvalid       WorkoutEquipment = 0xFF // INVALID
)

var workoutequipmenttostrs = map[WorkoutEquipment]string{
	WorkoutEquipmentNone:          "none",
	WorkoutEquipmentSwimFins:      "swim_fins",
	WorkoutEquipmentSwimKickboard: "swim_kickboard",
	WorkoutEquipmentSwimPaddles:   "swim_paddles",
	WorkoutEquipmentSwimPullBuoy:  "swim_pull_buoy",
	WorkoutEquipmentSwimSnorkel:   "swim_snorkel",
	WorkoutEquipmentInvalid:       "invalid",
}

func (w WorkoutEquipment) String() string {
	val, ok := workoutequipmenttostrs[w]
	if !ok {
		return strconv.Itoa(int(w))
	}
	return val
}

var strtoworkoutequipment = func() map[string]WorkoutEquipment {
	m := make(map[string]WorkoutEquipment)
	for t, str := range workoutequipmenttostrs {
		m[str] = WorkoutEquipment(t)
	}
	return m
}()

// FromString parse string into WorkoutEquipment constant it's represent, return WorkoutEquipmentInvalid if not found.
func WorkoutEquipmentFromString(s string) WorkoutEquipment {
	val, ok := strtoworkoutequipment[s]
	if !ok {
		return strtoworkoutequipment["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListWorkoutEquipment() []WorkoutEquipment {
	vs := make([]WorkoutEquipment, 0, len(workoutequipmenttostrs))
	for i := range workoutequipmenttostrs {
		vs = append(vs, WorkoutEquipment(i))
	}
	return vs
}
