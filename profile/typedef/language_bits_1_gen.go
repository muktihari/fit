// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type LanguageBits1 uint8

const (
	LanguageBits1Dutch      LanguageBits1 = 0x01
	LanguageBits1Finnish    LanguageBits1 = 0x02
	LanguageBits1Greek      LanguageBits1 = 0x04
	LanguageBits1Hungarian  LanguageBits1 = 0x08
	LanguageBits1Norwegian  LanguageBits1 = 0x10
	LanguageBits1Polish     LanguageBits1 = 0x20
	LanguageBits1Portuguese LanguageBits1 = 0x40
	LanguageBits1Slovakian  LanguageBits1 = 0x80
	LanguageBits1Invalid    LanguageBits1 = 0x0 // INVALID
)

var languagebits1tostrs = map[LanguageBits1]string{
	LanguageBits1Dutch:      "dutch",
	LanguageBits1Finnish:    "finnish",
	LanguageBits1Greek:      "greek",
	LanguageBits1Hungarian:  "hungarian",
	LanguageBits1Norwegian:  "norwegian",
	LanguageBits1Polish:     "polish",
	LanguageBits1Portuguese: "portuguese",
	LanguageBits1Slovakian:  "slovakian",
	LanguageBits1Invalid:    "invalid",
}

func (l LanguageBits1) String() string {
	val, ok := languagebits1tostrs[l]
	if !ok {
		return strconv.FormatUint(uint64(l), 10)
	}
	return val
}

var strtolanguagebits1 = func() map[string]LanguageBits1 {
	m := make(map[string]LanguageBits1)
	for t, str := range languagebits1tostrs {
		m[str] = LanguageBits1(t)
	}
	return m
}()

// FromString parse string into LanguageBits1 constant it's represent, return LanguageBits1Invalid if not found.
func LanguageBits1FromString(s string) LanguageBits1 {
	val, ok := strtolanguagebits1[s]
	if !ok {
		return strtolanguagebits1["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListLanguageBits1() []LanguageBits1 {
	vs := make([]LanguageBits1, 0, len(languagebits1tostrs))
	for i := range languagebits1tostrs {
		vs = append(vs, LanguageBits1(i))
	}
	return vs
}
