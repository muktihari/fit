// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type CameraEventType byte

const (
	CameraEventTypeVideoStart                  CameraEventType = 0 // Start of video recording
	CameraEventTypeVideoSplit                  CameraEventType = 1 // Mark of video file split (end of one file, beginning of the other)
	CameraEventTypeVideoEnd                    CameraEventType = 2 // End of video recording
	CameraEventTypePhotoTaken                  CameraEventType = 3 // Still photo taken
	CameraEventTypeVideoSecondStreamStart      CameraEventType = 4
	CameraEventTypeVideoSecondStreamSplit      CameraEventType = 5
	CameraEventTypeVideoSecondStreamEnd        CameraEventType = 6
	CameraEventTypeVideoSplitStart             CameraEventType = 7 // Mark of video file split start
	CameraEventTypeVideoSecondStreamSplitStart CameraEventType = 8
	CameraEventTypeVideoPause                  CameraEventType = 11 // Mark when a video recording has been paused
	CameraEventTypeVideoSecondStreamPause      CameraEventType = 12
	CameraEventTypeVideoResume                 CameraEventType = 13 // Mark when a video recording has been resumed
	CameraEventTypeVideoSecondStreamResume     CameraEventType = 14
	CameraEventTypeInvalid                     CameraEventType = 0xFF // INVALID
)

var cameraeventtypetostrs = map[CameraEventType]string{
	CameraEventTypeVideoStart:                  "video_start",
	CameraEventTypeVideoSplit:                  "video_split",
	CameraEventTypeVideoEnd:                    "video_end",
	CameraEventTypePhotoTaken:                  "photo_taken",
	CameraEventTypeVideoSecondStreamStart:      "video_second_stream_start",
	CameraEventTypeVideoSecondStreamSplit:      "video_second_stream_split",
	CameraEventTypeVideoSecondStreamEnd:        "video_second_stream_end",
	CameraEventTypeVideoSplitStart:             "video_split_start",
	CameraEventTypeVideoSecondStreamSplitStart: "video_second_stream_split_start",
	CameraEventTypeVideoPause:                  "video_pause",
	CameraEventTypeVideoSecondStreamPause:      "video_second_stream_pause",
	CameraEventTypeVideoResume:                 "video_resume",
	CameraEventTypeVideoSecondStreamResume:     "video_second_stream_resume",
	CameraEventTypeInvalid:                     "invalid",
}

func (c CameraEventType) String() string {
	val, ok := cameraeventtypetostrs[c]
	if !ok {
		return strconv.Itoa(int(c))
	}
	return val
}

var strtocameraeventtype = func() map[string]CameraEventType {
	m := make(map[string]CameraEventType)
	for t, str := range cameraeventtypetostrs {
		m[str] = CameraEventType(t)
	}
	return m
}()

// FromString parse string into CameraEventType constant it's represent, return CameraEventTypeInvalid if not found.
func CameraEventTypeFromString(s string) CameraEventType {
	val, ok := strtocameraeventtype[s]
	if !ok {
		return strtocameraeventtype["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListCameraEventType() []CameraEventType {
	vs := make([]CameraEventType, 0, len(cameraeventtypetostrs))
	for i := range cameraeventtypetostrs {
		vs = append(vs, CameraEventType(i))
	}
	return vs
}
