// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type CameraEventType byte

const (
	CameraEventTypeVideoStart                  CameraEventType = 0 // Start of video recording
	CameraEventTypeVideoSplit                  CameraEventType = 1 // Mark of video file split (end of one file, beginning of the other)
	CameraEventTypeVideoEnd                    CameraEventType = 2 // End of video recording
	CameraEventTypePhotoTaken                  CameraEventType = 3 // Still photo taken
	CameraEventTypeVideoSecondStreamStart      CameraEventType = 4
	CameraEventTypeVideoSecondStreamSplit      CameraEventType = 5
	CameraEventTypeVideoSecondStreamEnd        CameraEventType = 6
	CameraEventTypeVideoSplitStart             CameraEventType = 7 // Mark of video file split start
	CameraEventTypeVideoSecondStreamSplitStart CameraEventType = 8
	CameraEventTypeVideoPause                  CameraEventType = 11 // Mark when a video recording has been paused
	CameraEventTypeVideoSecondStreamPause      CameraEventType = 12
	CameraEventTypeVideoResume                 CameraEventType = 13 // Mark when a video recording has been resumed
	CameraEventTypeVideoSecondStreamResume     CameraEventType = 14
	CameraEventTypeInvalid                     CameraEventType = 0xFF
)

func (c CameraEventType) Byte() byte { return byte(c) }

func (c CameraEventType) String() string {
	switch c {
	case CameraEventTypeVideoStart:
		return "video_start"
	case CameraEventTypeVideoSplit:
		return "video_split"
	case CameraEventTypeVideoEnd:
		return "video_end"
	case CameraEventTypePhotoTaken:
		return "photo_taken"
	case CameraEventTypeVideoSecondStreamStart:
		return "video_second_stream_start"
	case CameraEventTypeVideoSecondStreamSplit:
		return "video_second_stream_split"
	case CameraEventTypeVideoSecondStreamEnd:
		return "video_second_stream_end"
	case CameraEventTypeVideoSplitStart:
		return "video_split_start"
	case CameraEventTypeVideoSecondStreamSplitStart:
		return "video_second_stream_split_start"
	case CameraEventTypeVideoPause:
		return "video_pause"
	case CameraEventTypeVideoSecondStreamPause:
		return "video_second_stream_pause"
	case CameraEventTypeVideoResume:
		return "video_resume"
	case CameraEventTypeVideoSecondStreamResume:
		return "video_second_stream_resume"
	default:
		return "CameraEventTypeInvalid(" + strconv.Itoa(int(c)) + ")"
	}
}

// FromString parse string into CameraEventType constant it's represent, return CameraEventTypeInvalid if not found.
func CameraEventTypeFromString(s string) CameraEventType {
	switch s {
	case "video_start":
		return CameraEventTypeVideoStart
	case "video_split":
		return CameraEventTypeVideoSplit
	case "video_end":
		return CameraEventTypeVideoEnd
	case "photo_taken":
		return CameraEventTypePhotoTaken
	case "video_second_stream_start":
		return CameraEventTypeVideoSecondStreamStart
	case "video_second_stream_split":
		return CameraEventTypeVideoSecondStreamSplit
	case "video_second_stream_end":
		return CameraEventTypeVideoSecondStreamEnd
	case "video_split_start":
		return CameraEventTypeVideoSplitStart
	case "video_second_stream_split_start":
		return CameraEventTypeVideoSecondStreamSplitStart
	case "video_pause":
		return CameraEventTypeVideoPause
	case "video_second_stream_pause":
		return CameraEventTypeVideoSecondStreamPause
	case "video_resume":
		return CameraEventTypeVideoResume
	case "video_second_stream_resume":
		return CameraEventTypeVideoSecondStreamResume
	default:
		return CameraEventTypeInvalid
	}
}

// List returns all constants.
func ListCameraEventType() []CameraEventType {
	return []CameraEventType{
		CameraEventTypeVideoStart,
		CameraEventTypeVideoSplit,
		CameraEventTypeVideoEnd,
		CameraEventTypePhotoTaken,
		CameraEventTypeVideoSecondStreamStart,
		CameraEventTypeVideoSecondStreamSplit,
		CameraEventTypeVideoSecondStreamEnd,
		CameraEventTypeVideoSplitStart,
		CameraEventTypeVideoSecondStreamSplitStart,
		CameraEventTypeVideoPause,
		CameraEventTypeVideoSecondStreamPause,
		CameraEventTypeVideoResume,
		CameraEventTypeVideoSecondStreamResume,
	}
}
