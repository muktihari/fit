// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type DiveBacklightMode byte

const (
	DiveBacklightModeAtDepth  DiveBacklightMode = 0
	DiveBacklightModeAlwaysOn DiveBacklightMode = 1
	DiveBacklightModeInvalid  DiveBacklightMode = 0xFF // INVALID
)

var divebacklightmodetostrs = map[DiveBacklightMode]string{
	DiveBacklightModeAtDepth:  "at_depth",
	DiveBacklightModeAlwaysOn: "always_on",
	DiveBacklightModeInvalid:  "invalid",
}

func (d DiveBacklightMode) String() string {
	val, ok := divebacklightmodetostrs[d]
	if !ok {
		return strconv.Itoa(int(d))
	}
	return val
}

var strtodivebacklightmode = func() map[string]DiveBacklightMode {
	m := make(map[string]DiveBacklightMode)
	for t, str := range divebacklightmodetostrs {
		m[str] = DiveBacklightMode(t)
	}
	return m
}()

// FromString parse string into DiveBacklightMode constant it's represent, return DiveBacklightModeInvalid if not found.
func DiveBacklightModeFromString(s string) DiveBacklightMode {
	val, ok := strtodivebacklightmode[s]
	if !ok {
		return strtodivebacklightmode["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListDiveBacklightMode() []DiveBacklightMode {
	vs := make([]DiveBacklightMode, 0, len(divebacklightmodetostrs))
	for i := range divebacklightmodetostrs {
		vs = append(vs, DiveBacklightMode(i))
	}
	return vs
}
