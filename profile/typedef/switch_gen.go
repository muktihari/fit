// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type Switch byte

const (
	SwitchOff     Switch = 0
	SwitchOn      Switch = 1
	SwitchAuto    Switch = 2
	SwitchInvalid Switch = 0xFF // INVALID
)

var switchtostrs = map[Switch]string{
	SwitchOff:     "off",
	SwitchOn:      "on",
	SwitchAuto:    "auto",
	SwitchInvalid: "invalid",
}

func (s Switch) String() string {
	val, ok := switchtostrs[s]
	if !ok {
		return strconv.Itoa(int(s))
	}
	return val
}

var strtoswitch = func() map[string]Switch {
	m := make(map[string]Switch)
	for t, str := range switchtostrs {
		m[str] = Switch(t)
	}
	return m
}()

// FromString parse string into Switch constant it's represent, return SwitchInvalid if not found.
func SwitchFromString(s string) Switch {
	val, ok := strtoswitch[s]
	if !ok {
		return strtoswitch["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListSwitch() []Switch {
	vs := make([]Switch, 0, len(switchtostrs))
	for i := range switchtostrs {
		vs = append(vs, Switch(i))
	}
	return vs
}
