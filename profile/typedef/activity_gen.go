// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type Activity byte

const (
	ActivityManual         Activity = 0
	ActivityAutoMultiSport Activity = 1
	ActivityInvalid        Activity = 0xFF // INVALID
)

var activitytostrs = map[Activity]string{
	ActivityManual:         "manual",
	ActivityAutoMultiSport: "auto_multi_sport",
	ActivityInvalid:        "invalid",
}

func (a Activity) String() string {
	val, ok := activitytostrs[a]
	if !ok {
		return strconv.Itoa(int(a))
	}
	return val
}

var strtoactivity = func() map[string]Activity {
	m := make(map[string]Activity)
	for t, str := range activitytostrs {
		m[str] = Activity(t)
	}
	return m
}()

// FromString parse string into Activity constant it's represent, return ActivityInvalid if not found.
func ActivityFromString(s string) Activity {
	val, ok := strtoactivity[s]
	if !ok {
		return strtoactivity["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListActivity() []Activity {
	vs := make([]Activity, 0, len(activitytostrs))
	for i := range activitytostrs {
		vs = append(vs, Activity(i))
	}
	return vs
}
