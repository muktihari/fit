// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type Goal byte

const (
	GoalTime          Goal = 0
	GoalDistance      Goal = 1
	GoalCalories      Goal = 2
	GoalFrequency     Goal = 3
	GoalSteps         Goal = 4
	GoalAscent        Goal = 5
	GoalActiveMinutes Goal = 6
	GoalInvalid       Goal = 0xFF // INVALID
)

var goaltostrs = map[Goal]string{
	GoalTime:          "time",
	GoalDistance:      "distance",
	GoalCalories:      "calories",
	GoalFrequency:     "frequency",
	GoalSteps:         "steps",
	GoalAscent:        "ascent",
	GoalActiveMinutes: "active_minutes",
	GoalInvalid:       "invalid",
}

func (g Goal) String() string {
	val, ok := goaltostrs[g]
	if !ok {
		return strconv.Itoa(int(g))
	}
	return val
}

var strtogoal = func() map[string]Goal {
	m := make(map[string]Goal)
	for t, str := range goaltostrs {
		m[str] = Goal(t)
	}
	return m
}()

// FromString parse string into Goal constant it's represent, return GoalInvalid if not found.
func GoalFromString(s string) Goal {
	val, ok := strtogoal[s]
	if !ok {
		return strtogoal["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListGoal() []Goal {
	vs := make([]Goal, 0, len(goaltostrs))
	for i := range goaltostrs {
		vs = append(vs, Goal(i))
	}
	return vs
}
