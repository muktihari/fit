// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type Language byte

const (
	LanguageEnglish             Language = 0
	LanguageFrench              Language = 1
	LanguageItalian             Language = 2
	LanguageGerman              Language = 3
	LanguageSpanish             Language = 4
	LanguageCroatian            Language = 5
	LanguageCzech               Language = 6
	LanguageDanish              Language = 7
	LanguageDutch               Language = 8
	LanguageFinnish             Language = 9
	LanguageGreek               Language = 10
	LanguageHungarian           Language = 11
	LanguageNorwegian           Language = 12
	LanguagePolish              Language = 13
	LanguagePortuguese          Language = 14
	LanguageSlovakian           Language = 15
	LanguageSlovenian           Language = 16
	LanguageSwedish             Language = 17
	LanguageRussian             Language = 18
	LanguageTurkish             Language = 19
	LanguageLatvian             Language = 20
	LanguageUkrainian           Language = 21
	LanguageArabic              Language = 22
	LanguageFarsi               Language = 23
	LanguageBulgarian           Language = 24
	LanguageRomanian            Language = 25
	LanguageChinese             Language = 26
	LanguageJapanese            Language = 27
	LanguageKorean              Language = 28
	LanguageTaiwanese           Language = 29
	LanguageThai                Language = 30
	LanguageHebrew              Language = 31
	LanguageBrazilianPortuguese Language = 32
	LanguageIndonesian          Language = 33
	LanguageMalaysian           Language = 34
	LanguageVietnamese          Language = 35
	LanguageBurmese             Language = 36
	LanguageMongolian           Language = 37
	LanguageCustom              Language = 254
	LanguageInvalid             Language = 0xFF // INVALID
)

var languagetostrs = map[Language]string{
	LanguageEnglish:             "english",
	LanguageFrench:              "french",
	LanguageItalian:             "italian",
	LanguageGerman:              "german",
	LanguageSpanish:             "spanish",
	LanguageCroatian:            "croatian",
	LanguageCzech:               "czech",
	LanguageDanish:              "danish",
	LanguageDutch:               "dutch",
	LanguageFinnish:             "finnish",
	LanguageGreek:               "greek",
	LanguageHungarian:           "hungarian",
	LanguageNorwegian:           "norwegian",
	LanguagePolish:              "polish",
	LanguagePortuguese:          "portuguese",
	LanguageSlovakian:           "slovakian",
	LanguageSlovenian:           "slovenian",
	LanguageSwedish:             "swedish",
	LanguageRussian:             "russian",
	LanguageTurkish:             "turkish",
	LanguageLatvian:             "latvian",
	LanguageUkrainian:           "ukrainian",
	LanguageArabic:              "arabic",
	LanguageFarsi:               "farsi",
	LanguageBulgarian:           "bulgarian",
	LanguageRomanian:            "romanian",
	LanguageChinese:             "chinese",
	LanguageJapanese:            "japanese",
	LanguageKorean:              "korean",
	LanguageTaiwanese:           "taiwanese",
	LanguageThai:                "thai",
	LanguageHebrew:              "hebrew",
	LanguageBrazilianPortuguese: "brazilian_portuguese",
	LanguageIndonesian:          "indonesian",
	LanguageMalaysian:           "malaysian",
	LanguageVietnamese:          "vietnamese",
	LanguageBurmese:             "burmese",
	LanguageMongolian:           "mongolian",
	LanguageCustom:              "custom",
	LanguageInvalid:             "invalid",
}

func (l Language) String() string {
	val, ok := languagetostrs[l]
	if !ok {
		return strconv.Itoa(int(l))
	}
	return val
}

var strtolanguage = func() map[string]Language {
	m := make(map[string]Language)
	for t, str := range languagetostrs {
		m[str] = Language(t)
	}
	return m
}()

// FromString parse string into Language constant it's represent, return LanguageInvalid if not found.
func LanguageFromString(s string) Language {
	val, ok := strtolanguage[s]
	if !ok {
		return strtolanguage["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListLanguage() []Language {
	vs := make([]Language, 0, len(languagetostrs))
	for i := range languagetostrs {
		vs = append(vs, Language(i))
	}
	return vs
}
