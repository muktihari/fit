// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type BpStatus byte

const (
	BpStatusNoError                 BpStatus = 0
	BpStatusErrorIncompleteData     BpStatus = 1
	BpStatusErrorNoMeasurement      BpStatus = 2
	BpStatusErrorDataOutOfRange     BpStatus = 3
	BpStatusErrorIrregularHeartRate BpStatus = 4
	BpStatusInvalid                 BpStatus = 0xFF // INVALID
)

var bpstatustostrs = map[BpStatus]string{
	BpStatusNoError:                 "no_error",
	BpStatusErrorIncompleteData:     "error_incomplete_data",
	BpStatusErrorNoMeasurement:      "error_no_measurement",
	BpStatusErrorDataOutOfRange:     "error_data_out_of_range",
	BpStatusErrorIrregularHeartRate: "error_irregular_heart_rate",
	BpStatusInvalid:                 "invalid",
}

func (b BpStatus) String() string {
	val, ok := bpstatustostrs[b]
	if !ok {
		return strconv.Itoa(int(b))
	}
	return val
}

var strtobpstatus = func() map[string]BpStatus {
	m := make(map[string]BpStatus)
	for t, str := range bpstatustostrs {
		m[str] = BpStatus(t)
	}
	return m
}()

// FromString parse string into BpStatus constant it's represent, return BpStatusInvalid if not found.
func BpStatusFromString(s string) BpStatus {
	val, ok := strtobpstatus[s]
	if !ok {
		return strtobpstatus["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListBpStatus() []BpStatus {
	vs := make([]BpStatus, 0, len(bpstatustostrs))
	for i := range bpstatustostrs {
		vs = append(vs, BpStatus(i))
	}
	return vs
}
