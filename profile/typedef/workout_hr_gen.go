// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type WorkoutHr uint32

const (
	WorkoutHrBpmOffset WorkoutHr = 100
	WorkoutHrInvalid   WorkoutHr = 0xFFFFFFFF // INVALID
)

var workouthrtostrs = map[WorkoutHr]string{
	WorkoutHrBpmOffset: "bpm_offset",
	WorkoutHrInvalid:   "invalid",
}

func (w WorkoutHr) String() string {
	val, ok := workouthrtostrs[w]
	if !ok {
		return strconv.FormatUint(uint64(w), 10)
	}
	return val
}

var strtoworkouthr = func() map[string]WorkoutHr {
	m := make(map[string]WorkoutHr)
	for t, str := range workouthrtostrs {
		m[str] = WorkoutHr(t)
	}
	return m
}()

// FromString parse string into WorkoutHr constant it's represent, return WorkoutHrInvalid if not found.
func WorkoutHrFromString(s string) WorkoutHr {
	val, ok := strtoworkouthr[s]
	if !ok {
		return strtoworkouthr["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListWorkoutHr() []WorkoutHr {
	vs := make([]WorkoutHr, 0, len(workouthrtostrs))
	for i := range workouthrtostrs {
		vs = append(vs, WorkoutHr(i))
	}
	return vs
}
