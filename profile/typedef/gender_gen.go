// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type Gender byte

const (
	GenderFemale  Gender = 0
	GenderMale    Gender = 1
	GenderInvalid Gender = 0xFF // INVALID
)

var gendertostrs = map[Gender]string{
	GenderFemale:  "female",
	GenderMale:    "male",
	GenderInvalid: "invalid",
}

func (g Gender) String() string {
	val, ok := gendertostrs[g]
	if !ok {
		return strconv.Itoa(int(g))
	}
	return val
}

var strtogender = func() map[string]Gender {
	m := make(map[string]Gender)
	for t, str := range gendertostrs {
		m[str] = Gender(t)
	}
	return m
}()

// FromString parse string into Gender constant it's represent, return GenderInvalid if not found.
func GenderFromString(s string) Gender {
	val, ok := strtogender[s]
	if !ok {
		return strtogender["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListGender() []Gender {
	vs := make([]Gender, 0, len(gendertostrs))
	for i := range gendertostrs {
		vs = append(vs, Gender(i))
	}
	return vs
}
