// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type DeadliftExerciseName uint16

const (
	DeadliftExerciseNameBarbellDeadlift                       DeadliftExerciseName = 0
	DeadliftExerciseNameBarbellStraightLegDeadlift            DeadliftExerciseName = 1
	DeadliftExerciseNameDumbbellDeadlift                      DeadliftExerciseName = 2
	DeadliftExerciseNameDumbbellSingleLegDeadliftToRow        DeadliftExerciseName = 3
	DeadliftExerciseNameDumbbellStraightLegDeadlift           DeadliftExerciseName = 4
	DeadliftExerciseNameKettlebellFloorToShelf                DeadliftExerciseName = 5
	DeadliftExerciseNameOneArmOneLegDeadlift                  DeadliftExerciseName = 6
	DeadliftExerciseNameRackPull                              DeadliftExerciseName = 7
	DeadliftExerciseNameRotationalDumbbellStraightLegDeadlift DeadliftExerciseName = 8
	DeadliftExerciseNameSingleArmDeadlift                     DeadliftExerciseName = 9
	DeadliftExerciseNameSingleLegBarbellDeadlift              DeadliftExerciseName = 10
	DeadliftExerciseNameSingleLegBarbellStraightLegDeadlift   DeadliftExerciseName = 11
	DeadliftExerciseNameSingleLegDeadliftWithBarbell          DeadliftExerciseName = 12
	DeadliftExerciseNameSingleLegRdlCircuit                   DeadliftExerciseName = 13
	DeadliftExerciseNameSingleLegRomanianDeadliftWithDumbbell DeadliftExerciseName = 14
	DeadliftExerciseNameSumoDeadlift                          DeadliftExerciseName = 15
	DeadliftExerciseNameSumoDeadliftHighPull                  DeadliftExerciseName = 16
	DeadliftExerciseNameTrapBarDeadlift                       DeadliftExerciseName = 17
	DeadliftExerciseNameWideGripBarbellDeadlift               DeadliftExerciseName = 18
	DeadliftExerciseNameInvalid                               DeadliftExerciseName = 0xFFFF // INVALID
)

var deadliftexercisenametostrs = map[DeadliftExerciseName]string{
	DeadliftExerciseNameBarbellDeadlift:                       "barbell_deadlift",
	DeadliftExerciseNameBarbellStraightLegDeadlift:            "barbell_straight_leg_deadlift",
	DeadliftExerciseNameDumbbellDeadlift:                      "dumbbell_deadlift",
	DeadliftExerciseNameDumbbellSingleLegDeadliftToRow:        "dumbbell_single_leg_deadlift_to_row",
	DeadliftExerciseNameDumbbellStraightLegDeadlift:           "dumbbell_straight_leg_deadlift",
	DeadliftExerciseNameKettlebellFloorToShelf:                "kettlebell_floor_to_shelf",
	DeadliftExerciseNameOneArmOneLegDeadlift:                  "one_arm_one_leg_deadlift",
	DeadliftExerciseNameRackPull:                              "rack_pull",
	DeadliftExerciseNameRotationalDumbbellStraightLegDeadlift: "rotational_dumbbell_straight_leg_deadlift",
	DeadliftExerciseNameSingleArmDeadlift:                     "single_arm_deadlift",
	DeadliftExerciseNameSingleLegBarbellDeadlift:              "single_leg_barbell_deadlift",
	DeadliftExerciseNameSingleLegBarbellStraightLegDeadlift:   "single_leg_barbell_straight_leg_deadlift",
	DeadliftExerciseNameSingleLegDeadliftWithBarbell:          "single_leg_deadlift_with_barbell",
	DeadliftExerciseNameSingleLegRdlCircuit:                   "single_leg_rdl_circuit",
	DeadliftExerciseNameSingleLegRomanianDeadliftWithDumbbell: "single_leg_romanian_deadlift_with_dumbbell",
	DeadliftExerciseNameSumoDeadlift:                          "sumo_deadlift",
	DeadliftExerciseNameSumoDeadliftHighPull:                  "sumo_deadlift_high_pull",
	DeadliftExerciseNameTrapBarDeadlift:                       "trap_bar_deadlift",
	DeadliftExerciseNameWideGripBarbellDeadlift:               "wide_grip_barbell_deadlift",
	DeadliftExerciseNameInvalid:                               "invalid",
}

func (d DeadliftExerciseName) String() string {
	val, ok := deadliftexercisenametostrs[d]
	if !ok {
		return strconv.FormatUint(uint64(d), 10)
	}
	return val
}

var strtodeadliftexercisename = func() map[string]DeadliftExerciseName {
	m := make(map[string]DeadliftExerciseName)
	for t, str := range deadliftexercisenametostrs {
		m[str] = DeadliftExerciseName(t)
	}
	return m
}()

// FromString parse string into DeadliftExerciseName constant it's represent, return DeadliftExerciseNameInvalid if not found.
func DeadliftExerciseNameFromString(s string) DeadliftExerciseName {
	val, ok := strtodeadliftexercisename[s]
	if !ok {
		return strtodeadliftexercisename["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListDeadliftExerciseName() []DeadliftExerciseName {
	vs := make([]DeadliftExerciseName, 0, len(deadliftexercisenametostrs))
	for i := range deadliftexercisenametostrs {
		vs = append(vs, DeadliftExerciseName(i))
	}
	return vs
}
