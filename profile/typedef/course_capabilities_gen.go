// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type CourseCapabilities uint32

const (
	CourseCapabilitiesProcessed  CourseCapabilities = 0x00000001
	CourseCapabilitiesValid      CourseCapabilities = 0x00000002
	CourseCapabilitiesTime       CourseCapabilities = 0x00000004
	CourseCapabilitiesDistance   CourseCapabilities = 0x00000008
	CourseCapabilitiesPosition   CourseCapabilities = 0x00000010
	CourseCapabilitiesHeartRate  CourseCapabilities = 0x00000020
	CourseCapabilitiesPower      CourseCapabilities = 0x00000040
	CourseCapabilitiesCadence    CourseCapabilities = 0x00000080
	CourseCapabilitiesTraining   CourseCapabilities = 0x00000100
	CourseCapabilitiesNavigation CourseCapabilities = 0x00000200
	CourseCapabilitiesBikeway    CourseCapabilities = 0x00000400
	CourseCapabilitiesAviation   CourseCapabilities = 0x00001000 // Denote course files to be used as flight plans
	CourseCapabilitiesInvalid    CourseCapabilities = 0x0        // INVALID
)

var coursecapabilitiestostrs = map[CourseCapabilities]string{
	CourseCapabilitiesProcessed:  "processed",
	CourseCapabilitiesValid:      "valid",
	CourseCapabilitiesTime:       "time",
	CourseCapabilitiesDistance:   "distance",
	CourseCapabilitiesPosition:   "position",
	CourseCapabilitiesHeartRate:  "heart_rate",
	CourseCapabilitiesPower:      "power",
	CourseCapabilitiesCadence:    "cadence",
	CourseCapabilitiesTraining:   "training",
	CourseCapabilitiesNavigation: "navigation",
	CourseCapabilitiesBikeway:    "bikeway",
	CourseCapabilitiesAviation:   "aviation",
	CourseCapabilitiesInvalid:    "invalid",
}

func (c CourseCapabilities) String() string {
	val, ok := coursecapabilitiestostrs[c]
	if !ok {
		return strconv.FormatUint(uint64(c), 10)
	}
	return val
}

var strtocoursecapabilities = func() map[string]CourseCapabilities {
	m := make(map[string]CourseCapabilities)
	for t, str := range coursecapabilitiestostrs {
		m[str] = CourseCapabilities(t)
	}
	return m
}()

// FromString parse string into CourseCapabilities constant it's represent, return CourseCapabilitiesInvalid if not found.
func CourseCapabilitiesFromString(s string) CourseCapabilities {
	val, ok := strtocoursecapabilities[s]
	if !ok {
		return strtocoursecapabilities["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListCourseCapabilities() []CourseCapabilities {
	vs := make([]CourseCapabilities, 0, len(coursecapabilitiestostrs))
	for i := range coursecapabilitiestostrs {
		vs = append(vs, CourseCapabilities(i))
	}
	return vs
}
