// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package typedef

import (
	"strconv"
)

type ActivityType byte

const (
	ActivityTypeGeneric          ActivityType = 0
	ActivityTypeRunning          ActivityType = 1
	ActivityTypeCycling          ActivityType = 2
	ActivityTypeTransition       ActivityType = 3 // Mulitsport transition
	ActivityTypeFitnessEquipment ActivityType = 4
	ActivityTypeSwimming         ActivityType = 5
	ActivityTypeWalking          ActivityType = 6
	ActivityTypeSedentary        ActivityType = 8
	ActivityTypeAll              ActivityType = 254  // All is for goals only to include all sports.
	ActivityTypeInvalid          ActivityType = 0xFF // INVALID
)

var activitytypetostrs = map[ActivityType]string{
	ActivityTypeGeneric:          "generic",
	ActivityTypeRunning:          "running",
	ActivityTypeCycling:          "cycling",
	ActivityTypeTransition:       "transition",
	ActivityTypeFitnessEquipment: "fitness_equipment",
	ActivityTypeSwimming:         "swimming",
	ActivityTypeWalking:          "walking",
	ActivityTypeSedentary:        "sedentary",
	ActivityTypeAll:              "all",
	ActivityTypeInvalid:          "invalid",
}

func (a ActivityType) String() string {
	val, ok := activitytypetostrs[a]
	if !ok {
		return strconv.Itoa(int(a))
	}
	return val
}

var strtoactivitytype = func() map[string]ActivityType {
	m := make(map[string]ActivityType)
	for t, str := range activitytypetostrs {
		m[str] = ActivityType(t)
	}
	return m
}()

// FromString parse string into ActivityType constant it's represent, return ActivityTypeInvalid if not found.
func ActivityTypeFromString(s string) ActivityType {
	val, ok := strtoactivitytype[s]
	if !ok {
		return strtoactivitytype["invalid"]
	}
	return val
}

// List returns all constants. The result might be unsorted (depend on stringer is in array or map), it's up to the caller to sort.
func ListActivityType() []ActivityType {
	vs := make([]ActivityType, 0, len(activitytypetostrs))
	for i := range activitytypetostrs {
		vs = append(vs, ActivityType(i))
	}
	return vs
}
