// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/kit/scaleoffset"
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Software is a Software message.
type Software struct {
	PartNumber   string
	MessageIndex typedef.MessageIndex
	Version      uint16 // Scale: 100

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSoftware creates new Software struct based on given mesg.
// If mesg is nil, it will return Software with all fields being set to its corresponding invalid value.
func NewSoftware(mesg *proto.Message) *Software {
	vals := [255]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &Software{
		PartNumber:   typeconv.ToString[string](vals[5]),
		MessageIndex: typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		Version:      typeconv.ToUint16[uint16](vals[3]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts Software into proto.Message. If options is nil, default options will be used.
func (m *Software) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := fac.CreateMesgOnly(typedef.MesgNumSoftware)

	if m.PartNumber != basetype.StringInvalid && m.PartNumber != "" {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.PartNumber
		fields = append(fields, field)
	}
	if uint16(m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = uint16(m.MessageIndex)
		fields = append(fields, field)
	}
	if m.Version != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.Version
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// VersionScaled return Version in its scaled value [Scale: 100].
//
// If Version value is invalid, float64 invalid value will be returned.
func (m *Software) VersionScaled() float64 {
	if m.Version == basetype.Uint16Invalid {
		return basetype.Float64InvalidInFloatForm()
	}
	return scaleoffset.Apply(m.Version, 100, 0)
}

// SetPartNumber sets Software value.
func (m *Software) SetPartNumber(v string) *Software {
	m.PartNumber = v
	return m
}

// SetMessageIndex sets Software value.
func (m *Software) SetMessageIndex(v typedef.MessageIndex) *Software {
	m.MessageIndex = v
	return m
}

// SetVersion sets Software value.
//
// Scale: 100
func (m *Software) SetVersion(v uint16) *Software {
	m.Version = v
	return m
}

// SetDeveloperFields Software's DeveloperFields.
func (m *Software) SetDeveloperFields(developerFields ...proto.DeveloperField) *Software {
	m.DeveloperFields = developerFields
	return m
}
