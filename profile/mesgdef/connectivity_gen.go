// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Connectivity is a Connectivity message.
type Connectivity struct {
	BluetoothEnabled            bool // Use Bluetooth for connectivity features
	BluetoothLeEnabled          bool // Use Bluetooth Low Energy for connectivity features
	AntEnabled                  bool // Use ANT for connectivity features
	Name                        string
	LiveTrackingEnabled         bool
	WeatherConditionsEnabled    bool
	WeatherAlertsEnabled        bool
	AutoActivityUploadEnabled   bool
	CourseDownloadEnabled       bool
	WorkoutDownloadEnabled      bool
	GpsEphemerisDownloadEnabled bool
	IncidentDetectionEnabled    bool
	GrouptrackEnabled           bool

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewConnectivity creates new Connectivity struct based on given mesg. If mesg is nil or mesg.Num is not equal to Connectivity mesg number, it will return nil.
func NewConnectivity(mesg proto.Message) *Connectivity {
	if mesg.Num != typedef.MesgNumConnectivity {
		return nil
	}

	vals := [13]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Connectivity{
		BluetoothEnabled:            typeconv.ToBool[bool](vals[0]),
		BluetoothLeEnabled:          typeconv.ToBool[bool](vals[1]),
		AntEnabled:                  typeconv.ToBool[bool](vals[2]),
		Name:                        typeconv.ToString[string](vals[3]),
		LiveTrackingEnabled:         typeconv.ToBool[bool](vals[4]),
		WeatherConditionsEnabled:    typeconv.ToBool[bool](vals[5]),
		WeatherAlertsEnabled:        typeconv.ToBool[bool](vals[6]),
		AutoActivityUploadEnabled:   typeconv.ToBool[bool](vals[7]),
		CourseDownloadEnabled:       typeconv.ToBool[bool](vals[8]),
		WorkoutDownloadEnabled:      typeconv.ToBool[bool](vals[9]),
		GpsEphemerisDownloadEnabled: typeconv.ToBool[bool](vals[10]),
		IncidentDetectionEnabled:    typeconv.ToBool[bool](vals[11]),
		GrouptrackEnabled:           typeconv.ToBool[bool](vals[12]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts Connectivity into proto.Message.
func (m *Connectivity) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumConnectivity)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if m.BluetoothEnabled != false {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.BluetoothEnabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.BluetoothLeEnabled != false {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.BluetoothLeEnabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AntEnabled != false {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.AntEnabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.Name
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.LiveTrackingEnabled != false {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.LiveTrackingEnabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.WeatherConditionsEnabled != false {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.WeatherConditionsEnabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.WeatherAlertsEnabled != false {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.WeatherAlertsEnabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AutoActivityUploadEnabled != false {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = m.AutoActivityUploadEnabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.CourseDownloadEnabled != false {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = m.CourseDownloadEnabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.WorkoutDownloadEnabled != false {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = m.WorkoutDownloadEnabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.GpsEphemerisDownloadEnabled != false {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = m.GpsEphemerisDownloadEnabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.IncidentDetectionEnabled != false {
		field := fac.CreateField(mesg.Num, 11)
		field.Value = m.IncidentDetectionEnabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.GrouptrackEnabled != false {
		field := fac.CreateField(mesg.Num, 12)
		field.Value = m.GrouptrackEnabled
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of Connectivity's valid fields.
func (m *Connectivity) size() byte {
	var size byte
	if m.BluetoothEnabled != false {
		size++
	}
	if m.BluetoothLeEnabled != false {
		size++
	}
	if m.AntEnabled != false {
		size++
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		size++
	}
	if m.LiveTrackingEnabled != false {
		size++
	}
	if m.WeatherConditionsEnabled != false {
		size++
	}
	if m.WeatherAlertsEnabled != false {
		size++
	}
	if m.AutoActivityUploadEnabled != false {
		size++
	}
	if m.CourseDownloadEnabled != false {
		size++
	}
	if m.WorkoutDownloadEnabled != false {
		size++
	}
	if m.GpsEphemerisDownloadEnabled != false {
		size++
	}
	if m.IncidentDetectionEnabled != false {
		size++
	}
	if m.GrouptrackEnabled != false {
		size++
	}
	return size
}
