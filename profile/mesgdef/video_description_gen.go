// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// VideoDescription is a VideoDescription message.
type VideoDescription struct {
	MessageIndex typedef.MessageIndex // Long descriptions will be split into multiple parts
	MessageCount uint16               // Total number of description parts
	Text         string

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewVideoDescription creates new VideoDescription struct based on given mesg.
// If mesg is nil, it will return VideoDescription with all fields being set to its corresponding invalid value.
func NewVideoDescription(mesg *proto.Message) *VideoDescription {
	vals := [255]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &VideoDescription{
		MessageIndex: typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		MessageCount: typeconv.ToUint16[uint16](vals[0]),
		Text:         typeconv.ToString[string](vals[1]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts VideoDescription into proto.Message.
func (m *VideoDescription) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumVideoDescription)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = typeconv.ToUint16[uint16](m.MessageIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MessageCount != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.MessageCount
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Text != basetype.StringInvalid && m.Text != "" {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.Text
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of VideoDescription's valid fields.
func (m *VideoDescription) size() byte {
	var size byte
	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		size++
	}
	if m.MessageCount != basetype.Uint16Invalid {
		size++
	}
	if m.Text != basetype.StringInvalid && m.Text != "" {
		size++
	}
	return size
}

// SetMessageIndex sets VideoDescription value.
//
// Long descriptions will be split into multiple parts
func (m *VideoDescription) SetMessageIndex(v typedef.MessageIndex) *VideoDescription {
	m.MessageIndex = v
	return m
}

// SetMessageCount sets VideoDescription value.
//
// Total number of description parts
func (m *VideoDescription) SetMessageCount(v uint16) *VideoDescription {
	m.MessageCount = v
	return m
}

// SetText sets VideoDescription value.
func (m *VideoDescription) SetText(v string) *VideoDescription {
	m.Text = v
	return m
}

// SetDeveloperFields VideoDescription's DeveloperFields.
func (m *VideoDescription) SetDeveloperFields(developerFields ...proto.DeveloperField) *VideoDescription {
	m.DeveloperFields = developerFields
	return m
}
