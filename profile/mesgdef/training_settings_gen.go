// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/factory"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"math"
)

// TrainingSettings is a TrainingSettings message.
//
// Note: The order of the fields is optimized using a memory alignment algorithm.
// Do not rely on field indices, such as when using reflection.
type TrainingSettings struct {
	TargetDistance     uint32 // Scale: 100; Units: m
	TargetTime         uint32 // Units: s
	PreciseTargetSpeed uint32 // Scale: 1e+06; Units: m/s; A more precise target speed field
	TargetSpeed        uint16 // Scale: 1000; Units: m/s

	UnknownFields   []proto.Field          // UnknownFields are fields that are exist but they are not defined in Profile.xlsx
	DeveloperFields []proto.DeveloperField // DeveloperFields are custom data fields [Added since protocol version 2.0]
}

// NewTrainingSettings creates new TrainingSettings struct based on given mesg.
// If mesg is nil, it will return TrainingSettings with all fields being set to its corresponding invalid value.
func NewTrainingSettings(mesg *proto.Message) *TrainingSettings {
	m := new(TrainingSettings)
	m.Reset(mesg)
	return m
}

// Reset resets all TrainingSettings's fields based on given mesg.
// If mesg is nil, all fields will be set to its corresponding invalid value.
func (m *TrainingSettings) Reset(mesg *proto.Message) {
	var (
		vals            [154]proto.Value
		unknownFields   []proto.Field
		developerFields []proto.DeveloperField
	)

	if mesg != nil {
		var n int
		for i := range mesg.Fields {
			if mesg.Fields[i].Name == factory.NameUnknown {
				n++
			}
		}
		unknownFields = make([]proto.Field, 0, n)
		for i := range mesg.Fields {
			if mesg.Fields[i].Name == factory.NameUnknown {
				unknownFields = append(unknownFields, mesg.Fields[i])
				continue
			}
			if mesg.Fields[i].Num < 154 {
				vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
			}
		}
		developerFields = mesg.DeveloperFields
	}

	*m = TrainingSettings{
		TargetDistance:     vals[31].Uint32(),
		TargetSpeed:        vals[32].Uint16(),
		TargetTime:         vals[33].Uint32(),
		PreciseTargetSpeed: vals[153].Uint32(),

		UnknownFields:   unknownFields,
		DeveloperFields: developerFields,
	}
}

// ToMesg converts TrainingSettings into proto.Message. If options is nil, default options will be used.
func (m *TrainingSettings) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	fields := make([]proto.Field, 0, 4)
	mesg := proto.Message{Num: typedef.MesgNumTrainingSettings}

	if m.TargetDistance != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 31)
		field.Value = proto.Uint32(m.TargetDistance)
		fields = append(fields, field)
	}
	if m.TargetSpeed != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 32)
		field.Value = proto.Uint16(m.TargetSpeed)
		fields = append(fields, field)
	}
	if m.TargetTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 33)
		field.Value = proto.Uint32(m.TargetTime)
		fields = append(fields, field)
	}
	if m.PreciseTargetSpeed != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 153)
		field.Value = proto.Uint32(m.PreciseTargetSpeed)
		fields = append(fields, field)
	}

	n := len(fields)
	mesg.Fields = make([]proto.Field, n+len(m.UnknownFields))
	copy(mesg.Fields[:n], fields)
	copy(mesg.Fields[n:], m.UnknownFields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// TargetDistanceScaled return TargetDistance in its scaled value.
// If TargetDistance value is invalid, float64 invalid value will be returned.
//
// Scale: 100; Units: m
func (m *TrainingSettings) TargetDistanceScaled() float64 {
	if m.TargetDistance == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.TargetDistance)/100 - 0
}

// TargetSpeedScaled return TargetSpeed in its scaled value.
// If TargetSpeed value is invalid, float64 invalid value will be returned.
//
// Scale: 1000; Units: m/s
func (m *TrainingSettings) TargetSpeedScaled() float64 {
	if m.TargetSpeed == basetype.Uint16Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.TargetSpeed)/1000 - 0
}

// PreciseTargetSpeedScaled return PreciseTargetSpeed in its scaled value.
// If PreciseTargetSpeed value is invalid, float64 invalid value will be returned.
//
// Scale: 1e+06; Units: m/s; A more precise target speed field
func (m *TrainingSettings) PreciseTargetSpeedScaled() float64 {
	if m.PreciseTargetSpeed == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.PreciseTargetSpeed)/1e+06 - 0
}

// SetTargetDistance sets TargetDistance value.
//
// Scale: 100; Units: m
func (m *TrainingSettings) SetTargetDistance(v uint32) *TrainingSettings {
	m.TargetDistance = v
	return m
}

// SetTargetDistanceScaled is similar to SetTargetDistance except it accepts a scaled value.
// This method automatically converts the given value to its uint32 form, discarding any applied scale and offset.
//
// Scale: 100; Units: m
func (m *TrainingSettings) SetTargetDistanceScaled(v float64) *TrainingSettings {
	unscaled := (v + 0) * 100
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint32Invalid) {
		m.TargetDistance = uint32(basetype.Uint32Invalid)
		return m
	}
	m.TargetDistance = uint32(unscaled)
	return m
}

// SetTargetSpeed sets TargetSpeed value.
//
// Scale: 1000; Units: m/s
func (m *TrainingSettings) SetTargetSpeed(v uint16) *TrainingSettings {
	m.TargetSpeed = v
	return m
}

// SetTargetSpeedScaled is similar to SetTargetSpeed except it accepts a scaled value.
// This method automatically converts the given value to its uint16 form, discarding any applied scale and offset.
//
// Scale: 1000; Units: m/s
func (m *TrainingSettings) SetTargetSpeedScaled(v float64) *TrainingSettings {
	unscaled := (v + 0) * 1000
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint16Invalid) {
		m.TargetSpeed = uint16(basetype.Uint16Invalid)
		return m
	}
	m.TargetSpeed = uint16(unscaled)
	return m
}

// SetTargetTime sets TargetTime value.
//
// Units: s
func (m *TrainingSettings) SetTargetTime(v uint32) *TrainingSettings {
	m.TargetTime = v
	return m
}

// SetPreciseTargetSpeed sets PreciseTargetSpeed value.
//
// Scale: 1e+06; Units: m/s; A more precise target speed field
func (m *TrainingSettings) SetPreciseTargetSpeed(v uint32) *TrainingSettings {
	m.PreciseTargetSpeed = v
	return m
}

// SetPreciseTargetSpeedScaled is similar to SetPreciseTargetSpeed except it accepts a scaled value.
// This method automatically converts the given value to its uint32 form, discarding any applied scale and offset.
//
// Scale: 1e+06; Units: m/s; A more precise target speed field
func (m *TrainingSettings) SetPreciseTargetSpeedScaled(v float64) *TrainingSettings {
	unscaled := (v + 0) * 1e+06
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint32Invalid) {
		m.PreciseTargetSpeed = uint32(basetype.Uint32Invalid)
		return m
	}
	m.PreciseTargetSpeed = uint32(unscaled)
	return m
}

// SetUnknownFields sets UnknownFields (fields that are exist but they are not defined in Profile.xlsx)
func (m *TrainingSettings) SetUnknownFields(unknownFields ...proto.Field) *TrainingSettings {
	m.UnknownFields = unknownFields
	return m
}

// SetDeveloperFields sets DeveloperFields.
func (m *TrainingSettings) SetDeveloperFields(developerFields ...proto.DeveloperField) *TrainingSettings {
	m.DeveloperFields = developerFields
	return m
}
