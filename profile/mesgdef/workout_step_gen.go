// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.115

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// WorkoutStep is a WorkoutStep message.
type WorkoutStep struct {
	MessageIndex                   typedef.MessageIndex
	WktStepName                    string
	DurationType                   typedef.WktStepDuration
	DurationValue                  uint32
	TargetType                     typedef.WktStepTarget
	TargetValue                    uint32
	CustomTargetValueLow           uint32
	CustomTargetValueHigh          uint32
	Intensity                      typedef.Intensity
	Notes                          string
	Equipment                      typedef.WorkoutEquipment
	ExerciseCategory               typedef.ExerciseCategory
	ExerciseName                   uint16
	ExerciseWeight                 uint16 // Scale: 100; Units: kg;
	WeightDisplayUnit              typedef.FitBaseUnit
	SecondaryTargetType            typedef.WktStepTarget
	SecondaryTargetValue           uint32
	SecondaryCustomTargetValueLow  uint32
	SecondaryCustomTargetValueHigh uint32

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewWorkoutStep creates new WorkoutStep struct based on given mesg. If mesg is nil or mesg.Num is not equal to WorkoutStep mesg number, it will return nil.
func NewWorkoutStep(mesg proto.Message) *WorkoutStep {
	if mesg.Num != typedef.MesgNumWorkoutStep {
		return nil
	}

	vals := [256]any{ // Mark all values as invalid, replace only when specified.
		254: basetype.Uint16Invalid, /* MessageIndex */
		0:   basetype.StringInvalid, /* WktStepName */
		1:   basetype.EnumInvalid,   /* DurationType */
		2:   basetype.Uint32Invalid, /* DurationValue */
		3:   basetype.EnumInvalid,   /* TargetType */
		4:   basetype.Uint32Invalid, /* TargetValue */
		5:   basetype.Uint32Invalid, /* CustomTargetValueLow */
		6:   basetype.Uint32Invalid, /* CustomTargetValueHigh */
		7:   basetype.EnumInvalid,   /* Intensity */
		8:   basetype.StringInvalid, /* Notes */
		9:   basetype.EnumInvalid,   /* Equipment */
		10:  basetype.Uint16Invalid, /* ExerciseCategory */
		11:  basetype.Uint16Invalid, /* ExerciseName */
		12:  basetype.Uint16Invalid, /* ExerciseWeight */
		13:  basetype.Uint16Invalid, /* WeightDisplayUnit */
		19:  basetype.EnumInvalid,   /* SecondaryTargetType */
		20:  basetype.Uint32Invalid, /* SecondaryTargetValue */
		21:  basetype.Uint32Invalid, /* SecondaryCustomTargetValueLow */
		22:  basetype.Uint32Invalid, /* SecondaryCustomTargetValueHigh */
	}

	for i := range mesg.Fields {
		if mesg.Fields[i].Value == nil {
			continue // keep the invalid value
		}
		vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
	}

	return &WorkoutStep{
		MessageIndex:                   typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		WktStepName:                    typeconv.ToString[string](vals[0]),
		DurationType:                   typeconv.ToEnum[typedef.WktStepDuration](vals[1]),
		DurationValue:                  typeconv.ToUint32[uint32](vals[2]),
		TargetType:                     typeconv.ToEnum[typedef.WktStepTarget](vals[3]),
		TargetValue:                    typeconv.ToUint32[uint32](vals[4]),
		CustomTargetValueLow:           typeconv.ToUint32[uint32](vals[5]),
		CustomTargetValueHigh:          typeconv.ToUint32[uint32](vals[6]),
		Intensity:                      typeconv.ToEnum[typedef.Intensity](vals[7]),
		Notes:                          typeconv.ToString[string](vals[8]),
		Equipment:                      typeconv.ToEnum[typedef.WorkoutEquipment](vals[9]),
		ExerciseCategory:               typeconv.ToUint16[typedef.ExerciseCategory](vals[10]),
		ExerciseName:                   typeconv.ToUint16[uint16](vals[11]),
		ExerciseWeight:                 typeconv.ToUint16[uint16](vals[12]),
		WeightDisplayUnit:              typeconv.ToUint16[typedef.FitBaseUnit](vals[13]),
		SecondaryTargetType:            typeconv.ToEnum[typedef.WktStepTarget](vals[19]),
		SecondaryTargetValue:           typeconv.ToUint32[uint32](vals[20]),
		SecondaryCustomTargetValueLow:  typeconv.ToUint32[uint32](vals[21]),
		SecondaryCustomTargetValueHigh: typeconv.ToUint32[uint32](vals[22]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to WorkoutStep mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumWorkoutStep)
func (m WorkoutStep) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumWorkoutStep {
		return
	}

	vals := [256]any{
		254: m.MessageIndex,
		0:   m.WktStepName,
		1:   m.DurationType,
		2:   m.DurationValue,
		3:   m.TargetType,
		4:   m.TargetValue,
		5:   m.CustomTargetValueLow,
		6:   m.CustomTargetValueHigh,
		7:   m.Intensity,
		8:   m.Notes,
		9:   m.Equipment,
		10:  m.ExerciseCategory,
		11:  m.ExerciseName,
		12:  m.ExerciseWeight,
		13:  m.WeightDisplayUnit,
		19:  m.SecondaryTargetType,
		20:  m.SecondaryTargetValue,
		21:  m.SecondaryCustomTargetValueLow,
		22:  m.SecondaryCustomTargetValueHigh,
	}

	for i := range mesg.Fields {
		mesg.Fields[i].Value = vals[mesg.Fields[i].Num]
	}
	mesg.DeveloperFields = m.DeveloperFields

}
