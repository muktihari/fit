// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// WorkoutStep is a WorkoutStep message.
type WorkoutStep struct {
	MessageIndex                   typedef.MessageIndex
	WktStepName                    string
	DurationType                   typedef.WktStepDuration
	DurationValue                  uint32
	TargetType                     typedef.WktStepTarget
	TargetValue                    uint32
	CustomTargetValueLow           uint32
	CustomTargetValueHigh          uint32
	Intensity                      typedef.Intensity
	Notes                          string
	Equipment                      typedef.WorkoutEquipment
	ExerciseCategory               typedef.ExerciseCategory
	ExerciseName                   uint16
	ExerciseWeight                 uint16 // Scale: 100; Units: kg;
	WeightDisplayUnit              typedef.FitBaseUnit
	SecondaryTargetType            typedef.WktStepTarget
	SecondaryTargetValue           uint32
	SecondaryCustomTargetValueLow  uint32
	SecondaryCustomTargetValueHigh uint32

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewWorkoutStep creates new WorkoutStep struct based on given mesg. If mesg is nil or mesg.Num is not equal to WorkoutStep mesg number, it will return nil.
func NewWorkoutStep(mesg proto.Message) *WorkoutStep {
	if mesg.Num != typedef.MesgNumWorkoutStep {
		return nil
	}

	vals := [255]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &WorkoutStep{
		MessageIndex:                   typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		WktStepName:                    typeconv.ToString[string](vals[0]),
		DurationType:                   typeconv.ToEnum[typedef.WktStepDuration](vals[1]),
		DurationValue:                  typeconv.ToUint32[uint32](vals[2]),
		TargetType:                     typeconv.ToEnum[typedef.WktStepTarget](vals[3]),
		TargetValue:                    typeconv.ToUint32[uint32](vals[4]),
		CustomTargetValueLow:           typeconv.ToUint32[uint32](vals[5]),
		CustomTargetValueHigh:          typeconv.ToUint32[uint32](vals[6]),
		Intensity:                      typeconv.ToEnum[typedef.Intensity](vals[7]),
		Notes:                          typeconv.ToString[string](vals[8]),
		Equipment:                      typeconv.ToEnum[typedef.WorkoutEquipment](vals[9]),
		ExerciseCategory:               typeconv.ToUint16[typedef.ExerciseCategory](vals[10]),
		ExerciseName:                   typeconv.ToUint16[uint16](vals[11]),
		ExerciseWeight:                 typeconv.ToUint16[uint16](vals[12]),
		WeightDisplayUnit:              typeconv.ToUint16[typedef.FitBaseUnit](vals[13]),
		SecondaryTargetType:            typeconv.ToEnum[typedef.WktStepTarget](vals[19]),
		SecondaryTargetValue:           typeconv.ToUint32[uint32](vals[20]),
		SecondaryCustomTargetValueLow:  typeconv.ToUint32[uint32](vals[21]),
		SecondaryCustomTargetValueHigh: typeconv.ToUint32[uint32](vals[22]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts WorkoutStep into proto.Message.
func (m *WorkoutStep) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumWorkoutStep)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = typeconv.ToUint16[uint16](m.MessageIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.WktStepName != basetype.StringInvalid && m.WktStepName != "" {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.WktStepName
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.DurationType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = typeconv.ToEnum[byte](m.DurationType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.DurationValue != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.DurationValue
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.TargetType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = typeconv.ToEnum[byte](m.TargetType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TargetValue != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.TargetValue
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.CustomTargetValueLow != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.CustomTargetValueLow
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.CustomTargetValueHigh != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.CustomTargetValueHigh
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Intensity) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = typeconv.ToEnum[byte](m.Intensity)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Notes != basetype.StringInvalid && m.Notes != "" {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = m.Notes
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Equipment) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = typeconv.ToEnum[byte](m.Equipment)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint16[uint16](m.ExerciseCategory) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = typeconv.ToUint16[uint16](m.ExerciseCategory)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ExerciseName != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 11)
		field.Value = m.ExerciseName
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ExerciseWeight != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 12)
		field.Value = m.ExerciseWeight
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint16[uint16](m.WeightDisplayUnit) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 13)
		field.Value = typeconv.ToUint16[uint16](m.WeightDisplayUnit)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.SecondaryTargetType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 19)
		field.Value = typeconv.ToEnum[byte](m.SecondaryTargetType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.SecondaryTargetValue != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 20)
		field.Value = m.SecondaryTargetValue
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.SecondaryCustomTargetValueLow != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 21)
		field.Value = m.SecondaryCustomTargetValueLow
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.SecondaryCustomTargetValueHigh != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 22)
		field.Value = m.SecondaryCustomTargetValueHigh
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of WorkoutStep's valid fields.
func (m *WorkoutStep) size() byte {
	var size byte
	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		size++
	}
	if m.WktStepName != basetype.StringInvalid && m.WktStepName != "" {
		size++
	}
	if typeconv.ToEnum[byte](m.DurationType) != basetype.EnumInvalid {
		size++
	}
	if m.DurationValue != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.TargetType) != basetype.EnumInvalid {
		size++
	}
	if m.TargetValue != basetype.Uint32Invalid {
		size++
	}
	if m.CustomTargetValueLow != basetype.Uint32Invalid {
		size++
	}
	if m.CustomTargetValueHigh != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Intensity) != basetype.EnumInvalid {
		size++
	}
	if m.Notes != basetype.StringInvalid && m.Notes != "" {
		size++
	}
	if typeconv.ToEnum[byte](m.Equipment) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToUint16[uint16](m.ExerciseCategory) != basetype.Uint16Invalid {
		size++
	}
	if m.ExerciseName != basetype.Uint16Invalid {
		size++
	}
	if m.ExerciseWeight != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint16[uint16](m.WeightDisplayUnit) != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.SecondaryTargetType) != basetype.EnumInvalid {
		size++
	}
	if m.SecondaryTargetValue != basetype.Uint32Invalid {
		size++
	}
	if m.SecondaryCustomTargetValueLow != basetype.Uint32Invalid {
		size++
	}
	if m.SecondaryCustomTargetValueHigh != basetype.Uint32Invalid {
		size++
	}
	return size
}
