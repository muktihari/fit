// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// SlaveDevice is a SlaveDevice message.
type SlaveDevice struct {
	Manufacturer typedef.Manufacturer
	Product      uint16

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSlaveDevice creates new SlaveDevice struct based on given mesg.
// If mesg is nil, it will return SlaveDevice with all fields being set to its corresponding invalid value.
func NewSlaveDevice(mesg *proto.Message) *SlaveDevice {
	vals := [2]proto.Value{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &SlaveDevice{
		Manufacturer: typedef.Manufacturer(vals[0].Uint16()),
		Product:      vals[1].Uint16(),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts SlaveDevice into proto.Message. If options is nil, default options will be used.
func (m *SlaveDevice) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	arr := pool.Get().(*[256]proto.Field)
	defer pool.Put(arr)

	fields := arr[:0] // Create slice from array with zero len.
	mesg := proto.Message{Num: typedef.MesgNumSlaveDevice}

	if uint16(m.Manufacturer) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = proto.Uint16(uint16(m.Manufacturer))
		fields = append(fields, field)
	}
	if m.Product != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = proto.Uint16(m.Product)
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// SetManufacturer sets SlaveDevice value.
func (m *SlaveDevice) SetManufacturer(v typedef.Manufacturer) *SlaveDevice {
	m.Manufacturer = v
	return m
}

// SetProduct sets SlaveDevice value.
func (m *SlaveDevice) SetProduct(v uint16) *SlaveDevice {
	m.Product = v
	return m
}

// SetDeveloperFields SlaveDevice's DeveloperFields.
func (m *SlaveDevice) SetDeveloperFields(developerFields ...proto.DeveloperField) *SlaveDevice {
	m.DeveloperFields = developerFields
	return m
}
