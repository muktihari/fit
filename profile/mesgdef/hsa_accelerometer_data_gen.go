// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/kit/scaleoffset"
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// HsaAccelerometerData is a HsaAccelerometerData message.
type HsaAccelerometerData struct {
	Timestamp        time.Time // Units: s
	AccelX           []int16   // Array: [N]; Scale: 1.024; Units: mG; X-Axis Measurement
	AccelY           []int16   // Array: [N]; Scale: 1.024; Units: mG; Y-Axis Measurement
	AccelZ           []int16   // Array: [N]; Scale: 1.024; Units: mG; Z-Axis Measurement
	Timestamp32K     uint32    // 32 kHz timestamp
	TimestampMs      uint16    // Units: ms; Millisecond resolution of the timestamp
	SamplingInterval uint16    // Units: ms; Sampling Interval in Milliseconds

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewHsaAccelerometerData creates new HsaAccelerometerData struct based on given mesg.
// If mesg is nil, it will return HsaAccelerometerData with all fields being set to its corresponding invalid value.
func NewHsaAccelerometerData(mesg *proto.Message) *HsaAccelerometerData {
	vals := [254]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &HsaAccelerometerData{
		Timestamp:        datetime.ToTime(vals[253]),
		AccelX:           typeconv.ToSliceSint16[int16](vals[2]),
		AccelY:           typeconv.ToSliceSint16[int16](vals[3]),
		AccelZ:           typeconv.ToSliceSint16[int16](vals[4]),
		Timestamp32K:     typeconv.ToUint32[uint32](vals[5]),
		TimestampMs:      typeconv.ToUint16[uint16](vals[0]),
		SamplingInterval: typeconv.ToUint16[uint16](vals[1]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts HsaAccelerometerData into proto.Message. If options is nil, default options will be used.
func (m *HsaAccelerometerData) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := fac.CreateMesgOnly(typedef.MesgNumHsaAccelerometerData)

	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = datetime.ToUint32(m.Timestamp)
		fields = append(fields, field)
	}
	if m.AccelX != nil {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.AccelX
		fields = append(fields, field)
	}
	if m.AccelY != nil {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.AccelY
		fields = append(fields, field)
	}
	if m.AccelZ != nil {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.AccelZ
		fields = append(fields, field)
	}
	if m.Timestamp32K != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.Timestamp32K
		fields = append(fields, field)
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.TimestampMs
		fields = append(fields, field)
	}
	if m.SamplingInterval != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.SamplingInterval
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// AccelXScaled return AccelX in its scaled value [Array: [N]; Scale: 1.024; Units: mG; X-Axis Measurement].
//
// If AccelX value is invalid, nil will be returned.
func (m *HsaAccelerometerData) AccelXScaled() []float64 {
	if m.AccelX == nil {
		return nil
	}
	return scaleoffset.ApplySlice(m.AccelX, 1.024, 0)
}

// AccelYScaled return AccelY in its scaled value [Array: [N]; Scale: 1.024; Units: mG; Y-Axis Measurement].
//
// If AccelY value is invalid, nil will be returned.
func (m *HsaAccelerometerData) AccelYScaled() []float64 {
	if m.AccelY == nil {
		return nil
	}
	return scaleoffset.ApplySlice(m.AccelY, 1.024, 0)
}

// AccelZScaled return AccelZ in its scaled value [Array: [N]; Scale: 1.024; Units: mG; Z-Axis Measurement].
//
// If AccelZ value is invalid, nil will be returned.
func (m *HsaAccelerometerData) AccelZScaled() []float64 {
	if m.AccelZ == nil {
		return nil
	}
	return scaleoffset.ApplySlice(m.AccelZ, 1.024, 0)
}

// SetTimestamp sets HsaAccelerometerData value.
//
// Units: s
func (m *HsaAccelerometerData) SetTimestamp(v time.Time) *HsaAccelerometerData {
	m.Timestamp = v
	return m
}

// SetAccelX sets HsaAccelerometerData value.
//
// Array: [N]; Scale: 1.024; Units: mG; X-Axis Measurement
func (m *HsaAccelerometerData) SetAccelX(v []int16) *HsaAccelerometerData {
	m.AccelX = v
	return m
}

// SetAccelY sets HsaAccelerometerData value.
//
// Array: [N]; Scale: 1.024; Units: mG; Y-Axis Measurement
func (m *HsaAccelerometerData) SetAccelY(v []int16) *HsaAccelerometerData {
	m.AccelY = v
	return m
}

// SetAccelZ sets HsaAccelerometerData value.
//
// Array: [N]; Scale: 1.024; Units: mG; Z-Axis Measurement
func (m *HsaAccelerometerData) SetAccelZ(v []int16) *HsaAccelerometerData {
	m.AccelZ = v
	return m
}

// SetTimestamp32K sets HsaAccelerometerData value.
//
// 32 kHz timestamp
func (m *HsaAccelerometerData) SetTimestamp32K(v uint32) *HsaAccelerometerData {
	m.Timestamp32K = v
	return m
}

// SetTimestampMs sets HsaAccelerometerData value.
//
// Units: ms; Millisecond resolution of the timestamp
func (m *HsaAccelerometerData) SetTimestampMs(v uint16) *HsaAccelerometerData {
	m.TimestampMs = v
	return m
}

// SetSamplingInterval sets HsaAccelerometerData value.
//
// Units: ms; Sampling Interval in Milliseconds
func (m *HsaAccelerometerData) SetSamplingInterval(v uint16) *HsaAccelerometerData {
	m.SamplingInterval = v
	return m
}

// SetDeveloperFields HsaAccelerometerData's DeveloperFields.
func (m *HsaAccelerometerData) SetDeveloperFields(developerFields ...proto.DeveloperField) *HsaAccelerometerData {
	m.DeveloperFields = developerFields
	return m
}
