// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// DeviceAuxBatteryInfo is a DeviceAuxBatteryInfo message.
type DeviceAuxBatteryInfo struct {
	Timestamp         typedef.DateTime
	DeviceIndex       typedef.DeviceIndex
	BatteryVoltage    uint16 // Scale: 256; Units: V;
	BatteryStatus     typedef.BatteryStatus
	BatteryIdentifier uint8

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewDeviceAuxBatteryInfo creates new DeviceAuxBatteryInfo struct based on given mesg. If mesg is nil or mesg.Num is not equal to DeviceAuxBatteryInfo mesg number, it will return nil.
func NewDeviceAuxBatteryInfo(mesg proto.Message) *DeviceAuxBatteryInfo {
	if mesg.Num != typedef.MesgNumDeviceAuxBatteryInfo {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &DeviceAuxBatteryInfo{
		Timestamp:         typeconv.ToUint32[typedef.DateTime](vals[253]),
		DeviceIndex:       typeconv.ToUint8[typedef.DeviceIndex](vals[0]),
		BatteryVoltage:    typeconv.ToUint16[uint16](vals[1]),
		BatteryStatus:     typeconv.ToUint8[typedef.BatteryStatus](vals[2]),
		BatteryIdentifier: typeconv.ToUint8[uint8](vals[3]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts DeviceAuxBatteryInfo into proto.Message.
func (m *DeviceAuxBatteryInfo) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumDeviceAuxBatteryInfo)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint8[uint8](m.DeviceIndex) != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = typeconv.ToUint8[uint8](m.DeviceIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.BatteryVoltage != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.BatteryVoltage
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint8[uint8](m.BatteryStatus) != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = typeconv.ToUint8[uint8](m.BatteryStatus)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.BatteryIdentifier != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.BatteryIdentifier
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of DeviceAuxBatteryInfo's valid fields.
func (m *DeviceAuxBatteryInfo) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToUint8[uint8](m.DeviceIndex) != basetype.Uint8Invalid {
		size++
	}
	if m.BatteryVoltage != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint8[uint8](m.BatteryStatus) != basetype.Uint8Invalid {
		size++
	}
	if m.BatteryIdentifier != basetype.Uint8Invalid {
		size++
	}
	return size
}
