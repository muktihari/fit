// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Hr is a Hr message.
type Hr struct {
	Timestamp           typedef.DateTime
	FractionalTimestamp uint16   // Scale: 32768; Units: s;
	Time256             uint8    // Scale: 256; Units: s;
	FilteredBpm         []uint8  // Array: [N]; Units: bpm;
	EventTimestamp      []uint32 // Scale: 1024; Array: [N]; Units: s;
	EventTimestamp12    []byte   // Scale: 1024; Array: [N]; Units: s;

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewHr creates new Hr struct based on given mesg. If mesg is nil or mesg.Num is not equal to Hr mesg number, it will return nil.
func NewHr(mesg proto.Message) *Hr {
	if mesg.Num != typedef.MesgNumHr {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Hr{
		Timestamp:           typeconv.ToUint32[typedef.DateTime](vals[253]),
		FractionalTimestamp: typeconv.ToUint16[uint16](vals[0]),
		Time256:             typeconv.ToUint8[uint8](vals[1]),
		FilteredBpm:         typeconv.ToSliceUint8[uint8](vals[6]),
		EventTimestamp:      typeconv.ToSliceUint32[uint32](vals[9]),
		EventTimestamp12:    typeconv.ToSliceByte[byte](vals[10]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts Hr into proto.Message.
func (m *Hr) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumHr)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.FractionalTimestamp != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.FractionalTimestamp
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Time256 != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.Time256
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.FilteredBpm != nil {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.FilteredBpm
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EventTimestamp != nil {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = m.EventTimestamp
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EventTimestamp12 != nil {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = m.EventTimestamp12
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of Hr's valid fields.
func (m *Hr) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.FractionalTimestamp != basetype.Uint16Invalid {
		size++
	}
	if m.Time256 != basetype.Uint8Invalid {
		size++
	}
	if m.FilteredBpm != nil {
		size++
	}
	if m.EventTimestamp != nil {
		size++
	}
	if m.EventTimestamp12 != nil {
		size++
	}
	return size
}
