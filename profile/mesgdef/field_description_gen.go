// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// FieldDescription is a FieldDescription message.
type FieldDescription struct {
	FieldName             []string // Array: [N]
	Components            string
	Units                 []string // Array: [N]
	Bits                  string
	Accumulate            string
	FitBaseUnitId         typedef.FitBaseUnit
	NativeMesgNum         typedef.MesgNum
	DeveloperDataIndex    uint8
	FieldDefinitionNumber uint8
	FitBaseTypeId         basetype.BaseType
	Array                 uint8
	Scale                 uint8
	Offset                int8
	NativeFieldNum        uint8
}

// NewFieldDescription creates new FieldDescription struct based on given mesg.
// If mesg is nil, it will return FieldDescription with all fields being set to its corresponding invalid value.
func NewFieldDescription(mesg *proto.Message) *FieldDescription {
	vals := [16]proto.Value{}

	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
	}

	return &FieldDescription{
		FieldName:             vals[3].SliceString(),
		Components:            vals[5].String(),
		Units:                 vals[8].SliceString(),
		Bits:                  vals[9].String(),
		Accumulate:            vals[10].String(),
		FitBaseUnitId:         typedef.FitBaseUnit(vals[13].Uint16()),
		NativeMesgNum:         typedef.MesgNum(vals[14].Uint16()),
		DeveloperDataIndex:    vals[0].Uint8(),
		FieldDefinitionNumber: vals[1].Uint8(),
		FitBaseTypeId:         basetype.BaseType((vals[2]).Uint8()),
		Array:                 vals[4].Uint8(),
		Scale:                 vals[6].Uint8(),
		Offset:                vals[7].Int8(),
		NativeFieldNum:        vals[15].Uint8(),
	}
}

// ToMesg converts FieldDescription into proto.Message. If options is nil, default options will be used.
func (m *FieldDescription) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	arr := pool.Get().(*[256]proto.Field)
	defer pool.Put(arr)

	fields := arr[:0] // Create slice from array with zero len.
	mesg := proto.Message{Num: typedef.MesgNumFieldDescription}

	if m.FieldName != nil {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = proto.SliceString(m.FieldName)
		fields = append(fields, field)
	}
	if m.Components != basetype.StringInvalid && m.Components != "" {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = proto.String(m.Components)
		fields = append(fields, field)
	}
	if m.Units != nil {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = proto.SliceString(m.Units)
		fields = append(fields, field)
	}
	if m.Bits != basetype.StringInvalid && m.Bits != "" {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = proto.String(m.Bits)
		fields = append(fields, field)
	}
	if m.Accumulate != basetype.StringInvalid && m.Accumulate != "" {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = proto.String(m.Accumulate)
		fields = append(fields, field)
	}
	if uint16(m.FitBaseUnitId) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 13)
		field.Value = proto.Uint16(uint16(m.FitBaseUnitId))
		fields = append(fields, field)
	}
	if uint16(m.NativeMesgNum) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 14)
		field.Value = proto.Uint16(uint16(m.NativeMesgNum))
		fields = append(fields, field)
	}
	if m.DeveloperDataIndex != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = proto.Uint8(m.DeveloperDataIndex)
		fields = append(fields, field)
	}
	if m.FieldDefinitionNumber != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = proto.Uint8(m.FieldDefinitionNumber)
		fields = append(fields, field)
	}
	if uint8(m.FitBaseTypeId) != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = proto.Uint8(uint8(m.FitBaseTypeId))
		fields = append(fields, field)
	}
	if m.Array != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = proto.Uint8(m.Array)
		fields = append(fields, field)
	}
	if m.Scale != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = proto.Uint8(m.Scale)
		fields = append(fields, field)
	}
	if m.Offset != basetype.Sint8Invalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = proto.Int8(m.Offset)
		fields = append(fields, field)
	}
	if m.NativeFieldNum != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 15)
		field.Value = proto.Uint8(m.NativeFieldNum)
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	return mesg
}

// SetFieldName sets FieldDescription value.
//
// Array: [N]
func (m *FieldDescription) SetFieldName(v []string) *FieldDescription {
	m.FieldName = v
	return m
}

// SetComponents sets FieldDescription value.
func (m *FieldDescription) SetComponents(v string) *FieldDescription {
	m.Components = v
	return m
}

// SetUnits sets FieldDescription value.
//
// Array: [N]
func (m *FieldDescription) SetUnits(v []string) *FieldDescription {
	m.Units = v
	return m
}

// SetBits sets FieldDescription value.
func (m *FieldDescription) SetBits(v string) *FieldDescription {
	m.Bits = v
	return m
}

// SetAccumulate sets FieldDescription value.
func (m *FieldDescription) SetAccumulate(v string) *FieldDescription {
	m.Accumulate = v
	return m
}

// SetFitBaseUnitId sets FieldDescription value.
func (m *FieldDescription) SetFitBaseUnitId(v typedef.FitBaseUnit) *FieldDescription {
	m.FitBaseUnitId = v
	return m
}

// SetNativeMesgNum sets FieldDescription value.
func (m *FieldDescription) SetNativeMesgNum(v typedef.MesgNum) *FieldDescription {
	m.NativeMesgNum = v
	return m
}

// SetDeveloperDataIndex sets FieldDescription value.
func (m *FieldDescription) SetDeveloperDataIndex(v uint8) *FieldDescription {
	m.DeveloperDataIndex = v
	return m
}

// SetFieldDefinitionNumber sets FieldDescription value.
func (m *FieldDescription) SetFieldDefinitionNumber(v uint8) *FieldDescription {
	m.FieldDefinitionNumber = v
	return m
}

// SetFitBaseTypeId sets FieldDescription value.
func (m *FieldDescription) SetFitBaseTypeId(v basetype.BaseType) *FieldDescription {
	m.FitBaseTypeId = v
	return m
}

// SetArray sets FieldDescription value.
func (m *FieldDescription) SetArray(v uint8) *FieldDescription {
	m.Array = v
	return m
}

// SetScale sets FieldDescription value.
func (m *FieldDescription) SetScale(v uint8) *FieldDescription {
	m.Scale = v
	return m
}

// SetOffset sets FieldDescription value.
func (m *FieldDescription) SetOffset(v int8) *FieldDescription {
	m.Offset = v
	return m
}

// SetNativeFieldNum sets FieldDescription value.
func (m *FieldDescription) SetNativeFieldNum(v uint8) *FieldDescription {
	m.NativeFieldNum = v
	return m
}
