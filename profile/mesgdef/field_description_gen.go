// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// FieldDescription is a FieldDescription message.
type FieldDescription struct {
	DeveloperDataIndex    uint8
	FieldDefinitionNumber uint8
	FitBaseTypeId         basetype.BaseType
	FieldName             []string // Array: [N];
	Array                 uint8
	Components            string
	Scale                 uint8
	Offset                int8
	Units                 []string // Array: [N];
	Bits                  string
	Accumulate            string
	FitBaseUnitId         typedef.FitBaseUnit
	NativeMesgNum         typedef.MesgNum
	NativeFieldNum        uint8
}

// NewFieldDescription creates new FieldDescription struct based on given mesg.
// If mesg is nil, it will return FieldDescription with all fields being set to its corresponding invalid value.
func NewFieldDescription(mesg *proto.Message) *FieldDescription {
	vals := [16]any{}

	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
	}

	return &FieldDescription{
		DeveloperDataIndex:    typeconv.ToUint8[uint8](vals[0]),
		FieldDefinitionNumber: typeconv.ToUint8[uint8](vals[1]),
		FitBaseTypeId:         typeconv.ToUint8[basetype.BaseType](vals[2]),
		FieldName:             typeconv.ToSliceString[string](vals[3]),
		Array:                 typeconv.ToUint8[uint8](vals[4]),
		Components:            typeconv.ToString[string](vals[5]),
		Scale:                 typeconv.ToUint8[uint8](vals[6]),
		Offset:                typeconv.ToSint8[int8](vals[7]),
		Units:                 typeconv.ToSliceString[string](vals[8]),
		Bits:                  typeconv.ToString[string](vals[9]),
		Accumulate:            typeconv.ToString[string](vals[10]),
		FitBaseUnitId:         typeconv.ToUint16[typedef.FitBaseUnit](vals[13]),
		NativeMesgNum:         typeconv.ToUint16[typedef.MesgNum](vals[14]),
		NativeFieldNum:        typeconv.ToUint8[uint8](vals[15]),
	}
}

// ToMesg converts FieldDescription into proto.Message.
func (m *FieldDescription) ToMesg(fac Factory) proto.Message {
	fieldsPtr := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsPtr)

	fields := (*fieldsPtr)[:0] // Create slice from array with zero len.
	mesg := fac.CreateMesgOnly(typedef.MesgNumFieldDescription)

	if m.DeveloperDataIndex != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.DeveloperDataIndex
		fields = append(fields, field)
	}
	if m.FieldDefinitionNumber != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.FieldDefinitionNumber
		fields = append(fields, field)
	}
	if typeconv.ToUint8[uint8](m.FitBaseTypeId) != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = typeconv.ToUint8[uint8](m.FitBaseTypeId)
		fields = append(fields, field)
	}
	if m.FieldName != nil {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.FieldName
		fields = append(fields, field)
	}
	if m.Array != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.Array
		fields = append(fields, field)
	}
	if m.Components != basetype.StringInvalid && m.Components != "" {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.Components
		fields = append(fields, field)
	}
	if m.Scale != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.Scale
		fields = append(fields, field)
	}
	if m.Offset != basetype.Sint8Invalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = m.Offset
		fields = append(fields, field)
	}
	if m.Units != nil {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = m.Units
		fields = append(fields, field)
	}
	if m.Bits != basetype.StringInvalid && m.Bits != "" {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = m.Bits
		fields = append(fields, field)
	}
	if m.Accumulate != basetype.StringInvalid && m.Accumulate != "" {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = m.Accumulate
		fields = append(fields, field)
	}
	if typeconv.ToUint16[uint16](m.FitBaseUnitId) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 13)
		field.Value = typeconv.ToUint16[uint16](m.FitBaseUnitId)
		fields = append(fields, field)
	}
	if typeconv.ToUint16[uint16](m.NativeMesgNum) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 14)
		field.Value = typeconv.ToUint16[uint16](m.NativeMesgNum)
		fields = append(fields, field)
	}
	if m.NativeFieldNum != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 15)
		field.Value = m.NativeFieldNum
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	return mesg
}

// SetDeveloperDataIndex sets FieldDescription value.
func (m *FieldDescription) SetDeveloperDataIndex(v uint8) *FieldDescription {
	m.DeveloperDataIndex = v
	return m
}

// SetFieldDefinitionNumber sets FieldDescription value.
func (m *FieldDescription) SetFieldDefinitionNumber(v uint8) *FieldDescription {
	m.FieldDefinitionNumber = v
	return m
}

// SetFitBaseTypeId sets FieldDescription value.
func (m *FieldDescription) SetFitBaseTypeId(v basetype.BaseType) *FieldDescription {
	m.FitBaseTypeId = v
	return m
}

// SetFieldName sets FieldDescription value.
//
// Array: [N];
func (m *FieldDescription) SetFieldName(v []string) *FieldDescription {
	m.FieldName = v
	return m
}

// SetArray sets FieldDescription value.
func (m *FieldDescription) SetArray(v uint8) *FieldDescription {
	m.Array = v
	return m
}

// SetComponents sets FieldDescription value.
func (m *FieldDescription) SetComponents(v string) *FieldDescription {
	m.Components = v
	return m
}

// SetScale sets FieldDescription value.
func (m *FieldDescription) SetScale(v uint8) *FieldDescription {
	m.Scale = v
	return m
}

// SetOffset sets FieldDescription value.
func (m *FieldDescription) SetOffset(v int8) *FieldDescription {
	m.Offset = v
	return m
}

// SetUnits sets FieldDescription value.
//
// Array: [N];
func (m *FieldDescription) SetUnits(v []string) *FieldDescription {
	m.Units = v
	return m
}

// SetBits sets FieldDescription value.
func (m *FieldDescription) SetBits(v string) *FieldDescription {
	m.Bits = v
	return m
}

// SetAccumulate sets FieldDescription value.
func (m *FieldDescription) SetAccumulate(v string) *FieldDescription {
	m.Accumulate = v
	return m
}

// SetFitBaseUnitId sets FieldDescription value.
func (m *FieldDescription) SetFitBaseUnitId(v typedef.FitBaseUnit) *FieldDescription {
	m.FitBaseUnitId = v
	return m
}

// SetNativeMesgNum sets FieldDescription value.
func (m *FieldDescription) SetNativeMesgNum(v typedef.MesgNum) *FieldDescription {
	m.NativeMesgNum = v
	return m
}

// SetNativeFieldNum sets FieldDescription value.
func (m *FieldDescription) SetNativeFieldNum(v uint8) *FieldDescription {
	m.NativeFieldNum = v
	return m
}
