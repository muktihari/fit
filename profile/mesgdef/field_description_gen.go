// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// FieldDescription is a FieldDescription message.
type FieldDescription struct {
	DeveloperDataIndex    uint8
	FieldDefinitionNumber uint8
	FitBaseTypeId         basetype.BaseType
	FieldName             string
	Array                 uint8
	Components            string
	Scale                 uint8
	Offset                int8
	Units                 string
	Bits                  string
	Accumulate            string
	FitBaseUnitId         typedef.FitBaseUnit
	NativeMesgNum         typedef.MesgNum
	NativeFieldNum        uint8
}

// NewFieldDescription creates new FieldDescription struct based on given mesg. If mesg is nil or mesg.Num is not equal to FieldDescription mesg number, it will return nil.
func NewFieldDescription(mesg proto.Message) *FieldDescription {
	if mesg.Num != typedef.MesgNumFieldDescription {
		return nil
	}

	vals := [256]any{ // Mark all values as invalid, replace only when specified.
		0:  basetype.Uint8Invalid,  /* DeveloperDataIndex */
		1:  basetype.Uint8Invalid,  /* FieldDefinitionNumber */
		2:  basetype.Uint8Invalid,  /* FitBaseTypeId */
		3:  nil,                    /* FieldName */
		4:  basetype.Uint8Invalid,  /* Array */
		5:  basetype.StringInvalid, /* Components */
		6:  basetype.Uint8Invalid,  /* Scale */
		7:  basetype.Sint8Invalid,  /* Offset */
		8:  nil,                    /* Units */
		9:  basetype.StringInvalid, /* Bits */
		10: basetype.StringInvalid, /* Accumulate */
		13: basetype.Uint16Invalid, /* FitBaseUnitId */
		14: basetype.Uint16Invalid, /* NativeMesgNum */
		15: basetype.Uint8Invalid,  /* NativeFieldNum */
	}

	for i := range mesg.Fields {
		if mesg.Fields[i].Value == nil {
			continue // keep the invalid value
		}
		vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
	}

	return &FieldDescription{
		DeveloperDataIndex:    typeconv.ToUint8[uint8](vals[0]),
		FieldDefinitionNumber: typeconv.ToUint8[uint8](vals[1]),
		FitBaseTypeId:         typeconv.ToUint8[basetype.BaseType](vals[2]),
		FieldName:             typeconv.ToString[string](vals[3]),
		Array:                 typeconv.ToUint8[uint8](vals[4]),
		Components:            typeconv.ToString[string](vals[5]),
		Scale:                 typeconv.ToUint8[uint8](vals[6]),
		Offset:                typeconv.ToSint8[int8](vals[7]),
		Units:                 typeconv.ToString[string](vals[8]),
		Bits:                  typeconv.ToString[string](vals[9]),
		Accumulate:            typeconv.ToString[string](vals[10]),
		FitBaseUnitId:         typeconv.ToUint16[typedef.FitBaseUnit](vals[13]),
		NativeMesgNum:         typeconv.ToUint16[typedef.MesgNum](vals[14]),
		NativeFieldNum:        typeconv.ToUint8[uint8](vals[15]),
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to FieldDescription mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumFieldDescription)
func (m FieldDescription) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumFieldDescription {
		return
	}

	vals := [256]any{
		0:  m.DeveloperDataIndex,
		1:  m.FieldDefinitionNumber,
		2:  m.FitBaseTypeId,
		3:  m.FieldName,
		4:  m.Array,
		5:  m.Components,
		6:  m.Scale,
		7:  m.Offset,
		8:  m.Units,
		9:  m.Bits,
		10: m.Accumulate,
		13: m.FitBaseUnitId,
		14: m.NativeMesgNum,
		15: m.NativeFieldNum,
	}

	for i := range mesg.Fields {
		mesg.Fields[i].Value = vals[mesg.Fields[i].Num]
	}
}
