// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// MesgCapabilities is a MesgCapabilities message.
type MesgCapabilities struct {
	MessageIndex typedef.MessageIndex
	File         typedef.File
	MesgNum      typedef.MesgNum
	CountType    typedef.MesgCount
	Count        uint16

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewMesgCapabilities creates new MesgCapabilities struct based on given mesg.
// If mesg is nil, it will return MesgCapabilities with all fields being set to its corresponding invalid value.
func NewMesgCapabilities(mesg *proto.Message) *MesgCapabilities {
	vals := [255]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &MesgCapabilities{
		MessageIndex: typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		File:         typeconv.ToEnum[typedef.File](vals[0]),
		MesgNum:      typeconv.ToUint16[typedef.MesgNum](vals[1]),
		CountType:    typeconv.ToEnum[typedef.MesgCount](vals[2]),
		Count:        typeconv.ToUint16[uint16](vals[3]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts MesgCapabilities into proto.Message.
func (m *MesgCapabilities) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumMesgCapabilities)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = typeconv.ToUint16[uint16](m.MessageIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.File) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = typeconv.ToEnum[byte](m.File)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint16[uint16](m.MesgNum) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = typeconv.ToUint16[uint16](m.MesgNum)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.CountType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = typeconv.ToEnum[byte](m.CountType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Count != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.Count
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of MesgCapabilities's valid fields.
func (m *MesgCapabilities) size() byte {
	var size byte
	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.File) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToUint16[uint16](m.MesgNum) != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.CountType) != basetype.EnumInvalid {
		size++
	}
	if m.Count != basetype.Uint16Invalid {
		size++
	}
	return size
}

// SetMessageIndex sets MesgCapabilities value.
func (m *MesgCapabilities) SetMessageIndex(v typedef.MessageIndex) *MesgCapabilities {
	m.MessageIndex = v
	return m
}

// SetFile sets MesgCapabilities value.
func (m *MesgCapabilities) SetFile(v typedef.File) *MesgCapabilities {
	m.File = v
	return m
}

// SetMesgNum sets MesgCapabilities value.
func (m *MesgCapabilities) SetMesgNum(v typedef.MesgNum) *MesgCapabilities {
	m.MesgNum = v
	return m
}

// SetCountType sets MesgCapabilities value.
func (m *MesgCapabilities) SetCountType(v typedef.MesgCount) *MesgCapabilities {
	m.CountType = v
	return m
}

// SetCount sets MesgCapabilities value.
func (m *MesgCapabilities) SetCount(v uint16) *MesgCapabilities {
	m.Count = v
	return m
}

// SetDeveloperFields MesgCapabilities's DeveloperFields.
func (m *MesgCapabilities) SetDeveloperFields(developerFields ...proto.DeveloperField) *MesgCapabilities {
	m.DeveloperFields = developerFields
	return m
}
