// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Activity is a Activity message.
type Activity struct {
	Timestamp      typedef.DateTime
	TotalTimerTime uint32 // Scale: 1000; Units: s; Exclude pauses
	NumSessions    uint16
	Type           typedef.Activity
	Event          typedef.Event
	EventType      typedef.EventType
	LocalTimestamp typedef.LocalDateTime // timestamp epoch expressed in local time, used to convert activity timestamps to local time
	EventGroup     uint8

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewActivity creates new Activity struct based on given mesg. If mesg is nil or mesg.Num is not equal to Activity mesg number, it will return nil.
func NewActivity(mesg proto.Message) *Activity {
	if mesg.Num != typedef.MesgNumActivity {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Activity{
		Timestamp:      typeconv.ToUint32[typedef.DateTime](vals[253]),
		TotalTimerTime: typeconv.ToUint32[uint32](vals[0]),
		NumSessions:    typeconv.ToUint16[uint16](vals[1]),
		Type:           typeconv.ToEnum[typedef.Activity](vals[2]),
		Event:          typeconv.ToEnum[typedef.Event](vals[3]),
		EventType:      typeconv.ToEnum[typedef.EventType](vals[4]),
		LocalTimestamp: typeconv.ToUint32[typedef.LocalDateTime](vals[5]),
		EventGroup:     typeconv.ToUint8[uint8](vals[6]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts Activity into proto.Message.
func (m *Activity) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumActivity)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalTimerTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.TotalTimerTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.NumSessions != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.NumSessions
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Type) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = typeconv.ToEnum[byte](m.Type)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Event) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = typeconv.ToEnum[byte](m.Event)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.EventType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = typeconv.ToEnum[byte](m.EventType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.LocalTimestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = typeconv.ToUint32[uint32](m.LocalTimestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EventGroup != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.EventGroup
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of Activity's valid fields.
func (m *Activity) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.TotalTimerTime != basetype.Uint32Invalid {
		size++
	}
	if m.NumSessions != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Type) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Event) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.EventType) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.LocalTimestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.EventGroup != basetype.Uint8Invalid {
		size++
	}
	return size
}
