// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Activity is a Activity message.
type Activity struct {
	Timestamp      typedef.DateTime
	TotalTimerTime uint32 // Scale: 1000; Units: s; Exclude pauses
	NumSessions    uint16
	Type           typedef.Activity
	Event          typedef.Event
	EventType      typedef.EventType
	LocalTimestamp typedef.LocalDateTime // timestamp epoch expressed in local time, used to convert activity timestamps to local time
	EventGroup     uint8

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewActivity creates new Activity struct based on given mesg. If mesg is nil or mesg.Num is not equal to Activity mesg number, it will return nil.
func NewActivity(mesg proto.Message) *Activity {
	if mesg.Num != typedef.MesgNumActivity {
		return nil
	}

	vals := [256]any{ // Mark all values as invalid, replace only when specified.
		253: basetype.Uint32Invalid, /* Timestamp */
		0:   basetype.Uint32Invalid, /* TotalTimerTime */
		1:   basetype.Uint16Invalid, /* NumSessions */
		2:   basetype.EnumInvalid,   /* Type */
		3:   basetype.EnumInvalid,   /* Event */
		4:   basetype.EnumInvalid,   /* EventType */
		5:   basetype.Uint32Invalid, /* LocalTimestamp */
		6:   basetype.Uint8Invalid,  /* EventGroup */
	}

	for i := range mesg.Fields {
		if mesg.Fields[i].Value == nil {
			continue // keep the invalid value
		}
		vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
	}

	return &Activity{
		Timestamp:      typeconv.ToUint32[typedef.DateTime](vals[253]),
		TotalTimerTime: typeconv.ToUint32[uint32](vals[0]),
		NumSessions:    typeconv.ToUint16[uint16](vals[1]),
		Type:           typeconv.ToEnum[typedef.Activity](vals[2]),
		Event:          typeconv.ToEnum[typedef.Event](vals[3]),
		EventType:      typeconv.ToEnum[typedef.EventType](vals[4]),
		LocalTimestamp: typeconv.ToUint32[typedef.LocalDateTime](vals[5]),
		EventGroup:     typeconv.ToUint8[uint8](vals[6]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to Activity mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumActivity)
func (m Activity) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumActivity {
		return
	}

	vals := [256]any{
		253: m.Timestamp,
		0:   m.TotalTimerTime,
		1:   m.NumSessions,
		2:   m.Type,
		3:   m.Event,
		4:   m.EventType,
		5:   m.LocalTimestamp,
		6:   m.EventGroup,
	}

	for i := range mesg.Fields {
		mesg.Fields[i].Value = vals[mesg.Fields[i].Num]
	}
	mesg.DeveloperFields = m.DeveloperFields

}
