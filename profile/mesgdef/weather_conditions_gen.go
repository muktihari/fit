// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// WeatherConditions is a WeatherConditions message.
type WeatherConditions struct {
	Timestamp                typedef.DateTime      // time of update for current conditions, else forecast time
	WeatherReport            typedef.WeatherReport // Current or forecast
	Temperature              int8                  // Units: C;
	Condition                typedef.WeatherStatus // Corresponds to GSC Response weatherIcon field
	WindDirection            uint16                // Units: degrees;
	WindSpeed                uint16                // Scale: 1000; Units: m/s;
	PrecipitationProbability uint8                 // range 0-100
	TemperatureFeelsLike     int8                  // Units: C; Heat Index if GCS heatIdx above or equal to 90F or wind chill if GCS windChill below or equal to 32F
	RelativeHumidity         uint8
	Location                 string // string corresponding to GCS response location string
	ObservedAtTime           typedef.DateTime
	ObservedLocationLat      int32 // Units: semicircles;
	ObservedLocationLong     int32 // Units: semicircles;
	DayOfWeek                typedef.DayOfWeek
	HighTemperature          int8 // Units: C;
	LowTemperature           int8 // Units: C;

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewWeatherConditions creates new WeatherConditions struct based on given mesg. If mesg is nil or mesg.Num is not equal to WeatherConditions mesg number, it will return nil.
func NewWeatherConditions(mesg proto.Message) *WeatherConditions {
	if mesg.Num != typedef.MesgNumWeatherConditions {
		return nil
	}

	vals := [...]any{ // nil value will be converted to its corresponding invalid value by typeconv.
		253: nil, /* Timestamp */
		0:   nil, /* WeatherReport */
		1:   nil, /* Temperature */
		2:   nil, /* Condition */
		3:   nil, /* WindDirection */
		4:   nil, /* WindSpeed */
		5:   nil, /* PrecipitationProbability */
		6:   nil, /* TemperatureFeelsLike */
		7:   nil, /* RelativeHumidity */
		8:   nil, /* Location */
		9:   nil, /* ObservedAtTime */
		10:  nil, /* ObservedLocationLat */
		11:  nil, /* ObservedLocationLong */
		12:  nil, /* DayOfWeek */
		13:  nil, /* HighTemperature */
		14:  nil, /* LowTemperature */
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &WeatherConditions{
		Timestamp:                typeconv.ToUint32[typedef.DateTime](vals[253]),
		WeatherReport:            typeconv.ToEnum[typedef.WeatherReport](vals[0]),
		Temperature:              typeconv.ToSint8[int8](vals[1]),
		Condition:                typeconv.ToEnum[typedef.WeatherStatus](vals[2]),
		WindDirection:            typeconv.ToUint16[uint16](vals[3]),
		WindSpeed:                typeconv.ToUint16[uint16](vals[4]),
		PrecipitationProbability: typeconv.ToUint8[uint8](vals[5]),
		TemperatureFeelsLike:     typeconv.ToSint8[int8](vals[6]),
		RelativeHumidity:         typeconv.ToUint8[uint8](vals[7]),
		Location:                 typeconv.ToString[string](vals[8]),
		ObservedAtTime:           typeconv.ToUint32[typedef.DateTime](vals[9]),
		ObservedLocationLat:      typeconv.ToSint32[int32](vals[10]),
		ObservedLocationLong:     typeconv.ToSint32[int32](vals[11]),
		DayOfWeek:                typeconv.ToEnum[typedef.DayOfWeek](vals[12]),
		HighTemperature:          typeconv.ToSint8[int8](vals[13]),
		LowTemperature:           typeconv.ToSint8[int8](vals[14]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to WeatherConditions mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumWeatherConditions)
func (m *WeatherConditions) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumWeatherConditions {
		return
	}

	vals := [...]any{
		253: typeconv.ToUint32[uint32](m.Timestamp),
		0:   typeconv.ToEnum[byte](m.WeatherReport),
		1:   m.Temperature,
		2:   typeconv.ToEnum[byte](m.Condition),
		3:   m.WindDirection,
		4:   m.WindSpeed,
		5:   m.PrecipitationProbability,
		6:   m.TemperatureFeelsLike,
		7:   m.RelativeHumidity,
		8:   m.Location,
		9:   typeconv.ToUint32[uint32](m.ObservedAtTime),
		10:  m.ObservedLocationLat,
		11:  m.ObservedLocationLong,
		12:  typeconv.ToEnum[byte](m.DayOfWeek),
		13:  m.HighTemperature,
		14:  m.LowTemperature,
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		field.Value = vals[field.Num]
	}

	mesg.DeveloperFields = m.DeveloperFields
}
