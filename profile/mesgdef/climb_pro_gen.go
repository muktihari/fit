// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// ClimbPro is a ClimbPro message.
type ClimbPro struct {
	Timestamp     typedef.DateTime // Units: s;
	PositionLat   int32            // Units: semicircles;
	PositionLong  int32            // Units: semicircles;
	ClimbProEvent typedef.ClimbProEvent
	ClimbNumber   uint16
	ClimbCategory uint8
	CurrentDist   float32 // Units: m;

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewClimbPro creates new ClimbPro struct based on given mesg. If mesg is nil or mesg.Num is not equal to ClimbPro mesg number, it will return nil.
func NewClimbPro(mesg proto.Message) *ClimbPro {
	if mesg.Num != typedef.MesgNumClimbPro {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &ClimbPro{
		Timestamp:     typeconv.ToUint32[typedef.DateTime](vals[253]),
		PositionLat:   typeconv.ToSint32[int32](vals[0]),
		PositionLong:  typeconv.ToSint32[int32](vals[1]),
		ClimbProEvent: typeconv.ToEnum[typedef.ClimbProEvent](vals[2]),
		ClimbNumber:   typeconv.ToUint16[uint16](vals[3]),
		ClimbCategory: typeconv.ToUint8[uint8](vals[4]),
		CurrentDist:   typeconv.ToFloat32[float32](vals[5]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts ClimbPro into proto.Message.
func (m *ClimbPro) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumClimbPro)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.PositionLat != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.PositionLat
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.PositionLong != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.PositionLong
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.ClimbProEvent) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = typeconv.ToEnum[byte](m.ClimbProEvent)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ClimbNumber != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.ClimbNumber
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ClimbCategory != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.ClimbCategory
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.CurrentDist) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.CurrentDist
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of ClimbPro's valid fields.
func (m *ClimbPro) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.PositionLat != basetype.Sint32Invalid {
		size++
	}
	if m.PositionLong != basetype.Sint32Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.ClimbProEvent) != basetype.EnumInvalid {
		size++
	}
	if m.ClimbNumber != basetype.Uint16Invalid {
		size++
	}
	if m.ClimbCategory != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.CurrentDist) != basetype.Uint32Invalid {
		size++
	}
	return size
}
