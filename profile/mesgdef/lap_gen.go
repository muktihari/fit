// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Lap is a Lap message.
type Lap struct {
	MessageIndex                  typedef.MessageIndex
	Timestamp                     typedef.DateTime // Units: s; Lap end time.
	Event                         typedef.Event
	EventType                     typedef.EventType
	StartTime                     typedef.DateTime
	StartPositionLat              int32  // Units: semicircles;
	StartPositionLong             int32  // Units: semicircles;
	EndPositionLat                int32  // Units: semicircles;
	EndPositionLong               int32  // Units: semicircles;
	TotalElapsedTime              uint32 // Scale: 1000; Units: s; Time (includes pauses)
	TotalTimerTime                uint32 // Scale: 1000; Units: s; Timer Time (excludes pauses)
	TotalDistance                 uint32 // Scale: 100; Units: m;
	TotalCycles                   uint32 // Units: cycles;
	TotalCalories                 uint16 // Units: kcal;
	TotalFatCalories              uint16 // Units: kcal; If New Leaf
	AvgSpeed                      uint16 // Scale: 1000; Units: m/s;
	MaxSpeed                      uint16 // Scale: 1000; Units: m/s;
	AvgHeartRate                  uint8  // Units: bpm;
	MaxHeartRate                  uint8  // Units: bpm;
	AvgCadence                    uint8  // Units: rpm; total_cycles / total_timer_time if non_zero_avg_cadence otherwise total_cycles / total_elapsed_time
	MaxCadence                    uint8  // Units: rpm;
	AvgPower                      uint16 // Units: watts; total_power / total_timer_time if non_zero_avg_power otherwise total_power / total_elapsed_time
	MaxPower                      uint16 // Units: watts;
	TotalAscent                   uint16 // Units: m;
	TotalDescent                  uint16 // Units: m;
	Intensity                     typedef.Intensity
	LapTrigger                    typedef.LapTrigger
	Sport                         typedef.Sport
	EventGroup                    uint8
	NumLengths                    uint16 // Units: lengths; # of lengths of swim pool
	NormalizedPower               uint16 // Units: watts;
	LeftRightBalance              typedef.LeftRightBalance100
	FirstLengthIndex              uint16
	AvgStrokeDistance             uint16 // Scale: 100; Units: m;
	SwimStroke                    typedef.SwimStroke
	SubSport                      typedef.SubSport
	NumActiveLengths              uint16   // Units: lengths; # of active lengths of swim pool
	TotalWork                     uint32   // Units: J;
	AvgAltitude                   uint16   // Scale: 5; Offset: 500; Units: m;
	MaxAltitude                   uint16   // Scale: 5; Offset: 500; Units: m;
	GpsAccuracy                   uint8    // Units: m;
	AvgGrade                      int16    // Scale: 100; Units: %;
	AvgPosGrade                   int16    // Scale: 100; Units: %;
	AvgNegGrade                   int16    // Scale: 100; Units: %;
	MaxPosGrade                   int16    // Scale: 100; Units: %;
	MaxNegGrade                   int16    // Scale: 100; Units: %;
	AvgTemperature                int8     // Units: C;
	MaxTemperature                int8     // Units: C;
	TotalMovingTime               uint32   // Scale: 1000; Units: s;
	AvgPosVerticalSpeed           int16    // Scale: 1000; Units: m/s;
	AvgNegVerticalSpeed           int16    // Scale: 1000; Units: m/s;
	MaxPosVerticalSpeed           int16    // Scale: 1000; Units: m/s;
	MaxNegVerticalSpeed           int16    // Scale: 1000; Units: m/s;
	TimeInHrZone                  []uint32 // Scale: 1000; Array: [N]; Units: s;
	TimeInSpeedZone               []uint32 // Scale: 1000; Array: [N]; Units: s;
	TimeInCadenceZone             []uint32 // Scale: 1000; Array: [N]; Units: s;
	TimeInPowerZone               []uint32 // Scale: 1000; Array: [N]; Units: s;
	RepetitionNum                 uint16
	MinAltitude                   uint16 // Scale: 5; Offset: 500; Units: m;
	MinHeartRate                  uint8  // Units: bpm;
	WktStepIndex                  typedef.MessageIndex
	OpponentScore                 uint16
	StrokeCount                   []uint16 // Array: [N]; Units: counts; stroke_type enum used as the index
	ZoneCount                     []uint16 // Array: [N]; Units: counts; zone number used as the index
	AvgVerticalOscillation        uint16   // Scale: 10; Units: mm;
	AvgStanceTimePercent          uint16   // Scale: 100; Units: percent;
	AvgStanceTime                 uint16   // Scale: 10; Units: ms;
	AvgFractionalCadence          uint8    // Scale: 128; Units: rpm; fractional part of the avg_cadence
	MaxFractionalCadence          uint8    // Scale: 128; Units: rpm; fractional part of the max_cadence
	TotalFractionalCycles         uint8    // Scale: 128; Units: cycles; fractional part of the total_cycles
	PlayerScore                   uint16
	AvgTotalHemoglobinConc        []uint16 // Scale: 100; Array: [N]; Units: g/dL; Avg saturated and unsaturated hemoglobin
	MinTotalHemoglobinConc        []uint16 // Scale: 100; Array: [N]; Units: g/dL; Min saturated and unsaturated hemoglobin
	MaxTotalHemoglobinConc        []uint16 // Scale: 100; Array: [N]; Units: g/dL; Max saturated and unsaturated hemoglobin
	AvgSaturatedHemoglobinPercent []uint16 // Scale: 10; Array: [N]; Units: %; Avg percentage of hemoglobin saturated with oxygen
	MinSaturatedHemoglobinPercent []uint16 // Scale: 10; Array: [N]; Units: %; Min percentage of hemoglobin saturated with oxygen
	MaxSaturatedHemoglobinPercent []uint16 // Scale: 10; Array: [N]; Units: %; Max percentage of hemoglobin saturated with oxygen
	AvgLeftTorqueEffectiveness    uint8    // Scale: 2; Units: percent;
	AvgRightTorqueEffectiveness   uint8    // Scale: 2; Units: percent;
	AvgLeftPedalSmoothness        uint8    // Scale: 2; Units: percent;
	AvgRightPedalSmoothness       uint8    // Scale: 2; Units: percent;
	AvgCombinedPedalSmoothness    uint8    // Scale: 2; Units: percent;
	TimeStanding                  uint32   // Scale: 1000; Units: s; Total time spent in the standing position
	StandCount                    uint16   // Number of transitions to the standing state
	AvgLeftPco                    int8     // Units: mm; Average left platform center offset
	AvgRightPco                   int8     // Units: mm; Average right platform center offset
	AvgLeftPowerPhase             []uint8  // Scale: 0.7111111; Array: [N]; Units: degrees; Average left power phase angles. Data value indexes defined by power_phase_type.
	AvgLeftPowerPhasePeak         []uint8  // Scale: 0.7111111; Array: [N]; Units: degrees; Average left power phase peak angles. Data value indexes defined by power_phase_type.
	AvgRightPowerPhase            []uint8  // Scale: 0.7111111; Array: [N]; Units: degrees; Average right power phase angles. Data value indexes defined by power_phase_type.
	AvgRightPowerPhasePeak        []uint8  // Scale: 0.7111111; Array: [N]; Units: degrees; Average right power phase peak angles. Data value indexes defined by power_phase_type.
	AvgPowerPosition              []uint16 // Array: [N]; Units: watts; Average power by position. Data value indexes defined by rider_position_type.
	MaxPowerPosition              []uint16 // Array: [N]; Units: watts; Maximum power by position. Data value indexes defined by rider_position_type.
	AvgCadencePosition            []uint8  // Array: [N]; Units: rpm; Average cadence by position. Data value indexes defined by rider_position_type.
	MaxCadencePosition            []uint8  // Array: [N]; Units: rpm; Maximum cadence by position. Data value indexes defined by rider_position_type.
	EnhancedAvgSpeed              uint32   // Scale: 1000; Units: m/s;
	EnhancedMaxSpeed              uint32   // Scale: 1000; Units: m/s;
	EnhancedAvgAltitude           uint32   // Scale: 5; Offset: 500; Units: m;
	EnhancedMinAltitude           uint32   // Scale: 5; Offset: 500; Units: m;
	EnhancedMaxAltitude           uint32   // Scale: 5; Offset: 500; Units: m;
	AvgLevMotorPower              uint16   // Units: watts; lev average motor power during lap
	MaxLevMotorPower              uint16   // Units: watts; lev maximum motor power during lap
	LevBatteryConsumption         uint8    // Scale: 2; Units: percent; lev battery consumption during lap
	AvgVerticalRatio              uint16   // Scale: 100; Units: percent;
	AvgStanceTimeBalance          uint16   // Scale: 100; Units: percent;
	AvgStepLength                 uint16   // Scale: 10; Units: mm;
	AvgVam                        uint16   // Scale: 1000; Units: m/s;
	AvgDepth                      uint32   // Scale: 1000; Units: m; 0 if above water
	MaxDepth                      uint32   // Scale: 1000; Units: m; 0 if above water
	MinTemperature                int8     // Units: C;
	EnhancedAvgRespirationRate    uint16   // Scale: 100; Units: Breaths/min;
	EnhancedMaxRespirationRate    uint16   // Scale: 100; Units: Breaths/min;
	AvgRespirationRate            uint8
	MaxRespirationRate            uint8
	TotalGrit                     float32 // Units: kGrit; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	TotalFlow                     float32 // Units: Flow; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	JumpCount                     uint16
	AvgGrit                       float32 // Units: kGrit; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	AvgFlow                       float32 // Units: Flow; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	TotalFractionalAscent         uint8   // Scale: 100; Units: m; fractional part of total_ascent
	TotalFractionalDescent        uint8   // Scale: 100; Units: m; fractional part of total_descent
	AvgCoreTemperature            uint16  // Scale: 100; Units: C;
	MinCoreTemperature            uint16  // Scale: 100; Units: C;
	MaxCoreTemperature            uint16  // Scale: 100; Units: C;

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewLap creates new Lap struct based on given mesg. If mesg is nil or mesg.Num is not equal to Lap mesg number, it will return nil.
func NewLap(mesg proto.Message) *Lap {
	if mesg.Num != typedef.MesgNumLap {
		return nil
	}

	vals := [255]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Lap{
		MessageIndex:                  typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		Timestamp:                     typeconv.ToUint32[typedef.DateTime](vals[253]),
		Event:                         typeconv.ToEnum[typedef.Event](vals[0]),
		EventType:                     typeconv.ToEnum[typedef.EventType](vals[1]),
		StartTime:                     typeconv.ToUint32[typedef.DateTime](vals[2]),
		StartPositionLat:              typeconv.ToSint32[int32](vals[3]),
		StartPositionLong:             typeconv.ToSint32[int32](vals[4]),
		EndPositionLat:                typeconv.ToSint32[int32](vals[5]),
		EndPositionLong:               typeconv.ToSint32[int32](vals[6]),
		TotalElapsedTime:              typeconv.ToUint32[uint32](vals[7]),
		TotalTimerTime:                typeconv.ToUint32[uint32](vals[8]),
		TotalDistance:                 typeconv.ToUint32[uint32](vals[9]),
		TotalCycles:                   typeconv.ToUint32[uint32](vals[10]),
		TotalCalories:                 typeconv.ToUint16[uint16](vals[11]),
		TotalFatCalories:              typeconv.ToUint16[uint16](vals[12]),
		AvgSpeed:                      typeconv.ToUint16[uint16](vals[13]),
		MaxSpeed:                      typeconv.ToUint16[uint16](vals[14]),
		AvgHeartRate:                  typeconv.ToUint8[uint8](vals[15]),
		MaxHeartRate:                  typeconv.ToUint8[uint8](vals[16]),
		AvgCadence:                    typeconv.ToUint8[uint8](vals[17]),
		MaxCadence:                    typeconv.ToUint8[uint8](vals[18]),
		AvgPower:                      typeconv.ToUint16[uint16](vals[19]),
		MaxPower:                      typeconv.ToUint16[uint16](vals[20]),
		TotalAscent:                   typeconv.ToUint16[uint16](vals[21]),
		TotalDescent:                  typeconv.ToUint16[uint16](vals[22]),
		Intensity:                     typeconv.ToEnum[typedef.Intensity](vals[23]),
		LapTrigger:                    typeconv.ToEnum[typedef.LapTrigger](vals[24]),
		Sport:                         typeconv.ToEnum[typedef.Sport](vals[25]),
		EventGroup:                    typeconv.ToUint8[uint8](vals[26]),
		NumLengths:                    typeconv.ToUint16[uint16](vals[32]),
		NormalizedPower:               typeconv.ToUint16[uint16](vals[33]),
		LeftRightBalance:              typeconv.ToUint16[typedef.LeftRightBalance100](vals[34]),
		FirstLengthIndex:              typeconv.ToUint16[uint16](vals[35]),
		AvgStrokeDistance:             typeconv.ToUint16[uint16](vals[37]),
		SwimStroke:                    typeconv.ToEnum[typedef.SwimStroke](vals[38]),
		SubSport:                      typeconv.ToEnum[typedef.SubSport](vals[39]),
		NumActiveLengths:              typeconv.ToUint16[uint16](vals[40]),
		TotalWork:                     typeconv.ToUint32[uint32](vals[41]),
		AvgAltitude:                   typeconv.ToUint16[uint16](vals[42]),
		MaxAltitude:                   typeconv.ToUint16[uint16](vals[43]),
		GpsAccuracy:                   typeconv.ToUint8[uint8](vals[44]),
		AvgGrade:                      typeconv.ToSint16[int16](vals[45]),
		AvgPosGrade:                   typeconv.ToSint16[int16](vals[46]),
		AvgNegGrade:                   typeconv.ToSint16[int16](vals[47]),
		MaxPosGrade:                   typeconv.ToSint16[int16](vals[48]),
		MaxNegGrade:                   typeconv.ToSint16[int16](vals[49]),
		AvgTemperature:                typeconv.ToSint8[int8](vals[50]),
		MaxTemperature:                typeconv.ToSint8[int8](vals[51]),
		TotalMovingTime:               typeconv.ToUint32[uint32](vals[52]),
		AvgPosVerticalSpeed:           typeconv.ToSint16[int16](vals[53]),
		AvgNegVerticalSpeed:           typeconv.ToSint16[int16](vals[54]),
		MaxPosVerticalSpeed:           typeconv.ToSint16[int16](vals[55]),
		MaxNegVerticalSpeed:           typeconv.ToSint16[int16](vals[56]),
		TimeInHrZone:                  typeconv.ToSliceUint32[uint32](vals[57]),
		TimeInSpeedZone:               typeconv.ToSliceUint32[uint32](vals[58]),
		TimeInCadenceZone:             typeconv.ToSliceUint32[uint32](vals[59]),
		TimeInPowerZone:               typeconv.ToSliceUint32[uint32](vals[60]),
		RepetitionNum:                 typeconv.ToUint16[uint16](vals[61]),
		MinAltitude:                   typeconv.ToUint16[uint16](vals[62]),
		MinHeartRate:                  typeconv.ToUint8[uint8](vals[63]),
		WktStepIndex:                  typeconv.ToUint16[typedef.MessageIndex](vals[71]),
		OpponentScore:                 typeconv.ToUint16[uint16](vals[74]),
		StrokeCount:                   typeconv.ToSliceUint16[uint16](vals[75]),
		ZoneCount:                     typeconv.ToSliceUint16[uint16](vals[76]),
		AvgVerticalOscillation:        typeconv.ToUint16[uint16](vals[77]),
		AvgStanceTimePercent:          typeconv.ToUint16[uint16](vals[78]),
		AvgStanceTime:                 typeconv.ToUint16[uint16](vals[79]),
		AvgFractionalCadence:          typeconv.ToUint8[uint8](vals[80]),
		MaxFractionalCadence:          typeconv.ToUint8[uint8](vals[81]),
		TotalFractionalCycles:         typeconv.ToUint8[uint8](vals[82]),
		PlayerScore:                   typeconv.ToUint16[uint16](vals[83]),
		AvgTotalHemoglobinConc:        typeconv.ToSliceUint16[uint16](vals[84]),
		MinTotalHemoglobinConc:        typeconv.ToSliceUint16[uint16](vals[85]),
		MaxTotalHemoglobinConc:        typeconv.ToSliceUint16[uint16](vals[86]),
		AvgSaturatedHemoglobinPercent: typeconv.ToSliceUint16[uint16](vals[87]),
		MinSaturatedHemoglobinPercent: typeconv.ToSliceUint16[uint16](vals[88]),
		MaxSaturatedHemoglobinPercent: typeconv.ToSliceUint16[uint16](vals[89]),
		AvgLeftTorqueEffectiveness:    typeconv.ToUint8[uint8](vals[91]),
		AvgRightTorqueEffectiveness:   typeconv.ToUint8[uint8](vals[92]),
		AvgLeftPedalSmoothness:        typeconv.ToUint8[uint8](vals[93]),
		AvgRightPedalSmoothness:       typeconv.ToUint8[uint8](vals[94]),
		AvgCombinedPedalSmoothness:    typeconv.ToUint8[uint8](vals[95]),
		TimeStanding:                  typeconv.ToUint32[uint32](vals[98]),
		StandCount:                    typeconv.ToUint16[uint16](vals[99]),
		AvgLeftPco:                    typeconv.ToSint8[int8](vals[100]),
		AvgRightPco:                   typeconv.ToSint8[int8](vals[101]),
		AvgLeftPowerPhase:             typeconv.ToSliceUint8[uint8](vals[102]),
		AvgLeftPowerPhasePeak:         typeconv.ToSliceUint8[uint8](vals[103]),
		AvgRightPowerPhase:            typeconv.ToSliceUint8[uint8](vals[104]),
		AvgRightPowerPhasePeak:        typeconv.ToSliceUint8[uint8](vals[105]),
		AvgPowerPosition:              typeconv.ToSliceUint16[uint16](vals[106]),
		MaxPowerPosition:              typeconv.ToSliceUint16[uint16](vals[107]),
		AvgCadencePosition:            typeconv.ToSliceUint8[uint8](vals[108]),
		MaxCadencePosition:            typeconv.ToSliceUint8[uint8](vals[109]),
		EnhancedAvgSpeed:              typeconv.ToUint32[uint32](vals[110]),
		EnhancedMaxSpeed:              typeconv.ToUint32[uint32](vals[111]),
		EnhancedAvgAltitude:           typeconv.ToUint32[uint32](vals[112]),
		EnhancedMinAltitude:           typeconv.ToUint32[uint32](vals[113]),
		EnhancedMaxAltitude:           typeconv.ToUint32[uint32](vals[114]),
		AvgLevMotorPower:              typeconv.ToUint16[uint16](vals[115]),
		MaxLevMotorPower:              typeconv.ToUint16[uint16](vals[116]),
		LevBatteryConsumption:         typeconv.ToUint8[uint8](vals[117]),
		AvgVerticalRatio:              typeconv.ToUint16[uint16](vals[118]),
		AvgStanceTimeBalance:          typeconv.ToUint16[uint16](vals[119]),
		AvgStepLength:                 typeconv.ToUint16[uint16](vals[120]),
		AvgVam:                        typeconv.ToUint16[uint16](vals[121]),
		AvgDepth:                      typeconv.ToUint32[uint32](vals[122]),
		MaxDepth:                      typeconv.ToUint32[uint32](vals[123]),
		MinTemperature:                typeconv.ToSint8[int8](vals[124]),
		EnhancedAvgRespirationRate:    typeconv.ToUint16[uint16](vals[136]),
		EnhancedMaxRespirationRate:    typeconv.ToUint16[uint16](vals[137]),
		AvgRespirationRate:            typeconv.ToUint8[uint8](vals[147]),
		MaxRespirationRate:            typeconv.ToUint8[uint8](vals[148]),
		TotalGrit:                     typeconv.ToFloat32[float32](vals[149]),
		TotalFlow:                     typeconv.ToFloat32[float32](vals[150]),
		JumpCount:                     typeconv.ToUint16[uint16](vals[151]),
		AvgGrit:                       typeconv.ToFloat32[float32](vals[153]),
		AvgFlow:                       typeconv.ToFloat32[float32](vals[154]),
		TotalFractionalAscent:         typeconv.ToUint8[uint8](vals[156]),
		TotalFractionalDescent:        typeconv.ToUint8[uint8](vals[157]),
		AvgCoreTemperature:            typeconv.ToUint16[uint16](vals[158]),
		MinCoreTemperature:            typeconv.ToUint16[uint16](vals[159]),
		MaxCoreTemperature:            typeconv.ToUint16[uint16](vals[160]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts Lap into proto.Message.
func (m *Lap) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumLap)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = typeconv.ToUint16[uint16](m.MessageIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Event) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = typeconv.ToEnum[byte](m.Event)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.EventType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = typeconv.ToEnum[byte](m.EventType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.StartTime) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = typeconv.ToUint32[uint32](m.StartTime)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.StartPositionLat != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.StartPositionLat
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.StartPositionLong != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.StartPositionLong
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EndPositionLat != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.EndPositionLat
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EndPositionLong != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.EndPositionLong
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalElapsedTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = m.TotalElapsedTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalTimerTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = m.TotalTimerTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalDistance != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = m.TotalDistance
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalCycles != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = m.TotalCycles
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalCalories != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 11)
		field.Value = m.TotalCalories
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalFatCalories != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 12)
		field.Value = m.TotalFatCalories
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgSpeed != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 13)
		field.Value = m.AvgSpeed
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxSpeed != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 14)
		field.Value = m.MaxSpeed
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgHeartRate != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 15)
		field.Value = m.AvgHeartRate
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxHeartRate != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 16)
		field.Value = m.MaxHeartRate
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgCadence != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 17)
		field.Value = m.AvgCadence
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxCadence != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 18)
		field.Value = m.MaxCadence
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgPower != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 19)
		field.Value = m.AvgPower
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxPower != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 20)
		field.Value = m.MaxPower
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalAscent != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 21)
		field.Value = m.TotalAscent
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalDescent != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 22)
		field.Value = m.TotalDescent
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Intensity) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 23)
		field.Value = typeconv.ToEnum[byte](m.Intensity)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.LapTrigger) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 24)
		field.Value = typeconv.ToEnum[byte](m.LapTrigger)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Sport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 25)
		field.Value = typeconv.ToEnum[byte](m.Sport)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EventGroup != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 26)
		field.Value = m.EventGroup
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.NumLengths != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 32)
		field.Value = m.NumLengths
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.NormalizedPower != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 33)
		field.Value = m.NormalizedPower
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint16[uint16](m.LeftRightBalance) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 34)
		field.Value = typeconv.ToUint16[uint16](m.LeftRightBalance)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.FirstLengthIndex != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 35)
		field.Value = m.FirstLengthIndex
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgStrokeDistance != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 37)
		field.Value = m.AvgStrokeDistance
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.SwimStroke) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 38)
		field.Value = typeconv.ToEnum[byte](m.SwimStroke)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.SubSport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 39)
		field.Value = typeconv.ToEnum[byte](m.SubSport)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.NumActiveLengths != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 40)
		field.Value = m.NumActiveLengths
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalWork != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 41)
		field.Value = m.TotalWork
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgAltitude != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 42)
		field.Value = m.AvgAltitude
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxAltitude != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 43)
		field.Value = m.MaxAltitude
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.GpsAccuracy != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 44)
		field.Value = m.GpsAccuracy
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgGrade != basetype.Sint16Invalid {
		field := fac.CreateField(mesg.Num, 45)
		field.Value = m.AvgGrade
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgPosGrade != basetype.Sint16Invalid {
		field := fac.CreateField(mesg.Num, 46)
		field.Value = m.AvgPosGrade
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgNegGrade != basetype.Sint16Invalid {
		field := fac.CreateField(mesg.Num, 47)
		field.Value = m.AvgNegGrade
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxPosGrade != basetype.Sint16Invalid {
		field := fac.CreateField(mesg.Num, 48)
		field.Value = m.MaxPosGrade
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxNegGrade != basetype.Sint16Invalid {
		field := fac.CreateField(mesg.Num, 49)
		field.Value = m.MaxNegGrade
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgTemperature != basetype.Sint8Invalid {
		field := fac.CreateField(mesg.Num, 50)
		field.Value = m.AvgTemperature
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxTemperature != basetype.Sint8Invalid {
		field := fac.CreateField(mesg.Num, 51)
		field.Value = m.MaxTemperature
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalMovingTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 52)
		field.Value = m.TotalMovingTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgPosVerticalSpeed != basetype.Sint16Invalid {
		field := fac.CreateField(mesg.Num, 53)
		field.Value = m.AvgPosVerticalSpeed
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgNegVerticalSpeed != basetype.Sint16Invalid {
		field := fac.CreateField(mesg.Num, 54)
		field.Value = m.AvgNegVerticalSpeed
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxPosVerticalSpeed != basetype.Sint16Invalid {
		field := fac.CreateField(mesg.Num, 55)
		field.Value = m.MaxPosVerticalSpeed
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxNegVerticalSpeed != basetype.Sint16Invalid {
		field := fac.CreateField(mesg.Num, 56)
		field.Value = m.MaxNegVerticalSpeed
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimeInHrZone != nil {
		field := fac.CreateField(mesg.Num, 57)
		field.Value = m.TimeInHrZone
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimeInSpeedZone != nil {
		field := fac.CreateField(mesg.Num, 58)
		field.Value = m.TimeInSpeedZone
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimeInCadenceZone != nil {
		field := fac.CreateField(mesg.Num, 59)
		field.Value = m.TimeInCadenceZone
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimeInPowerZone != nil {
		field := fac.CreateField(mesg.Num, 60)
		field.Value = m.TimeInPowerZone
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.RepetitionNum != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 61)
		field.Value = m.RepetitionNum
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MinAltitude != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 62)
		field.Value = m.MinAltitude
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MinHeartRate != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 63)
		field.Value = m.MinHeartRate
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint16[uint16](m.WktStepIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 71)
		field.Value = typeconv.ToUint16[uint16](m.WktStepIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.OpponentScore != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 74)
		field.Value = m.OpponentScore
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.StrokeCount != nil {
		field := fac.CreateField(mesg.Num, 75)
		field.Value = m.StrokeCount
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ZoneCount != nil {
		field := fac.CreateField(mesg.Num, 76)
		field.Value = m.ZoneCount
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgVerticalOscillation != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 77)
		field.Value = m.AvgVerticalOscillation
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgStanceTimePercent != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 78)
		field.Value = m.AvgStanceTimePercent
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgStanceTime != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 79)
		field.Value = m.AvgStanceTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgFractionalCadence != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 80)
		field.Value = m.AvgFractionalCadence
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxFractionalCadence != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 81)
		field.Value = m.MaxFractionalCadence
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalFractionalCycles != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 82)
		field.Value = m.TotalFractionalCycles
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.PlayerScore != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 83)
		field.Value = m.PlayerScore
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgTotalHemoglobinConc != nil {
		field := fac.CreateField(mesg.Num, 84)
		field.Value = m.AvgTotalHemoglobinConc
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MinTotalHemoglobinConc != nil {
		field := fac.CreateField(mesg.Num, 85)
		field.Value = m.MinTotalHemoglobinConc
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxTotalHemoglobinConc != nil {
		field := fac.CreateField(mesg.Num, 86)
		field.Value = m.MaxTotalHemoglobinConc
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgSaturatedHemoglobinPercent != nil {
		field := fac.CreateField(mesg.Num, 87)
		field.Value = m.AvgSaturatedHemoglobinPercent
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MinSaturatedHemoglobinPercent != nil {
		field := fac.CreateField(mesg.Num, 88)
		field.Value = m.MinSaturatedHemoglobinPercent
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxSaturatedHemoglobinPercent != nil {
		field := fac.CreateField(mesg.Num, 89)
		field.Value = m.MaxSaturatedHemoglobinPercent
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgLeftTorqueEffectiveness != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 91)
		field.Value = m.AvgLeftTorqueEffectiveness
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgRightTorqueEffectiveness != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 92)
		field.Value = m.AvgRightTorqueEffectiveness
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgLeftPedalSmoothness != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 93)
		field.Value = m.AvgLeftPedalSmoothness
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgRightPedalSmoothness != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 94)
		field.Value = m.AvgRightPedalSmoothness
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgCombinedPedalSmoothness != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 95)
		field.Value = m.AvgCombinedPedalSmoothness
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimeStanding != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 98)
		field.Value = m.TimeStanding
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.StandCount != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 99)
		field.Value = m.StandCount
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgLeftPco != basetype.Sint8Invalid {
		field := fac.CreateField(mesg.Num, 100)
		field.Value = m.AvgLeftPco
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgRightPco != basetype.Sint8Invalid {
		field := fac.CreateField(mesg.Num, 101)
		field.Value = m.AvgRightPco
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgLeftPowerPhase != nil {
		field := fac.CreateField(mesg.Num, 102)
		field.Value = m.AvgLeftPowerPhase
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgLeftPowerPhasePeak != nil {
		field := fac.CreateField(mesg.Num, 103)
		field.Value = m.AvgLeftPowerPhasePeak
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgRightPowerPhase != nil {
		field := fac.CreateField(mesg.Num, 104)
		field.Value = m.AvgRightPowerPhase
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgRightPowerPhasePeak != nil {
		field := fac.CreateField(mesg.Num, 105)
		field.Value = m.AvgRightPowerPhasePeak
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgPowerPosition != nil {
		field := fac.CreateField(mesg.Num, 106)
		field.Value = m.AvgPowerPosition
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxPowerPosition != nil {
		field := fac.CreateField(mesg.Num, 107)
		field.Value = m.MaxPowerPosition
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgCadencePosition != nil {
		field := fac.CreateField(mesg.Num, 108)
		field.Value = m.AvgCadencePosition
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxCadencePosition != nil {
		field := fac.CreateField(mesg.Num, 109)
		field.Value = m.MaxCadencePosition
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EnhancedAvgSpeed != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 110)
		field.Value = m.EnhancedAvgSpeed
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EnhancedMaxSpeed != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 111)
		field.Value = m.EnhancedMaxSpeed
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EnhancedAvgAltitude != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 112)
		field.Value = m.EnhancedAvgAltitude
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EnhancedMinAltitude != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 113)
		field.Value = m.EnhancedMinAltitude
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EnhancedMaxAltitude != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 114)
		field.Value = m.EnhancedMaxAltitude
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgLevMotorPower != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 115)
		field.Value = m.AvgLevMotorPower
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxLevMotorPower != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 116)
		field.Value = m.MaxLevMotorPower
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.LevBatteryConsumption != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 117)
		field.Value = m.LevBatteryConsumption
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgVerticalRatio != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 118)
		field.Value = m.AvgVerticalRatio
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgStanceTimeBalance != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 119)
		field.Value = m.AvgStanceTimeBalance
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgStepLength != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 120)
		field.Value = m.AvgStepLength
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgVam != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 121)
		field.Value = m.AvgVam
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgDepth != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 122)
		field.Value = m.AvgDepth
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxDepth != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 123)
		field.Value = m.MaxDepth
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MinTemperature != basetype.Sint8Invalid {
		field := fac.CreateField(mesg.Num, 124)
		field.Value = m.MinTemperature
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EnhancedAvgRespirationRate != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 136)
		field.Value = m.EnhancedAvgRespirationRate
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EnhancedMaxRespirationRate != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 137)
		field.Value = m.EnhancedMaxRespirationRate
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgRespirationRate != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 147)
		field.Value = m.AvgRespirationRate
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxRespirationRate != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 148)
		field.Value = m.MaxRespirationRate
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.TotalGrit) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 149)
		field.Value = m.TotalGrit
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.TotalFlow) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 150)
		field.Value = m.TotalFlow
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.JumpCount != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 151)
		field.Value = m.JumpCount
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.AvgGrit) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 153)
		field.Value = m.AvgGrit
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.AvgFlow) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 154)
		field.Value = m.AvgFlow
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalFractionalAscent != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 156)
		field.Value = m.TotalFractionalAscent
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalFractionalDescent != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 157)
		field.Value = m.TotalFractionalDescent
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgCoreTemperature != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 158)
		field.Value = m.AvgCoreTemperature
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MinCoreTemperature != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 159)
		field.Value = m.MinCoreTemperature
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxCoreTemperature != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 160)
		field.Value = m.MaxCoreTemperature
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of Lap's valid fields.
func (m *Lap) size() byte {
	var size byte
	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Event) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.EventType) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.StartTime) != basetype.Uint32Invalid {
		size++
	}
	if m.StartPositionLat != basetype.Sint32Invalid {
		size++
	}
	if m.StartPositionLong != basetype.Sint32Invalid {
		size++
	}
	if m.EndPositionLat != basetype.Sint32Invalid {
		size++
	}
	if m.EndPositionLong != basetype.Sint32Invalid {
		size++
	}
	if m.TotalElapsedTime != basetype.Uint32Invalid {
		size++
	}
	if m.TotalTimerTime != basetype.Uint32Invalid {
		size++
	}
	if m.TotalDistance != basetype.Uint32Invalid {
		size++
	}
	if m.TotalCycles != basetype.Uint32Invalid {
		size++
	}
	if m.TotalCalories != basetype.Uint16Invalid {
		size++
	}
	if m.TotalFatCalories != basetype.Uint16Invalid {
		size++
	}
	if m.AvgSpeed != basetype.Uint16Invalid {
		size++
	}
	if m.MaxSpeed != basetype.Uint16Invalid {
		size++
	}
	if m.AvgHeartRate != basetype.Uint8Invalid {
		size++
	}
	if m.MaxHeartRate != basetype.Uint8Invalid {
		size++
	}
	if m.AvgCadence != basetype.Uint8Invalid {
		size++
	}
	if m.MaxCadence != basetype.Uint8Invalid {
		size++
	}
	if m.AvgPower != basetype.Uint16Invalid {
		size++
	}
	if m.MaxPower != basetype.Uint16Invalid {
		size++
	}
	if m.TotalAscent != basetype.Uint16Invalid {
		size++
	}
	if m.TotalDescent != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Intensity) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.LapTrigger) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Sport) != basetype.EnumInvalid {
		size++
	}
	if m.EventGroup != basetype.Uint8Invalid {
		size++
	}
	if m.NumLengths != basetype.Uint16Invalid {
		size++
	}
	if m.NormalizedPower != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint16[uint16](m.LeftRightBalance) != basetype.Uint16Invalid {
		size++
	}
	if m.FirstLengthIndex != basetype.Uint16Invalid {
		size++
	}
	if m.AvgStrokeDistance != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.SwimStroke) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.SubSport) != basetype.EnumInvalid {
		size++
	}
	if m.NumActiveLengths != basetype.Uint16Invalid {
		size++
	}
	if m.TotalWork != basetype.Uint32Invalid {
		size++
	}
	if m.AvgAltitude != basetype.Uint16Invalid {
		size++
	}
	if m.MaxAltitude != basetype.Uint16Invalid {
		size++
	}
	if m.GpsAccuracy != basetype.Uint8Invalid {
		size++
	}
	if m.AvgGrade != basetype.Sint16Invalid {
		size++
	}
	if m.AvgPosGrade != basetype.Sint16Invalid {
		size++
	}
	if m.AvgNegGrade != basetype.Sint16Invalid {
		size++
	}
	if m.MaxPosGrade != basetype.Sint16Invalid {
		size++
	}
	if m.MaxNegGrade != basetype.Sint16Invalid {
		size++
	}
	if m.AvgTemperature != basetype.Sint8Invalid {
		size++
	}
	if m.MaxTemperature != basetype.Sint8Invalid {
		size++
	}
	if m.TotalMovingTime != basetype.Uint32Invalid {
		size++
	}
	if m.AvgPosVerticalSpeed != basetype.Sint16Invalid {
		size++
	}
	if m.AvgNegVerticalSpeed != basetype.Sint16Invalid {
		size++
	}
	if m.MaxPosVerticalSpeed != basetype.Sint16Invalid {
		size++
	}
	if m.MaxNegVerticalSpeed != basetype.Sint16Invalid {
		size++
	}
	if m.TimeInHrZone != nil {
		size++
	}
	if m.TimeInSpeedZone != nil {
		size++
	}
	if m.TimeInCadenceZone != nil {
		size++
	}
	if m.TimeInPowerZone != nil {
		size++
	}
	if m.RepetitionNum != basetype.Uint16Invalid {
		size++
	}
	if m.MinAltitude != basetype.Uint16Invalid {
		size++
	}
	if m.MinHeartRate != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToUint16[uint16](m.WktStepIndex) != basetype.Uint16Invalid {
		size++
	}
	if m.OpponentScore != basetype.Uint16Invalid {
		size++
	}
	if m.StrokeCount != nil {
		size++
	}
	if m.ZoneCount != nil {
		size++
	}
	if m.AvgVerticalOscillation != basetype.Uint16Invalid {
		size++
	}
	if m.AvgStanceTimePercent != basetype.Uint16Invalid {
		size++
	}
	if m.AvgStanceTime != basetype.Uint16Invalid {
		size++
	}
	if m.AvgFractionalCadence != basetype.Uint8Invalid {
		size++
	}
	if m.MaxFractionalCadence != basetype.Uint8Invalid {
		size++
	}
	if m.TotalFractionalCycles != basetype.Uint8Invalid {
		size++
	}
	if m.PlayerScore != basetype.Uint16Invalid {
		size++
	}
	if m.AvgTotalHemoglobinConc != nil {
		size++
	}
	if m.MinTotalHemoglobinConc != nil {
		size++
	}
	if m.MaxTotalHemoglobinConc != nil {
		size++
	}
	if m.AvgSaturatedHemoglobinPercent != nil {
		size++
	}
	if m.MinSaturatedHemoglobinPercent != nil {
		size++
	}
	if m.MaxSaturatedHemoglobinPercent != nil {
		size++
	}
	if m.AvgLeftTorqueEffectiveness != basetype.Uint8Invalid {
		size++
	}
	if m.AvgRightTorqueEffectiveness != basetype.Uint8Invalid {
		size++
	}
	if m.AvgLeftPedalSmoothness != basetype.Uint8Invalid {
		size++
	}
	if m.AvgRightPedalSmoothness != basetype.Uint8Invalid {
		size++
	}
	if m.AvgCombinedPedalSmoothness != basetype.Uint8Invalid {
		size++
	}
	if m.TimeStanding != basetype.Uint32Invalid {
		size++
	}
	if m.StandCount != basetype.Uint16Invalid {
		size++
	}
	if m.AvgLeftPco != basetype.Sint8Invalid {
		size++
	}
	if m.AvgRightPco != basetype.Sint8Invalid {
		size++
	}
	if m.AvgLeftPowerPhase != nil {
		size++
	}
	if m.AvgLeftPowerPhasePeak != nil {
		size++
	}
	if m.AvgRightPowerPhase != nil {
		size++
	}
	if m.AvgRightPowerPhasePeak != nil {
		size++
	}
	if m.AvgPowerPosition != nil {
		size++
	}
	if m.MaxPowerPosition != nil {
		size++
	}
	if m.AvgCadencePosition != nil {
		size++
	}
	if m.MaxCadencePosition != nil {
		size++
	}
	if m.EnhancedAvgSpeed != basetype.Uint32Invalid {
		size++
	}
	if m.EnhancedMaxSpeed != basetype.Uint32Invalid {
		size++
	}
	if m.EnhancedAvgAltitude != basetype.Uint32Invalid {
		size++
	}
	if m.EnhancedMinAltitude != basetype.Uint32Invalid {
		size++
	}
	if m.EnhancedMaxAltitude != basetype.Uint32Invalid {
		size++
	}
	if m.AvgLevMotorPower != basetype.Uint16Invalid {
		size++
	}
	if m.MaxLevMotorPower != basetype.Uint16Invalid {
		size++
	}
	if m.LevBatteryConsumption != basetype.Uint8Invalid {
		size++
	}
	if m.AvgVerticalRatio != basetype.Uint16Invalid {
		size++
	}
	if m.AvgStanceTimeBalance != basetype.Uint16Invalid {
		size++
	}
	if m.AvgStepLength != basetype.Uint16Invalid {
		size++
	}
	if m.AvgVam != basetype.Uint16Invalid {
		size++
	}
	if m.AvgDepth != basetype.Uint32Invalid {
		size++
	}
	if m.MaxDepth != basetype.Uint32Invalid {
		size++
	}
	if m.MinTemperature != basetype.Sint8Invalid {
		size++
	}
	if m.EnhancedAvgRespirationRate != basetype.Uint16Invalid {
		size++
	}
	if m.EnhancedMaxRespirationRate != basetype.Uint16Invalid {
		size++
	}
	if m.AvgRespirationRate != basetype.Uint8Invalid {
		size++
	}
	if m.MaxRespirationRate != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.TotalGrit) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.TotalFlow) != basetype.Uint32Invalid {
		size++
	}
	if m.JumpCount != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.AvgGrit) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.AvgFlow) != basetype.Uint32Invalid {
		size++
	}
	if m.TotalFractionalAscent != basetype.Uint8Invalid {
		size++
	}
	if m.TotalFractionalDescent != basetype.Uint8Invalid {
		size++
	}
	if m.AvgCoreTemperature != basetype.Uint16Invalid {
		size++
	}
	if m.MinCoreTemperature != basetype.Uint16Invalid {
		size++
	}
	if m.MaxCoreTemperature != basetype.Uint16Invalid {
		size++
	}
	return size
}
