// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// MetZone is a MetZone message.
type MetZone struct {
	MessageIndex typedef.MessageIndex
	HighBpm      uint8
	Calories     uint16 // Scale: 10; Units: kcal / min;
	FatCalories  uint8  // Scale: 10; Units: kcal / min;

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewMetZone creates new MetZone struct based on given mesg. If mesg is nil or mesg.Num is not equal to MetZone mesg number, it will return nil.
func NewMetZone(mesg proto.Message) *MetZone {
	if mesg.Num != typedef.MesgNumMetZone {
		return nil
	}

	vals := [255]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &MetZone{
		MessageIndex: typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		HighBpm:      typeconv.ToUint8[uint8](vals[1]),
		Calories:     typeconv.ToUint16[uint16](vals[2]),
		FatCalories:  typeconv.ToUint8[uint8](vals[3]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts MetZone into proto.Message.
func (m *MetZone) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumMetZone)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = typeconv.ToUint16[uint16](m.MessageIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.HighBpm != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.HighBpm
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Calories != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.Calories
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.FatCalories != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.FatCalories
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of MetZone's valid fields.
func (m *MetZone) size() byte {
	var size byte
	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		size++
	}
	if m.HighBpm != basetype.Uint8Invalid {
		size++
	}
	if m.Calories != basetype.Uint16Invalid {
		size++
	}
	if m.FatCalories != basetype.Uint8Invalid {
		size++
	}
	return size
}
