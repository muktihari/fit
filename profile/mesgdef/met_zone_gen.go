// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// MetZone is a MetZone message.
type MetZone struct {
	MessageIndex typedef.MessageIndex
	HighBpm      uint8
	Calories     uint16 // Scale: 10; Units: kcal / min;
	FatCalories  uint8  // Scale: 10; Units: kcal / min;

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewMetZone creates new MetZone struct based on given mesg. If mesg is nil or mesg.Num is not equal to MetZone mesg number, it will return nil.
func NewMetZone(mesg proto.Message) *MetZone {
	if mesg.Num != typedef.MesgNumMetZone {
		return nil
	}

	vals := [256]any{ // Mark all values as invalid, replace only when specified.
		254: basetype.Uint16Invalid, /* MessageIndex */
		1:   basetype.Uint8Invalid,  /* HighBpm */
		2:   basetype.Uint16Invalid, /* Calories */
		3:   basetype.Uint8Invalid,  /* FatCalories */
	}

	for i := range mesg.Fields {
		if mesg.Fields[i].Value == nil {
			continue // keep the invalid value
		}
		vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
	}

	return &MetZone{
		MessageIndex: typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		HighBpm:      typeconv.ToUint8[uint8](vals[1]),
		Calories:     typeconv.ToUint16[uint16](vals[2]),
		FatCalories:  typeconv.ToUint8[uint8](vals[3]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to MetZone mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumMetZone)
func (m MetZone) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumMetZone {
		return
	}

	vals := [256]any{
		254: m.MessageIndex,
		1:   m.HighBpm,
		2:   m.Calories,
		3:   m.FatCalories,
	}

	for i := range mesg.Fields {
		mesg.Fields[i].Value = vals[mesg.Fields[i].Num]
	}
	mesg.DeveloperFields = m.DeveloperFields

}
