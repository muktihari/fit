// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// HsaSpo2Data is a HsaSpo2Data message.
type HsaSpo2Data struct {
	Timestamp          time.Time // Units: s
	ReadingSpo2        []uint8   // Array: [N]; Units: percent; SpO2 Reading
	Confidence         []uint8   // Array: [N]; SpO2 Confidence
	ProcessingInterval uint16    // Units: s; Processing interval length in seconds

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewHsaSpo2Data creates new HsaSpo2Data struct based on given mesg.
// If mesg is nil, it will return HsaSpo2Data with all fields being set to its corresponding invalid value.
func NewHsaSpo2Data(mesg *proto.Message) *HsaSpo2Data {
	vals := [254]proto.Value{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &HsaSpo2Data{
		Timestamp:          datetime.ToTime(vals[253].Uint32()),
		ReadingSpo2:        vals[1].SliceUint8(),
		Confidence:         vals[2].SliceUint8(),
		ProcessingInterval: vals[0].Uint16(),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts HsaSpo2Data into proto.Message. If options is nil, default options will be used.
func (m *HsaSpo2Data) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := proto.Message{Num: typedef.MesgNumHsaSpo2Data}

	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = proto.Uint32(datetime.ToUint32(m.Timestamp))
		fields = append(fields, field)
	}
	if m.ReadingSpo2 != nil {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = proto.SliceUint8(m.ReadingSpo2)
		fields = append(fields, field)
	}
	if m.Confidence != nil {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = proto.SliceUint8(m.Confidence)
		fields = append(fields, field)
	}
	if m.ProcessingInterval != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = proto.Uint16(m.ProcessingInterval)
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// SetTimestamp sets HsaSpo2Data value.
//
// Units: s
func (m *HsaSpo2Data) SetTimestamp(v time.Time) *HsaSpo2Data {
	m.Timestamp = v
	return m
}

// SetReadingSpo2 sets HsaSpo2Data value.
//
// Array: [N]; Units: percent; SpO2 Reading
func (m *HsaSpo2Data) SetReadingSpo2(v []uint8) *HsaSpo2Data {
	m.ReadingSpo2 = v
	return m
}

// SetConfidence sets HsaSpo2Data value.
//
// Array: [N]; SpO2 Confidence
func (m *HsaSpo2Data) SetConfidence(v []uint8) *HsaSpo2Data {
	m.Confidence = v
	return m
}

// SetProcessingInterval sets HsaSpo2Data value.
//
// Units: s; Processing interval length in seconds
func (m *HsaSpo2Data) SetProcessingInterval(v uint16) *HsaSpo2Data {
	m.ProcessingInterval = v
	return m
}

// SetDeveloperFields HsaSpo2Data's DeveloperFields.
func (m *HsaSpo2Data) SetDeveloperFields(developerFields ...proto.DeveloperField) *HsaSpo2Data {
	m.DeveloperFields = developerFields
	return m
}
