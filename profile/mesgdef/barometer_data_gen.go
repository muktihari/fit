// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// BarometerData is a BarometerData message.
type BarometerData struct {
	Timestamp        time.Time // Units: s; Whole second part of the timestamp
	SampleTimeOffset []uint16  // Array: [N]; Units: ms; Each time in the array describes the time at which the barometer sample with the corrosponding index was taken. The samples may span across seconds. Array size must match the number of samples in baro_cal
	BaroPres         []uint32  // Array: [N]; Units: Pa; These are the raw ADC reading. The samples may span across seconds. A conversion will need to be done on this data once read.
	TimestampMs      uint16    // Units: ms; Millisecond part of the timestamp.

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewBarometerData creates new BarometerData struct based on given mesg.
// If mesg is nil, it will return BarometerData with all fields being set to its corresponding invalid value.
func NewBarometerData(mesg *proto.Message) *BarometerData {
	vals := [254]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &BarometerData{
		Timestamp:        datetime.ToTime(vals[253]),
		SampleTimeOffset: typeconv.ToSliceUint16[uint16](vals[1]),
		BaroPres:         typeconv.ToSliceUint32[uint32](vals[2]),
		TimestampMs:      typeconv.ToUint16[uint16](vals[0]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts BarometerData into proto.Message.
func (m *BarometerData) ToMesg(fac Factory) proto.Message {
	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := fac.CreateMesgOnly(typedef.MesgNumBarometerData)

	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = datetime.ToUint32(m.Timestamp)
		fields = append(fields, field)
	}
	if m.SampleTimeOffset != nil {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.SampleTimeOffset
		fields = append(fields, field)
	}
	if m.BaroPres != nil {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.BaroPres
		fields = append(fields, field)
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.TimestampMs
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// SetTimestamp sets BarometerData value.
//
// Units: s; Whole second part of the timestamp
func (m *BarometerData) SetTimestamp(v time.Time) *BarometerData {
	m.Timestamp = v
	return m
}

// SetSampleTimeOffset sets BarometerData value.
//
// Array: [N]; Units: ms; Each time in the array describes the time at which the barometer sample with the corrosponding index was taken. The samples may span across seconds. Array size must match the number of samples in baro_cal
func (m *BarometerData) SetSampleTimeOffset(v []uint16) *BarometerData {
	m.SampleTimeOffset = v
	return m
}

// SetBaroPres sets BarometerData value.
//
// Array: [N]; Units: Pa; These are the raw ADC reading. The samples may span across seconds. A conversion will need to be done on this data once read.
func (m *BarometerData) SetBaroPres(v []uint32) *BarometerData {
	m.BaroPres = v
	return m
}

// SetTimestampMs sets BarometerData value.
//
// Units: ms; Millisecond part of the timestamp.
func (m *BarometerData) SetTimestampMs(v uint16) *BarometerData {
	m.TimestampMs = v
	return m
}

// SetDeveloperFields BarometerData's DeveloperFields.
func (m *BarometerData) SetDeveloperFields(developerFields ...proto.DeveloperField) *BarometerData {
	m.DeveloperFields = developerFields
	return m
}
