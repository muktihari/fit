// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// FileId is a FileId message.
type FileId struct {
	Type         typedef.File
	Manufacturer typedef.Manufacturer
	Product      uint16
	SerialNumber uint32
	TimeCreated  typedef.DateTime // Only set for files that are can be created/erased.
	Number       uint16           // Only set for files that are not created/erased.
	ProductName  string           // Optional free form string to indicate the devices name or model
}

// NewFileId creates new FileId struct based on given mesg. If mesg is nil or mesg.Num is not equal to FileId mesg number, it will return nil.
func NewFileId(mesg proto.Message) *FileId {
	if mesg.Num != typedef.MesgNumFileId {
		return nil
	}

	vals := [9]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &FileId{
		Type:         typeconv.ToEnum[typedef.File](vals[0]),
		Manufacturer: typeconv.ToUint16[typedef.Manufacturer](vals[1]),
		Product:      typeconv.ToUint16[uint16](vals[2]),
		SerialNumber: typeconv.ToUint32z[uint32](vals[3]),
		TimeCreated:  typeconv.ToUint32[typedef.DateTime](vals[4]),
		Number:       typeconv.ToUint16[uint16](vals[5]),
		ProductName:  typeconv.ToString[string](vals[8]),
	}
}

// ToMesg converts FileId into proto.Message.
func (m *FileId) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumFileId)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToEnum[byte](m.Type) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = typeconv.ToEnum[byte](m.Type)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint16[uint16](m.Manufacturer) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = typeconv.ToUint16[uint16](m.Manufacturer)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Product != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.Product
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32z[uint32](m.SerialNumber) != basetype.Uint32zInvalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = typeconv.ToUint32z[uint32](m.SerialNumber)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.TimeCreated) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = typeconv.ToUint32[uint32](m.TimeCreated)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Number != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.Number
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ProductName != basetype.StringInvalid && m.ProductName != "" {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = m.ProductName
		mesg.Fields = append(mesg.Fields, field)
	}

	return mesg
}

// size returns size of FileId's valid fields.
func (m *FileId) size() byte {
	var size byte
	if typeconv.ToEnum[byte](m.Type) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToUint16[uint16](m.Manufacturer) != basetype.Uint16Invalid {
		size++
	}
	if m.Product != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint32z[uint32](m.SerialNumber) != basetype.Uint32zInvalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.TimeCreated) != basetype.Uint32Invalid {
		size++
	}
	if m.Number != basetype.Uint16Invalid {
		size++
	}
	if m.ProductName != basetype.StringInvalid && m.ProductName != "" {
		size++
	}
	return size
}
