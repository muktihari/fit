// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// CameraEvent is a CameraEvent message.
type CameraEvent struct {
	Timestamp         typedef.DateTime // Units: s; Whole second part of the timestamp.
	TimestampMs       uint16           // Units: ms; Millisecond part of the timestamp.
	CameraEventType   typedef.CameraEventType
	CameraFileUuid    string
	CameraOrientation typedef.CameraOrientationType

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewCameraEvent creates new CameraEvent struct based on given mesg. If mesg is nil or mesg.Num is not equal to CameraEvent mesg number, it will return nil.
func NewCameraEvent(mesg proto.Message) *CameraEvent {
	if mesg.Num != typedef.MesgNumCameraEvent {
		return nil
	}

	vals := [256]any{ // Mark all values as invalid, replace only when specified.
		253: basetype.Uint32Invalid, /* Timestamp */
		0:   basetype.Uint16Invalid, /* TimestampMs */
		1:   basetype.EnumInvalid,   /* CameraEventType */
		2:   basetype.StringInvalid, /* CameraFileUuid */
		3:   basetype.EnumInvalid,   /* CameraOrientation */
	}

	for i := range mesg.Fields {
		if mesg.Fields[i].Value == nil {
			continue // keep the invalid value
		}
		vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
	}

	return &CameraEvent{
		Timestamp:         typeconv.ToUint32[typedef.DateTime](vals[253]),
		TimestampMs:       typeconv.ToUint16[uint16](vals[0]),
		CameraEventType:   typeconv.ToEnum[typedef.CameraEventType](vals[1]),
		CameraFileUuid:    typeconv.ToString[string](vals[2]),
		CameraOrientation: typeconv.ToEnum[typedef.CameraOrientationType](vals[3]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to CameraEvent mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumCameraEvent)
func (m CameraEvent) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumCameraEvent {
		return
	}

	vals := [256]any{
		253: m.Timestamp,
		0:   m.TimestampMs,
		1:   m.CameraEventType,
		2:   m.CameraFileUuid,
		3:   m.CameraOrientation,
	}

	for i := range mesg.Fields {
		mesg.Fields[i].Value = vals[mesg.Fields[i].Num]
	}
	mesg.DeveloperFields = m.DeveloperFields

}
