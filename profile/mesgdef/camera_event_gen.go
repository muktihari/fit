// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// CameraEvent is a CameraEvent message.
type CameraEvent struct {
	Timestamp         typedef.DateTime // Units: s; Whole second part of the timestamp.
	TimestampMs       uint16           // Units: ms; Millisecond part of the timestamp.
	CameraEventType   typedef.CameraEventType
	CameraFileUuid    string
	CameraOrientation typedef.CameraOrientationType

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewCameraEvent creates new CameraEvent struct based on given mesg. If mesg is nil or mesg.Num is not equal to CameraEvent mesg number, it will return nil.
func NewCameraEvent(mesg proto.Message) *CameraEvent {
	if mesg.Num != typedef.MesgNumCameraEvent {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &CameraEvent{
		Timestamp:         typeconv.ToUint32[typedef.DateTime](vals[253]),
		TimestampMs:       typeconv.ToUint16[uint16](vals[0]),
		CameraEventType:   typeconv.ToEnum[typedef.CameraEventType](vals[1]),
		CameraFileUuid:    typeconv.ToString[string](vals[2]),
		CameraOrientation: typeconv.ToEnum[typedef.CameraOrientationType](vals[3]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts CameraEvent into proto.Message.
func (m *CameraEvent) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumCameraEvent)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.TimestampMs
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.CameraEventType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = typeconv.ToEnum[byte](m.CameraEventType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.CameraFileUuid != basetype.StringInvalid && m.CameraFileUuid != "" {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.CameraFileUuid
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.CameraOrientation) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = typeconv.ToEnum[byte](m.CameraOrientation)
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of CameraEvent's valid fields.
func (m *CameraEvent) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.CameraEventType) != basetype.EnumInvalid {
		size++
	}
	if m.CameraFileUuid != basetype.StringInvalid && m.CameraFileUuid != "" {
		size++
	}
	if typeconv.ToEnum[byte](m.CameraOrientation) != basetype.EnumInvalid {
		size++
	}
	return size
}
