// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// CameraEvent is a CameraEvent message.
//
// Note: The order of the fields is optimized using a memory alignment algorithm.
// Do not rely on field indices, such as when using reflection.
type CameraEvent struct {
	Timestamp         time.Time // Units: s; Whole second part of the timestamp.
	CameraFileUuid    string
	TimestampMs       uint16 // Units: ms; Millisecond part of the timestamp.
	CameraEventType   typedef.CameraEventType
	CameraOrientation typedef.CameraOrientationType

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewCameraEvent creates new CameraEvent struct based on given mesg.
// If mesg is nil, it will return CameraEvent with all fields being set to its corresponding invalid value.
func NewCameraEvent(mesg *proto.Message) *CameraEvent {
	vals := [254]proto.Value{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &CameraEvent{
		Timestamp:         datetime.ToTime(vals[253].Uint32()),
		TimestampMs:       vals[0].Uint16(),
		CameraEventType:   typedef.CameraEventType(vals[1].Uint8()),
		CameraFileUuid:    vals[2].String(),
		CameraOrientation: typedef.CameraOrientationType(vals[3].Uint8()),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts CameraEvent into proto.Message. If options is nil, default options will be used.
func (m *CameraEvent) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	arr := pool.Get().(*[255]proto.Field)
	defer pool.Put(arr)

	fields := arr[:0] // Create slice from array with zero len.
	mesg := proto.Message{Num: typedef.MesgNumCameraEvent}

	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = proto.Uint32(datetime.ToUint32(m.Timestamp))
		fields = append(fields, field)
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = proto.Uint16(m.TimestampMs)
		fields = append(fields, field)
	}
	if byte(m.CameraEventType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = proto.Uint8(byte(m.CameraEventType))
		fields = append(fields, field)
	}
	if m.CameraFileUuid != basetype.StringInvalid && m.CameraFileUuid != "" {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = proto.String(m.CameraFileUuid)
		fields = append(fields, field)
	}
	if byte(m.CameraOrientation) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = proto.Uint8(byte(m.CameraOrientation))
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// TimestampUint32 returns Timestamp in uint32 (seconds since FIT's epoch) instead of time.Time.
func (m *CameraEvent) TimestampUint32() uint32 { return datetime.ToUint32(m.Timestamp) }

// SetTimestamp sets Timestamp value.
//
// Units: s; Whole second part of the timestamp.
func (m *CameraEvent) SetTimestamp(v time.Time) *CameraEvent {
	m.Timestamp = v
	return m
}

// SetTimestampMs sets TimestampMs value.
//
// Units: ms; Millisecond part of the timestamp.
func (m *CameraEvent) SetTimestampMs(v uint16) *CameraEvent {
	m.TimestampMs = v
	return m
}

// SetCameraEventType sets CameraEventType value.
func (m *CameraEvent) SetCameraEventType(v typedef.CameraEventType) *CameraEvent {
	m.CameraEventType = v
	return m
}

// SetCameraFileUuid sets CameraFileUuid value.
func (m *CameraEvent) SetCameraFileUuid(v string) *CameraEvent {
	m.CameraFileUuid = v
	return m
}

// SetCameraOrientation sets CameraOrientation value.
func (m *CameraEvent) SetCameraOrientation(v typedef.CameraOrientationType) *CameraEvent {
	m.CameraOrientation = v
	return m
}

// SetDeveloperFields CameraEvent's DeveloperFields.
func (m *CameraEvent) SetDeveloperFields(developerFields ...proto.DeveloperField) *CameraEvent {
	m.DeveloperFields = developerFields
	return m
}
