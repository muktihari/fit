// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// HrvStatusSummary is a HrvStatusSummary message.
type HrvStatusSummary struct {
	Timestamp             typedef.DateTime
	WeeklyAverage         uint16 // Scale: 128; Units: ms; 7 day RMSSD average over sleep
	LastNightAverage      uint16 // Scale: 128; Units: ms; Last night RMSSD average over sleep
	LastNight5MinHigh     uint16 // Scale: 128; Units: ms; 5 minute high RMSSD value over sleep
	BaselineLowUpper      uint16 // Scale: 128; Units: ms; 3 week baseline, upper boundary of low HRV status
	BaselineBalancedLower uint16 // Scale: 128; Units: ms; 3 week baseline, lower boundary of balanced HRV status
	BaselineBalancedUpper uint16 // Scale: 128; Units: ms; 3 week baseline, upper boundary of balanced HRV status
	Status                typedef.HrvStatus

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewHrvStatusSummary creates new HrvStatusSummary struct based on given mesg. If mesg is nil or mesg.Num is not equal to HrvStatusSummary mesg number, it will return nil.
func NewHrvStatusSummary(mesg proto.Message) *HrvStatusSummary {
	if mesg.Num != typedef.MesgNumHrvStatusSummary {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &HrvStatusSummary{
		Timestamp:             typeconv.ToUint32[typedef.DateTime](vals[253]),
		WeeklyAverage:         typeconv.ToUint16[uint16](vals[0]),
		LastNightAverage:      typeconv.ToUint16[uint16](vals[1]),
		LastNight5MinHigh:     typeconv.ToUint16[uint16](vals[2]),
		BaselineLowUpper:      typeconv.ToUint16[uint16](vals[3]),
		BaselineBalancedLower: typeconv.ToUint16[uint16](vals[4]),
		BaselineBalancedUpper: typeconv.ToUint16[uint16](vals[5]),
		Status:                typeconv.ToEnum[typedef.HrvStatus](vals[6]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts HrvStatusSummary into proto.Message.
func (m *HrvStatusSummary) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumHrvStatusSummary)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.WeeklyAverage != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.WeeklyAverage
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.LastNightAverage != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.LastNightAverage
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.LastNight5MinHigh != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.LastNight5MinHigh
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.BaselineLowUpper != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.BaselineLowUpper
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.BaselineBalancedLower != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.BaselineBalancedLower
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.BaselineBalancedUpper != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.BaselineBalancedUpper
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Status) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = typeconv.ToEnum[byte](m.Status)
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of HrvStatusSummary's valid fields.
func (m *HrvStatusSummary) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.WeeklyAverage != basetype.Uint16Invalid {
		size++
	}
	if m.LastNightAverage != basetype.Uint16Invalid {
		size++
	}
	if m.LastNight5MinHigh != basetype.Uint16Invalid {
		size++
	}
	if m.BaselineLowUpper != basetype.Uint16Invalid {
		size++
	}
	if m.BaselineBalancedLower != basetype.Uint16Invalid {
		size++
	}
	if m.BaselineBalancedUpper != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Status) != basetype.EnumInvalid {
		size++
	}
	return size
}
