// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// HrvStatusSummary is a HrvStatusSummary message.
type HrvStatusSummary struct {
	Timestamp             time.Time
	WeeklyAverage         uint16 // Scale: 128; Units: ms; 7 day RMSSD average over sleep
	LastNightAverage      uint16 // Scale: 128; Units: ms; Last night RMSSD average over sleep
	LastNight5MinHigh     uint16 // Scale: 128; Units: ms; 5 minute high RMSSD value over sleep
	BaselineLowUpper      uint16 // Scale: 128; Units: ms; 3 week baseline, upper boundary of low HRV status
	BaselineBalancedLower uint16 // Scale: 128; Units: ms; 3 week baseline, lower boundary of balanced HRV status
	BaselineBalancedUpper uint16 // Scale: 128; Units: ms; 3 week baseline, upper boundary of balanced HRV status
	Status                typedef.HrvStatus

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewHrvStatusSummary creates new HrvStatusSummary struct based on given mesg.
// If mesg is nil, it will return HrvStatusSummary with all fields being set to its corresponding invalid value.
func NewHrvStatusSummary(mesg *proto.Message) *HrvStatusSummary {
	vals := [254]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &HrvStatusSummary{
		Timestamp:             datetime.ToTime(vals[253]),
		WeeklyAverage:         typeconv.ToUint16[uint16](vals[0]),
		LastNightAverage:      typeconv.ToUint16[uint16](vals[1]),
		LastNight5MinHigh:     typeconv.ToUint16[uint16](vals[2]),
		BaselineLowUpper:      typeconv.ToUint16[uint16](vals[3]),
		BaselineBalancedLower: typeconv.ToUint16[uint16](vals[4]),
		BaselineBalancedUpper: typeconv.ToUint16[uint16](vals[5]),
		Status:                typeconv.ToEnum[typedef.HrvStatus](vals[6]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts HrvStatusSummary into proto.Message.
func (m *HrvStatusSummary) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumHrvStatusSummary)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = datetime.ToUint32(m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.WeeklyAverage != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.WeeklyAverage
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.LastNightAverage != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.LastNightAverage
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.LastNight5MinHigh != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.LastNight5MinHigh
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.BaselineLowUpper != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.BaselineLowUpper
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.BaselineBalancedLower != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.BaselineBalancedLower
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.BaselineBalancedUpper != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.BaselineBalancedUpper
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Status) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = typeconv.ToEnum[byte](m.Status)
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of HrvStatusSummary's valid fields.
func (m *HrvStatusSummary) size() byte {
	var size byte
	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.WeeklyAverage != basetype.Uint16Invalid {
		size++
	}
	if m.LastNightAverage != basetype.Uint16Invalid {
		size++
	}
	if m.LastNight5MinHigh != basetype.Uint16Invalid {
		size++
	}
	if m.BaselineLowUpper != basetype.Uint16Invalid {
		size++
	}
	if m.BaselineBalancedLower != basetype.Uint16Invalid {
		size++
	}
	if m.BaselineBalancedUpper != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Status) != basetype.EnumInvalid {
		size++
	}
	return size
}

// SetTimestamp sets HrvStatusSummary value.
func (m *HrvStatusSummary) SetTimestamp(v time.Time) *HrvStatusSummary {
	m.Timestamp = v
	return m
}

// SetWeeklyAverage sets HrvStatusSummary value.
//
// Scale: 128; Units: ms; 7 day RMSSD average over sleep
func (m *HrvStatusSummary) SetWeeklyAverage(v uint16) *HrvStatusSummary {
	m.WeeklyAverage = v
	return m
}

// SetLastNightAverage sets HrvStatusSummary value.
//
// Scale: 128; Units: ms; Last night RMSSD average over sleep
func (m *HrvStatusSummary) SetLastNightAverage(v uint16) *HrvStatusSummary {
	m.LastNightAverage = v
	return m
}

// SetLastNight5MinHigh sets HrvStatusSummary value.
//
// Scale: 128; Units: ms; 5 minute high RMSSD value over sleep
func (m *HrvStatusSummary) SetLastNight5MinHigh(v uint16) *HrvStatusSummary {
	m.LastNight5MinHigh = v
	return m
}

// SetBaselineLowUpper sets HrvStatusSummary value.
//
// Scale: 128; Units: ms; 3 week baseline, upper boundary of low HRV status
func (m *HrvStatusSummary) SetBaselineLowUpper(v uint16) *HrvStatusSummary {
	m.BaselineLowUpper = v
	return m
}

// SetBaselineBalancedLower sets HrvStatusSummary value.
//
// Scale: 128; Units: ms; 3 week baseline, lower boundary of balanced HRV status
func (m *HrvStatusSummary) SetBaselineBalancedLower(v uint16) *HrvStatusSummary {
	m.BaselineBalancedLower = v
	return m
}

// SetBaselineBalancedUpper sets HrvStatusSummary value.
//
// Scale: 128; Units: ms; 3 week baseline, upper boundary of balanced HRV status
func (m *HrvStatusSummary) SetBaselineBalancedUpper(v uint16) *HrvStatusSummary {
	m.BaselineBalancedUpper = v
	return m
}

// SetStatus sets HrvStatusSummary value.
func (m *HrvStatusSummary) SetStatus(v typedef.HrvStatus) *HrvStatusSummary {
	m.Status = v
	return m
}

// SetDeveloperFields HrvStatusSummary's DeveloperFields.
func (m *HrvStatusSummary) SetDeveloperFields(developerFields ...proto.DeveloperField) *HrvStatusSummary {
	m.DeveloperFields = developerFields
	return m
}
