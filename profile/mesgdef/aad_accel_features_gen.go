// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.133

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/kit/scaleoffset"
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// AadAccelFeatures is a AadAccelFeatures message.
type AadAccelFeatures struct {
	Timestamp          time.Time
	EnergyTotal        uint32 // Total accelerometer energy in the interval
	Time               uint16 // Units: s; Time interval length in seconds
	ZeroCrossCnt       uint16 // Count of zero crossings
	TimeAboveThreshold uint16 // Scale: 25; Units: s; Total accelerometer time above threshold in the interval
	Instance           uint8  // Instance ID of zero crossing algorithm

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewAadAccelFeatures creates new AadAccelFeatures struct based on given mesg.
// If mesg is nil, it will return AadAccelFeatures with all fields being set to its corresponding invalid value.
func NewAadAccelFeatures(mesg *proto.Message) *AadAccelFeatures {
	vals := [254]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &AadAccelFeatures{
		Timestamp:          datetime.ToTime(vals[253]),
		EnergyTotal:        typeconv.ToUint32[uint32](vals[1]),
		Time:               typeconv.ToUint16[uint16](vals[0]),
		ZeroCrossCnt:       typeconv.ToUint16[uint16](vals[2]),
		TimeAboveThreshold: typeconv.ToUint16[uint16](vals[4]),
		Instance:           typeconv.ToUint8[uint8](vals[3]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts AadAccelFeatures into proto.Message.
func (m *AadAccelFeatures) ToMesg(fac Factory) proto.Message {
	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := fac.CreateMesgOnly(typedef.MesgNumAadAccelFeatures)

	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = datetime.ToUint32(m.Timestamp)
		fields = append(fields, field)
	}
	if m.EnergyTotal != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.EnergyTotal
		fields = append(fields, field)
	}
	if m.Time != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.Time
		fields = append(fields, field)
	}
	if m.ZeroCrossCnt != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.ZeroCrossCnt
		fields = append(fields, field)
	}
	if m.TimeAboveThreshold != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.TimeAboveThreshold
		fields = append(fields, field)
	}
	if m.Instance != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.Instance
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// TimeAboveThresholdScaled return TimeAboveThreshold in its scaled value [Scale: 25; Units: s; Total accelerometer time above threshold in the interval].
//
// If TimeAboveThreshold value is invalid, float64 invalid value will be returned.
func (m *AadAccelFeatures) TimeAboveThresholdScaled() float64 {
	if m.TimeAboveThreshold == basetype.Uint16Invalid {
		return basetype.Float64InvalidInFloatForm()
	}
	return scaleoffset.Apply(m.TimeAboveThreshold, 25, 0)
}

// SetTimestamp sets AadAccelFeatures value.
func (m *AadAccelFeatures) SetTimestamp(v time.Time) *AadAccelFeatures {
	m.Timestamp = v
	return m
}

// SetEnergyTotal sets AadAccelFeatures value.
//
// Total accelerometer energy in the interval
func (m *AadAccelFeatures) SetEnergyTotal(v uint32) *AadAccelFeatures {
	m.EnergyTotal = v
	return m
}

// SetTime sets AadAccelFeatures value.
//
// Units: s; Time interval length in seconds
func (m *AadAccelFeatures) SetTime(v uint16) *AadAccelFeatures {
	m.Time = v
	return m
}

// SetZeroCrossCnt sets AadAccelFeatures value.
//
// Count of zero crossings
func (m *AadAccelFeatures) SetZeroCrossCnt(v uint16) *AadAccelFeatures {
	m.ZeroCrossCnt = v
	return m
}

// SetTimeAboveThreshold sets AadAccelFeatures value.
//
// Scale: 25; Units: s; Total accelerometer time above threshold in the interval
func (m *AadAccelFeatures) SetTimeAboveThreshold(v uint16) *AadAccelFeatures {
	m.TimeAboveThreshold = v
	return m
}

// SetInstance sets AadAccelFeatures value.
//
// Instance ID of zero crossing algorithm
func (m *AadAccelFeatures) SetInstance(v uint8) *AadAccelFeatures {
	m.Instance = v
	return m
}

// SetDeveloperFields AadAccelFeatures's DeveloperFields.
func (m *AadAccelFeatures) SetDeveloperFields(developerFields ...proto.DeveloperField) *AadAccelFeatures {
	m.DeveloperFields = developerFields
	return m
}
