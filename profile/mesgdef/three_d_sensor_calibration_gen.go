// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// ThreeDSensorCalibration is a ThreeDSensorCalibration message.
type ThreeDSensorCalibration struct {
	Timestamp          typedef.DateTime   // Units: s; Whole second part of the timestamp
	SensorType         typedef.SensorType // Indicates which sensor the calibration is for
	CalibrationFactor  uint32             // Calibration factor used to convert from raw ADC value to degrees, g, etc.
	CalibrationDivisor uint32             // Units: counts; Calibration factor divisor
	LevelShift         uint32             // Level shift value used to shift the ADC value back into range
	OffsetCal          []int32            // Array: [3]; Internal calibration factors, one for each: xy, yx, zx
	OrientationMatrix  []int32            // Scale: 65535; Array: [9]; 3 x 3 rotation matrix (row major)

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewThreeDSensorCalibration creates new ThreeDSensorCalibration struct based on given mesg. If mesg is nil or mesg.Num is not equal to ThreeDSensorCalibration mesg number, it will return nil.
func NewThreeDSensorCalibration(mesg proto.Message) *ThreeDSensorCalibration {
	if mesg.Num != typedef.MesgNumThreeDSensorCalibration {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &ThreeDSensorCalibration{
		Timestamp:          typeconv.ToUint32[typedef.DateTime](vals[253]),
		SensorType:         typeconv.ToEnum[typedef.SensorType](vals[0]),
		CalibrationFactor:  typeconv.ToUint32[uint32](vals[1]),
		CalibrationDivisor: typeconv.ToUint32[uint32](vals[2]),
		LevelShift:         typeconv.ToUint32[uint32](vals[3]),
		OffsetCal:          typeconv.ToSliceSint32[int32](vals[4]),
		OrientationMatrix:  typeconv.ToSliceSint32[int32](vals[5]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts ThreeDSensorCalibration into proto.Message.
func (m *ThreeDSensorCalibration) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumThreeDSensorCalibration)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.SensorType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = typeconv.ToEnum[byte](m.SensorType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.CalibrationFactor != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.CalibrationFactor
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.CalibrationDivisor != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.CalibrationDivisor
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.LevelShift != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.LevelShift
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.OffsetCal != nil {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.OffsetCal
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.OrientationMatrix != nil {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.OrientationMatrix
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of ThreeDSensorCalibration's valid fields.
func (m *ThreeDSensorCalibration) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.SensorType) != basetype.EnumInvalid {
		size++
	}
	if m.CalibrationFactor != basetype.Uint32Invalid {
		size++
	}
	if m.CalibrationDivisor != basetype.Uint32Invalid {
		size++
	}
	if m.LevelShift != basetype.Uint32Invalid {
		size++
	}
	if m.OffsetCal != nil {
		size++
	}
	if m.OrientationMatrix != nil {
		size++
	}
	return size
}
