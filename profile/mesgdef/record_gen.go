// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Record is a Record message.
type Record struct {
	Timestamp                     typedef.DateTime // Units: s;
	PositionLat                   int32            // Units: semicircles;
	PositionLong                  int32            // Units: semicircles;
	Altitude                      uint16           // Scale: 5; Offset: 500; Units: m;
	HeartRate                     uint8            // Units: bpm;
	Cadence                       uint8            // Units: rpm;
	Distance                      uint32           // Scale: 100; Units: m;
	Speed                         uint16           // Scale: 1000; Units: m/s;
	Power                         uint16           // Units: watts;
	CompressedSpeedDistance       []byte           // Scale: 100; Array: [3]; Units: m/s,m;
	Grade                         int16            // Scale: 100; Units: %;
	Resistance                    uint8            // Relative. 0 is none 254 is Max.
	TimeFromCourse                int32            // Scale: 1000; Units: s;
	CycleLength                   uint8            // Scale: 100; Units: m;
	Temperature                   int8             // Units: C;
	Speed1S                       []uint8          // Scale: 16; Array: [N]; Units: m/s; Speed at 1s intervals. Timestamp field indicates time of last array element.
	Cycles                        uint8            // Units: cycles;
	TotalCycles                   uint32           // Units: cycles;
	CompressedAccumulatedPower    uint16           // Units: watts;
	AccumulatedPower              uint32           // Units: watts;
	LeftRightBalance              typedef.LeftRightBalance
	GpsAccuracy                   uint8  // Units: m;
	VerticalSpeed                 int16  // Scale: 1000; Units: m/s;
	Calories                      uint16 // Units: kcal;
	VerticalOscillation           uint16 // Scale: 10; Units: mm;
	StanceTimePercent             uint16 // Scale: 100; Units: percent;
	StanceTime                    uint16 // Scale: 10; Units: ms;
	ActivityType                  typedef.ActivityType
	LeftTorqueEffectiveness       uint8 // Scale: 2; Units: percent;
	RightTorqueEffectiveness      uint8 // Scale: 2; Units: percent;
	LeftPedalSmoothness           uint8 // Scale: 2; Units: percent;
	RightPedalSmoothness          uint8 // Scale: 2; Units: percent;
	CombinedPedalSmoothness       uint8 // Scale: 2; Units: percent;
	Time128                       uint8 // Scale: 128; Units: s;
	StrokeType                    typedef.StrokeType
	Zone                          uint8
	BallSpeed                     uint16 // Scale: 100; Units: m/s;
	Cadence256                    uint16 // Scale: 256; Units: rpm; Log cadence and fractional cadence for backwards compatability
	FractionalCadence             uint8  // Scale: 128; Units: rpm;
	TotalHemoglobinConc           uint16 // Scale: 100; Units: g/dL; Total saturated and unsaturated hemoglobin
	TotalHemoglobinConcMin        uint16 // Scale: 100; Units: g/dL; Min saturated and unsaturated hemoglobin
	TotalHemoglobinConcMax        uint16 // Scale: 100; Units: g/dL; Max saturated and unsaturated hemoglobin
	SaturatedHemoglobinPercent    uint16 // Scale: 10; Units: %; Percentage of hemoglobin saturated with oxygen
	SaturatedHemoglobinPercentMin uint16 // Scale: 10; Units: %; Min percentage of hemoglobin saturated with oxygen
	SaturatedHemoglobinPercentMax uint16 // Scale: 10; Units: %; Max percentage of hemoglobin saturated with oxygen
	DeviceIndex                   typedef.DeviceIndex
	LeftPco                       int8    // Units: mm; Left platform center offset
	RightPco                      int8    // Units: mm; Right platform center offset
	LeftPowerPhase                []uint8 // Scale: 0.7111111; Array: [N]; Units: degrees; Left power phase angles. Data value indexes defined by power_phase_type.
	LeftPowerPhasePeak            []uint8 // Scale: 0.7111111; Array: [N]; Units: degrees; Left power phase peak angles. Data value indexes defined by power_phase_type.
	RightPowerPhase               []uint8 // Scale: 0.7111111; Array: [N]; Units: degrees; Right power phase angles. Data value indexes defined by power_phase_type.
	RightPowerPhasePeak           []uint8 // Scale: 0.7111111; Array: [N]; Units: degrees; Right power phase peak angles. Data value indexes defined by power_phase_type.
	EnhancedSpeed                 uint32  // Scale: 1000; Units: m/s;
	EnhancedAltitude              uint32  // Scale: 5; Offset: 500; Units: m;
	BatterySoc                    uint8   // Scale: 2; Units: percent; lev battery state of charge
	MotorPower                    uint16  // Units: watts; lev motor power
	VerticalRatio                 uint16  // Scale: 100; Units: percent;
	StanceTimeBalance             uint16  // Scale: 100; Units: percent;
	StepLength                    uint16  // Scale: 10; Units: mm;
	CycleLength16                 uint16  // Scale: 100; Units: m; Supports larger cycle sizes needed for paddlesports. Max cycle size: 655.35
	AbsolutePressure              uint32  // Units: Pa; Includes atmospheric pressure
	Depth                         uint32  // Scale: 1000; Units: m; 0 if above water
	NextStopDepth                 uint32  // Scale: 1000; Units: m; 0 if above water
	NextStopTime                  uint32  // Units: s;
	TimeToSurface                 uint32  // Units: s;
	NdlTime                       uint32  // Units: s;
	CnsLoad                       uint8   // Units: percent;
	N2Load                        uint16  // Units: percent;
	RespirationRate               uint8   // Units: s;
	EnhancedRespirationRate       uint16  // Scale: 100; Units: Breaths/min;
	Grit                          float32 // The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	Flow                          float32 // The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	CurrentStress                 uint16  // Scale: 100; Current Stress value
	EbikeTravelRange              uint16  // Units: km;
	EbikeBatteryLevel             uint8   // Units: percent;
	EbikeAssistMode               uint8   // Units: depends on sensor;
	EbikeAssistLevelPercent       uint8   // Units: percent;
	AirTimeRemaining              uint32  // Units: s;
	PressureSac                   uint16  // Scale: 100; Units: bar/min; Pressure-based surface air consumption
	VolumeSac                     uint16  // Scale: 100; Units: L/min; Volumetric surface air consumption
	Rmv                           uint16  // Scale: 100; Units: L/min; Respiratory minute volume
	AscentRate                    int32   // Scale: 1000; Units: m/s;
	Po2                           uint8   // Scale: 100; Units: percent; Current partial pressure of oxygen
	CoreTemperature               uint16  // Scale: 100; Units: C;

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewRecord creates new Record struct based on given mesg. If mesg is nil or mesg.Num is not equal to Record mesg number, it will return nil.
func NewRecord(mesg proto.Message) *Record {
	if mesg.Num != typedef.MesgNumRecord {
		return nil
	}

	vals := [...]any{ // nil value will be converted to its corresponding invalid value by typeconv.
		253: nil, /* Timestamp */
		0:   nil, /* PositionLat */
		1:   nil, /* PositionLong */
		2:   nil, /* Altitude */
		3:   nil, /* HeartRate */
		4:   nil, /* Cadence */
		5:   nil, /* Distance */
		6:   nil, /* Speed */
		7:   nil, /* Power */
		8:   nil, /* CompressedSpeedDistance */
		9:   nil, /* Grade */
		10:  nil, /* Resistance */
		11:  nil, /* TimeFromCourse */
		12:  nil, /* CycleLength */
		13:  nil, /* Temperature */
		17:  nil, /* Speed1S */
		18:  nil, /* Cycles */
		19:  nil, /* TotalCycles */
		28:  nil, /* CompressedAccumulatedPower */
		29:  nil, /* AccumulatedPower */
		30:  nil, /* LeftRightBalance */
		31:  nil, /* GpsAccuracy */
		32:  nil, /* VerticalSpeed */
		33:  nil, /* Calories */
		39:  nil, /* VerticalOscillation */
		40:  nil, /* StanceTimePercent */
		41:  nil, /* StanceTime */
		42:  nil, /* ActivityType */
		43:  nil, /* LeftTorqueEffectiveness */
		44:  nil, /* RightTorqueEffectiveness */
		45:  nil, /* LeftPedalSmoothness */
		46:  nil, /* RightPedalSmoothness */
		47:  nil, /* CombinedPedalSmoothness */
		48:  nil, /* Time128 */
		49:  nil, /* StrokeType */
		50:  nil, /* Zone */
		51:  nil, /* BallSpeed */
		52:  nil, /* Cadence256 */
		53:  nil, /* FractionalCadence */
		54:  nil, /* TotalHemoglobinConc */
		55:  nil, /* TotalHemoglobinConcMin */
		56:  nil, /* TotalHemoglobinConcMax */
		57:  nil, /* SaturatedHemoglobinPercent */
		58:  nil, /* SaturatedHemoglobinPercentMin */
		59:  nil, /* SaturatedHemoglobinPercentMax */
		62:  nil, /* DeviceIndex */
		67:  nil, /* LeftPco */
		68:  nil, /* RightPco */
		69:  nil, /* LeftPowerPhase */
		70:  nil, /* LeftPowerPhasePeak */
		71:  nil, /* RightPowerPhase */
		72:  nil, /* RightPowerPhasePeak */
		73:  nil, /* EnhancedSpeed */
		78:  nil, /* EnhancedAltitude */
		81:  nil, /* BatterySoc */
		82:  nil, /* MotorPower */
		83:  nil, /* VerticalRatio */
		84:  nil, /* StanceTimeBalance */
		85:  nil, /* StepLength */
		87:  nil, /* CycleLength16 */
		91:  nil, /* AbsolutePressure */
		92:  nil, /* Depth */
		93:  nil, /* NextStopDepth */
		94:  nil, /* NextStopTime */
		95:  nil, /* TimeToSurface */
		96:  nil, /* NdlTime */
		97:  nil, /* CnsLoad */
		98:  nil, /* N2Load */
		99:  nil, /* RespirationRate */
		108: nil, /* EnhancedRespirationRate */
		114: nil, /* Grit */
		115: nil, /* Flow */
		116: nil, /* CurrentStress */
		117: nil, /* EbikeTravelRange */
		118: nil, /* EbikeBatteryLevel */
		119: nil, /* EbikeAssistMode */
		120: nil, /* EbikeAssistLevelPercent */
		123: nil, /* AirTimeRemaining */
		124: nil, /* PressureSac */
		125: nil, /* VolumeSac */
		126: nil, /* Rmv */
		127: nil, /* AscentRate */
		129: nil, /* Po2 */
		139: nil, /* CoreTemperature */
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Record{
		Timestamp:                     typeconv.ToUint32[typedef.DateTime](vals[253]),
		PositionLat:                   typeconv.ToSint32[int32](vals[0]),
		PositionLong:                  typeconv.ToSint32[int32](vals[1]),
		Altitude:                      typeconv.ToUint16[uint16](vals[2]),
		HeartRate:                     typeconv.ToUint8[uint8](vals[3]),
		Cadence:                       typeconv.ToUint8[uint8](vals[4]),
		Distance:                      typeconv.ToUint32[uint32](vals[5]),
		Speed:                         typeconv.ToUint16[uint16](vals[6]),
		Power:                         typeconv.ToUint16[uint16](vals[7]),
		CompressedSpeedDistance:       typeconv.ToSliceByte[byte](vals[8]),
		Grade:                         typeconv.ToSint16[int16](vals[9]),
		Resistance:                    typeconv.ToUint8[uint8](vals[10]),
		TimeFromCourse:                typeconv.ToSint32[int32](vals[11]),
		CycleLength:                   typeconv.ToUint8[uint8](vals[12]),
		Temperature:                   typeconv.ToSint8[int8](vals[13]),
		Speed1S:                       typeconv.ToSliceUint8[uint8](vals[17]),
		Cycles:                        typeconv.ToUint8[uint8](vals[18]),
		TotalCycles:                   typeconv.ToUint32[uint32](vals[19]),
		CompressedAccumulatedPower:    typeconv.ToUint16[uint16](vals[28]),
		AccumulatedPower:              typeconv.ToUint32[uint32](vals[29]),
		LeftRightBalance:              typeconv.ToUint8[typedef.LeftRightBalance](vals[30]),
		GpsAccuracy:                   typeconv.ToUint8[uint8](vals[31]),
		VerticalSpeed:                 typeconv.ToSint16[int16](vals[32]),
		Calories:                      typeconv.ToUint16[uint16](vals[33]),
		VerticalOscillation:           typeconv.ToUint16[uint16](vals[39]),
		StanceTimePercent:             typeconv.ToUint16[uint16](vals[40]),
		StanceTime:                    typeconv.ToUint16[uint16](vals[41]),
		ActivityType:                  typeconv.ToEnum[typedef.ActivityType](vals[42]),
		LeftTorqueEffectiveness:       typeconv.ToUint8[uint8](vals[43]),
		RightTorqueEffectiveness:      typeconv.ToUint8[uint8](vals[44]),
		LeftPedalSmoothness:           typeconv.ToUint8[uint8](vals[45]),
		RightPedalSmoothness:          typeconv.ToUint8[uint8](vals[46]),
		CombinedPedalSmoothness:       typeconv.ToUint8[uint8](vals[47]),
		Time128:                       typeconv.ToUint8[uint8](vals[48]),
		StrokeType:                    typeconv.ToEnum[typedef.StrokeType](vals[49]),
		Zone:                          typeconv.ToUint8[uint8](vals[50]),
		BallSpeed:                     typeconv.ToUint16[uint16](vals[51]),
		Cadence256:                    typeconv.ToUint16[uint16](vals[52]),
		FractionalCadence:             typeconv.ToUint8[uint8](vals[53]),
		TotalHemoglobinConc:           typeconv.ToUint16[uint16](vals[54]),
		TotalHemoglobinConcMin:        typeconv.ToUint16[uint16](vals[55]),
		TotalHemoglobinConcMax:        typeconv.ToUint16[uint16](vals[56]),
		SaturatedHemoglobinPercent:    typeconv.ToUint16[uint16](vals[57]),
		SaturatedHemoglobinPercentMin: typeconv.ToUint16[uint16](vals[58]),
		SaturatedHemoglobinPercentMax: typeconv.ToUint16[uint16](vals[59]),
		DeviceIndex:                   typeconv.ToUint8[typedef.DeviceIndex](vals[62]),
		LeftPco:                       typeconv.ToSint8[int8](vals[67]),
		RightPco:                      typeconv.ToSint8[int8](vals[68]),
		LeftPowerPhase:                typeconv.ToSliceUint8[uint8](vals[69]),
		LeftPowerPhasePeak:            typeconv.ToSliceUint8[uint8](vals[70]),
		RightPowerPhase:               typeconv.ToSliceUint8[uint8](vals[71]),
		RightPowerPhasePeak:           typeconv.ToSliceUint8[uint8](vals[72]),
		EnhancedSpeed:                 typeconv.ToUint32[uint32](vals[73]),
		EnhancedAltitude:              typeconv.ToUint32[uint32](vals[78]),
		BatterySoc:                    typeconv.ToUint8[uint8](vals[81]),
		MotorPower:                    typeconv.ToUint16[uint16](vals[82]),
		VerticalRatio:                 typeconv.ToUint16[uint16](vals[83]),
		StanceTimeBalance:             typeconv.ToUint16[uint16](vals[84]),
		StepLength:                    typeconv.ToUint16[uint16](vals[85]),
		CycleLength16:                 typeconv.ToUint16[uint16](vals[87]),
		AbsolutePressure:              typeconv.ToUint32[uint32](vals[91]),
		Depth:                         typeconv.ToUint32[uint32](vals[92]),
		NextStopDepth:                 typeconv.ToUint32[uint32](vals[93]),
		NextStopTime:                  typeconv.ToUint32[uint32](vals[94]),
		TimeToSurface:                 typeconv.ToUint32[uint32](vals[95]),
		NdlTime:                       typeconv.ToUint32[uint32](vals[96]),
		CnsLoad:                       typeconv.ToUint8[uint8](vals[97]),
		N2Load:                        typeconv.ToUint16[uint16](vals[98]),
		RespirationRate:               typeconv.ToUint8[uint8](vals[99]),
		EnhancedRespirationRate:       typeconv.ToUint16[uint16](vals[108]),
		Grit:                          typeconv.ToFloat32[float32](vals[114]),
		Flow:                          typeconv.ToFloat32[float32](vals[115]),
		CurrentStress:                 typeconv.ToUint16[uint16](vals[116]),
		EbikeTravelRange:              typeconv.ToUint16[uint16](vals[117]),
		EbikeBatteryLevel:             typeconv.ToUint8[uint8](vals[118]),
		EbikeAssistMode:               typeconv.ToUint8[uint8](vals[119]),
		EbikeAssistLevelPercent:       typeconv.ToUint8[uint8](vals[120]),
		AirTimeRemaining:              typeconv.ToUint32[uint32](vals[123]),
		PressureSac:                   typeconv.ToUint16[uint16](vals[124]),
		VolumeSac:                     typeconv.ToUint16[uint16](vals[125]),
		Rmv:                           typeconv.ToUint16[uint16](vals[126]),
		AscentRate:                    typeconv.ToSint32[int32](vals[127]),
		Po2:                           typeconv.ToUint8[uint8](vals[129]),
		CoreTemperature:               typeconv.ToUint16[uint16](vals[139]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to Record mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumRecord)
func (m *Record) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumRecord {
		return
	}

	vals := [...]any{
		253: typeconv.ToUint32[uint32](m.Timestamp),
		0:   m.PositionLat,
		1:   m.PositionLong,
		2:   m.Altitude,
		3:   m.HeartRate,
		4:   m.Cadence,
		5:   m.Distance,
		6:   m.Speed,
		7:   m.Power,
		8:   m.CompressedSpeedDistance,
		9:   m.Grade,
		10:  m.Resistance,
		11:  m.TimeFromCourse,
		12:  m.CycleLength,
		13:  m.Temperature,
		17:  m.Speed1S,
		18:  m.Cycles,
		19:  m.TotalCycles,
		28:  m.CompressedAccumulatedPower,
		29:  m.AccumulatedPower,
		30:  typeconv.ToUint8[uint8](m.LeftRightBalance),
		31:  m.GpsAccuracy,
		32:  m.VerticalSpeed,
		33:  m.Calories,
		39:  m.VerticalOscillation,
		40:  m.StanceTimePercent,
		41:  m.StanceTime,
		42:  typeconv.ToEnum[byte](m.ActivityType),
		43:  m.LeftTorqueEffectiveness,
		44:  m.RightTorqueEffectiveness,
		45:  m.LeftPedalSmoothness,
		46:  m.RightPedalSmoothness,
		47:  m.CombinedPedalSmoothness,
		48:  m.Time128,
		49:  typeconv.ToEnum[byte](m.StrokeType),
		50:  m.Zone,
		51:  m.BallSpeed,
		52:  m.Cadence256,
		53:  m.FractionalCadence,
		54:  m.TotalHemoglobinConc,
		55:  m.TotalHemoglobinConcMin,
		56:  m.TotalHemoglobinConcMax,
		57:  m.SaturatedHemoglobinPercent,
		58:  m.SaturatedHemoglobinPercentMin,
		59:  m.SaturatedHemoglobinPercentMax,
		62:  typeconv.ToUint8[uint8](m.DeviceIndex),
		67:  m.LeftPco,
		68:  m.RightPco,
		69:  m.LeftPowerPhase,
		70:  m.LeftPowerPhasePeak,
		71:  m.RightPowerPhase,
		72:  m.RightPowerPhasePeak,
		73:  m.EnhancedSpeed,
		78:  m.EnhancedAltitude,
		81:  m.BatterySoc,
		82:  m.MotorPower,
		83:  m.VerticalRatio,
		84:  m.StanceTimeBalance,
		85:  m.StepLength,
		87:  m.CycleLength16,
		91:  m.AbsolutePressure,
		92:  m.Depth,
		93:  m.NextStopDepth,
		94:  m.NextStopTime,
		95:  m.TimeToSurface,
		96:  m.NdlTime,
		97:  m.CnsLoad,
		98:  m.N2Load,
		99:  m.RespirationRate,
		108: m.EnhancedRespirationRate,
		114: m.Grit,
		115: m.Flow,
		116: m.CurrentStress,
		117: m.EbikeTravelRange,
		118: m.EbikeBatteryLevel,
		119: m.EbikeAssistMode,
		120: m.EbikeAssistLevelPercent,
		123: m.AirTimeRemaining,
		124: m.PressureSac,
		125: m.VolumeSac,
		126: m.Rmv,
		127: m.AscentRate,
		129: m.Po2,
		139: m.CoreTemperature,
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		field.Value = vals[field.Num]
	}

	mesg.DeveloperFields = m.DeveloperFields
}
