// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Schedule is a Schedule message.
type Schedule struct {
	Manufacturer  typedef.Manufacturer // Corresponds to file_id of scheduled workout / course.
	Product       uint16               // Corresponds to file_id of scheduled workout / course.
	SerialNumber  uint32               // Corresponds to file_id of scheduled workout / course.
	TimeCreated   typedef.DateTime     // Corresponds to file_id of scheduled workout / course.
	Completed     bool                 // TRUE if this activity has been started
	Type          typedef.Schedule
	ScheduledTime typedef.LocalDateTime

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSchedule creates new Schedule struct based on given mesg. If mesg is nil or mesg.Num is not equal to Schedule mesg number, it will return nil.
func NewSchedule(mesg proto.Message) *Schedule {
	if mesg.Num != typedef.MesgNumSchedule {
		return nil
	}

	vals := [7]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Schedule{
		Manufacturer:  typeconv.ToUint16[typedef.Manufacturer](vals[0]),
		Product:       typeconv.ToUint16[uint16](vals[1]),
		SerialNumber:  typeconv.ToUint32z[uint32](vals[2]),
		TimeCreated:   typeconv.ToUint32[typedef.DateTime](vals[3]),
		Completed:     typeconv.ToBool[bool](vals[4]),
		Type:          typeconv.ToEnum[typedef.Schedule](vals[5]),
		ScheduledTime: typeconv.ToUint32[typedef.LocalDateTime](vals[6]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts Schedule into proto.Message.
func (m *Schedule) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumSchedule)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint16[uint16](m.Manufacturer) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = typeconv.ToUint16[uint16](m.Manufacturer)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Product != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.Product
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32z[uint32](m.SerialNumber) != basetype.Uint32zInvalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = typeconv.ToUint32z[uint32](m.SerialNumber)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.TimeCreated) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = typeconv.ToUint32[uint32](m.TimeCreated)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Completed != false {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.Completed
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Type) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = typeconv.ToEnum[byte](m.Type)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.ScheduledTime) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = typeconv.ToUint32[uint32](m.ScheduledTime)
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of Schedule's valid fields.
func (m *Schedule) size() byte {
	var size byte
	if typeconv.ToUint16[uint16](m.Manufacturer) != basetype.Uint16Invalid {
		size++
	}
	if m.Product != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint32z[uint32](m.SerialNumber) != basetype.Uint32zInvalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.TimeCreated) != basetype.Uint32Invalid {
		size++
	}
	if m.Completed != false {
		size++
	}
	if typeconv.ToEnum[byte](m.Type) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.ScheduledTime) != basetype.Uint32Invalid {
		size++
	}
	return size
}
