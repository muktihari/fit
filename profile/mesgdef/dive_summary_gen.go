// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"math"
	"time"
)

// DiveSummary is a DiveSummary message.
//
// Note: The order of the fields is optimized using a memory alignment algorithm.
// Do not rely on field indices, such as when using reflection.
type DiveSummary struct {
	Timestamp       time.Time // Units: s
	AvgDepth        uint32    // Scale: 1000; Units: m; 0 if above water
	MaxDepth        uint32    // Scale: 1000; Units: m; 0 if above water
	SurfaceInterval uint32    // Units: s; Time since end of last dive
	DiveNumber      uint32
	BottomTime      uint32 // Scale: 1000; Units: s
	DescentTime     uint32 // Scale: 1000; Units: s; Time to reach deepest level stop
	AscentTime      uint32 // Scale: 1000; Units: s; Time after leaving bottom until reaching surface
	AvgAscentRate   int32  // Scale: 1000; Units: m/s; Average ascent rate, not including descents or stops
	AvgDescentRate  uint32 // Scale: 1000; Units: m/s; Average descent rate, not including ascents or stops
	MaxAscentRate   uint32 // Scale: 1000; Units: m/s; Maximum ascent rate
	MaxDescentRate  uint32 // Scale: 1000; Units: m/s; Maximum descent rate
	HangTime        uint32 // Scale: 1000; Units: s; Time spent neither ascending nor descending
	ReferenceMesg   typedef.MesgNum
	ReferenceIndex  typedef.MessageIndex
	StartN2         uint16 // Units: percent
	EndN2           uint16 // Units: percent
	O2Toxicity      uint16 // Units: OTUs
	AvgPressureSac  uint16 // Scale: 100; Units: bar/min; Average pressure-based surface air consumption
	AvgVolumeSac    uint16 // Scale: 100; Units: L/min; Average volumetric surface air consumption
	AvgRmv          uint16 // Scale: 100; Units: L/min; Average respiratory minute volume
	StartCns        uint8  // Units: percent
	EndCns          uint8  // Units: percent

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewDiveSummary creates new DiveSummary struct based on given mesg.
// If mesg is nil, it will return DiveSummary with all fields being set to its corresponding invalid value.
func NewDiveSummary(mesg *proto.Message) *DiveSummary {
	vals := [254]proto.Value{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num > 253 {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &DiveSummary{
		Timestamp:       datetime.ToTime(vals[253].Uint32()),
		ReferenceMesg:   typedef.MesgNum(vals[0].Uint16()),
		ReferenceIndex:  typedef.MessageIndex(vals[1].Uint16()),
		AvgDepth:        vals[2].Uint32(),
		MaxDepth:        vals[3].Uint32(),
		SurfaceInterval: vals[4].Uint32(),
		StartCns:        vals[5].Uint8(),
		EndCns:          vals[6].Uint8(),
		StartN2:         vals[7].Uint16(),
		EndN2:           vals[8].Uint16(),
		O2Toxicity:      vals[9].Uint16(),
		DiveNumber:      vals[10].Uint32(),
		BottomTime:      vals[11].Uint32(),
		AvgPressureSac:  vals[12].Uint16(),
		AvgVolumeSac:    vals[13].Uint16(),
		AvgRmv:          vals[14].Uint16(),
		DescentTime:     vals[15].Uint32(),
		AscentTime:      vals[16].Uint32(),
		AvgAscentRate:   vals[17].Int32(),
		AvgDescentRate:  vals[22].Uint32(),
		MaxAscentRate:   vals[23].Uint32(),
		MaxDescentRate:  vals[24].Uint32(),
		HangTime:        vals[25].Uint32(),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts DiveSummary into proto.Message. If options is nil, default options will be used.
func (m *DiveSummary) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	arr := pool.Get().(*[poolsize]proto.Field)
	fields := arr[:0]

	mesg := proto.Message{Num: typedef.MesgNumDiveSummary}

	if !m.Timestamp.Before(datetime.Epoch()) {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = proto.Uint32(uint32(m.Timestamp.Sub(datetime.Epoch()).Seconds()))
		fields = append(fields, field)
	}
	if uint16(m.ReferenceMesg) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = proto.Uint16(uint16(m.ReferenceMesg))
		fields = append(fields, field)
	}
	if uint16(m.ReferenceIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = proto.Uint16(uint16(m.ReferenceIndex))
		fields = append(fields, field)
	}
	if m.AvgDepth != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = proto.Uint32(m.AvgDepth)
		fields = append(fields, field)
	}
	if m.MaxDepth != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = proto.Uint32(m.MaxDepth)
		fields = append(fields, field)
	}
	if m.SurfaceInterval != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = proto.Uint32(m.SurfaceInterval)
		fields = append(fields, field)
	}
	if m.StartCns != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = proto.Uint8(m.StartCns)
		fields = append(fields, field)
	}
	if m.EndCns != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = proto.Uint8(m.EndCns)
		fields = append(fields, field)
	}
	if m.StartN2 != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = proto.Uint16(m.StartN2)
		fields = append(fields, field)
	}
	if m.EndN2 != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = proto.Uint16(m.EndN2)
		fields = append(fields, field)
	}
	if m.O2Toxicity != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = proto.Uint16(m.O2Toxicity)
		fields = append(fields, field)
	}
	if m.DiveNumber != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = proto.Uint32(m.DiveNumber)
		fields = append(fields, field)
	}
	if m.BottomTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 11)
		field.Value = proto.Uint32(m.BottomTime)
		fields = append(fields, field)
	}
	if m.AvgPressureSac != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 12)
		field.Value = proto.Uint16(m.AvgPressureSac)
		fields = append(fields, field)
	}
	if m.AvgVolumeSac != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 13)
		field.Value = proto.Uint16(m.AvgVolumeSac)
		fields = append(fields, field)
	}
	if m.AvgRmv != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 14)
		field.Value = proto.Uint16(m.AvgRmv)
		fields = append(fields, field)
	}
	if m.DescentTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 15)
		field.Value = proto.Uint32(m.DescentTime)
		fields = append(fields, field)
	}
	if m.AscentTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 16)
		field.Value = proto.Uint32(m.AscentTime)
		fields = append(fields, field)
	}
	if m.AvgAscentRate != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 17)
		field.Value = proto.Int32(m.AvgAscentRate)
		fields = append(fields, field)
	}
	if m.AvgDescentRate != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 22)
		field.Value = proto.Uint32(m.AvgDescentRate)
		fields = append(fields, field)
	}
	if m.MaxAscentRate != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 23)
		field.Value = proto.Uint32(m.MaxAscentRate)
		fields = append(fields, field)
	}
	if m.MaxDescentRate != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 24)
		field.Value = proto.Uint32(m.MaxDescentRate)
		fields = append(fields, field)
	}
	if m.HangTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 25)
		field.Value = proto.Uint32(m.HangTime)
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)
	pool.Put(arr)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// TimestampUint32 returns Timestamp in uint32 (seconds since FIT's epoch) instead of time.Time.
func (m *DiveSummary) TimestampUint32() uint32 { return datetime.ToUint32(m.Timestamp) }

// AvgDepthScaled return AvgDepth in its scaled value.
// If AvgDepth value is invalid, float64 invalid value will be returned.
//
// Scale: 1000; Units: m; 0 if above water
func (m *DiveSummary) AvgDepthScaled() float64 {
	if m.AvgDepth == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.AvgDepth)/1000 - 0
}

// MaxDepthScaled return MaxDepth in its scaled value.
// If MaxDepth value is invalid, float64 invalid value will be returned.
//
// Scale: 1000; Units: m; 0 if above water
func (m *DiveSummary) MaxDepthScaled() float64 {
	if m.MaxDepth == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.MaxDepth)/1000 - 0
}

// BottomTimeScaled return BottomTime in its scaled value.
// If BottomTime value is invalid, float64 invalid value will be returned.
//
// Scale: 1000; Units: s
func (m *DiveSummary) BottomTimeScaled() float64 {
	if m.BottomTime == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.BottomTime)/1000 - 0
}

// AvgPressureSacScaled return AvgPressureSac in its scaled value.
// If AvgPressureSac value is invalid, float64 invalid value will be returned.
//
// Scale: 100; Units: bar/min; Average pressure-based surface air consumption
func (m *DiveSummary) AvgPressureSacScaled() float64 {
	if m.AvgPressureSac == basetype.Uint16Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.AvgPressureSac)/100 - 0
}

// AvgVolumeSacScaled return AvgVolumeSac in its scaled value.
// If AvgVolumeSac value is invalid, float64 invalid value will be returned.
//
// Scale: 100; Units: L/min; Average volumetric surface air consumption
func (m *DiveSummary) AvgVolumeSacScaled() float64 {
	if m.AvgVolumeSac == basetype.Uint16Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.AvgVolumeSac)/100 - 0
}

// AvgRmvScaled return AvgRmv in its scaled value.
// If AvgRmv value is invalid, float64 invalid value will be returned.
//
// Scale: 100; Units: L/min; Average respiratory minute volume
func (m *DiveSummary) AvgRmvScaled() float64 {
	if m.AvgRmv == basetype.Uint16Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.AvgRmv)/100 - 0
}

// DescentTimeScaled return DescentTime in its scaled value.
// If DescentTime value is invalid, float64 invalid value will be returned.
//
// Scale: 1000; Units: s; Time to reach deepest level stop
func (m *DiveSummary) DescentTimeScaled() float64 {
	if m.DescentTime == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.DescentTime)/1000 - 0
}

// AscentTimeScaled return AscentTime in its scaled value.
// If AscentTime value is invalid, float64 invalid value will be returned.
//
// Scale: 1000; Units: s; Time after leaving bottom until reaching surface
func (m *DiveSummary) AscentTimeScaled() float64 {
	if m.AscentTime == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.AscentTime)/1000 - 0
}

// AvgAscentRateScaled return AvgAscentRate in its scaled value.
// If AvgAscentRate value is invalid, float64 invalid value will be returned.
//
// Scale: 1000; Units: m/s; Average ascent rate, not including descents or stops
func (m *DiveSummary) AvgAscentRateScaled() float64 {
	if m.AvgAscentRate == basetype.Sint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.AvgAscentRate)/1000 - 0
}

// AvgDescentRateScaled return AvgDescentRate in its scaled value.
// If AvgDescentRate value is invalid, float64 invalid value will be returned.
//
// Scale: 1000; Units: m/s; Average descent rate, not including ascents or stops
func (m *DiveSummary) AvgDescentRateScaled() float64 {
	if m.AvgDescentRate == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.AvgDescentRate)/1000 - 0
}

// MaxAscentRateScaled return MaxAscentRate in its scaled value.
// If MaxAscentRate value is invalid, float64 invalid value will be returned.
//
// Scale: 1000; Units: m/s; Maximum ascent rate
func (m *DiveSummary) MaxAscentRateScaled() float64 {
	if m.MaxAscentRate == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.MaxAscentRate)/1000 - 0
}

// MaxDescentRateScaled return MaxDescentRate in its scaled value.
// If MaxDescentRate value is invalid, float64 invalid value will be returned.
//
// Scale: 1000; Units: m/s; Maximum descent rate
func (m *DiveSummary) MaxDescentRateScaled() float64 {
	if m.MaxDescentRate == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.MaxDescentRate)/1000 - 0
}

// HangTimeScaled return HangTime in its scaled value.
// If HangTime value is invalid, float64 invalid value will be returned.
//
// Scale: 1000; Units: s; Time spent neither ascending nor descending
func (m *DiveSummary) HangTimeScaled() float64 {
	if m.HangTime == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.HangTime)/1000 - 0
}

// SetTimestamp sets Timestamp value.
//
// Units: s
func (m *DiveSummary) SetTimestamp(v time.Time) *DiveSummary {
	m.Timestamp = v
	return m
}

// SetReferenceMesg sets ReferenceMesg value.
func (m *DiveSummary) SetReferenceMesg(v typedef.MesgNum) *DiveSummary {
	m.ReferenceMesg = v
	return m
}

// SetReferenceIndex sets ReferenceIndex value.
func (m *DiveSummary) SetReferenceIndex(v typedef.MessageIndex) *DiveSummary {
	m.ReferenceIndex = v
	return m
}

// SetAvgDepth sets AvgDepth value.
//
// Scale: 1000; Units: m; 0 if above water
func (m *DiveSummary) SetAvgDepth(v uint32) *DiveSummary {
	m.AvgDepth = v
	return m
}

// SetAvgDepthScaled is similar to SetAvgDepth except it accepts a scaled value.
// This method automatically converts the given value to its uint32 form, discarding any applied scale and offset.
//
// Scale: 1000; Units: m; 0 if above water
func (m *DiveSummary) SetAvgDepthScaled(v float64) *DiveSummary {
	unscaled := (v + 0) * 1000
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint32Invalid) {
		m.AvgDepth = uint32(basetype.Uint32Invalid)
		return m
	}
	m.AvgDepth = uint32(unscaled)
	return m
}

// SetMaxDepth sets MaxDepth value.
//
// Scale: 1000; Units: m; 0 if above water
func (m *DiveSummary) SetMaxDepth(v uint32) *DiveSummary {
	m.MaxDepth = v
	return m
}

// SetMaxDepthScaled is similar to SetMaxDepth except it accepts a scaled value.
// This method automatically converts the given value to its uint32 form, discarding any applied scale and offset.
//
// Scale: 1000; Units: m; 0 if above water
func (m *DiveSummary) SetMaxDepthScaled(v float64) *DiveSummary {
	unscaled := (v + 0) * 1000
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint32Invalid) {
		m.MaxDepth = uint32(basetype.Uint32Invalid)
		return m
	}
	m.MaxDepth = uint32(unscaled)
	return m
}

// SetSurfaceInterval sets SurfaceInterval value.
//
// Units: s; Time since end of last dive
func (m *DiveSummary) SetSurfaceInterval(v uint32) *DiveSummary {
	m.SurfaceInterval = v
	return m
}

// SetStartCns sets StartCns value.
//
// Units: percent
func (m *DiveSummary) SetStartCns(v uint8) *DiveSummary {
	m.StartCns = v
	return m
}

// SetEndCns sets EndCns value.
//
// Units: percent
func (m *DiveSummary) SetEndCns(v uint8) *DiveSummary {
	m.EndCns = v
	return m
}

// SetStartN2 sets StartN2 value.
//
// Units: percent
func (m *DiveSummary) SetStartN2(v uint16) *DiveSummary {
	m.StartN2 = v
	return m
}

// SetEndN2 sets EndN2 value.
//
// Units: percent
func (m *DiveSummary) SetEndN2(v uint16) *DiveSummary {
	m.EndN2 = v
	return m
}

// SetO2Toxicity sets O2Toxicity value.
//
// Units: OTUs
func (m *DiveSummary) SetO2Toxicity(v uint16) *DiveSummary {
	m.O2Toxicity = v
	return m
}

// SetDiveNumber sets DiveNumber value.
func (m *DiveSummary) SetDiveNumber(v uint32) *DiveSummary {
	m.DiveNumber = v
	return m
}

// SetBottomTime sets BottomTime value.
//
// Scale: 1000; Units: s
func (m *DiveSummary) SetBottomTime(v uint32) *DiveSummary {
	m.BottomTime = v
	return m
}

// SetBottomTimeScaled is similar to SetBottomTime except it accepts a scaled value.
// This method automatically converts the given value to its uint32 form, discarding any applied scale and offset.
//
// Scale: 1000; Units: s
func (m *DiveSummary) SetBottomTimeScaled(v float64) *DiveSummary {
	unscaled := (v + 0) * 1000
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint32Invalid) {
		m.BottomTime = uint32(basetype.Uint32Invalid)
		return m
	}
	m.BottomTime = uint32(unscaled)
	return m
}

// SetAvgPressureSac sets AvgPressureSac value.
//
// Scale: 100; Units: bar/min; Average pressure-based surface air consumption
func (m *DiveSummary) SetAvgPressureSac(v uint16) *DiveSummary {
	m.AvgPressureSac = v
	return m
}

// SetAvgPressureSacScaled is similar to SetAvgPressureSac except it accepts a scaled value.
// This method automatically converts the given value to its uint16 form, discarding any applied scale and offset.
//
// Scale: 100; Units: bar/min; Average pressure-based surface air consumption
func (m *DiveSummary) SetAvgPressureSacScaled(v float64) *DiveSummary {
	unscaled := (v + 0) * 100
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint16Invalid) {
		m.AvgPressureSac = uint16(basetype.Uint16Invalid)
		return m
	}
	m.AvgPressureSac = uint16(unscaled)
	return m
}

// SetAvgVolumeSac sets AvgVolumeSac value.
//
// Scale: 100; Units: L/min; Average volumetric surface air consumption
func (m *DiveSummary) SetAvgVolumeSac(v uint16) *DiveSummary {
	m.AvgVolumeSac = v
	return m
}

// SetAvgVolumeSacScaled is similar to SetAvgVolumeSac except it accepts a scaled value.
// This method automatically converts the given value to its uint16 form, discarding any applied scale and offset.
//
// Scale: 100; Units: L/min; Average volumetric surface air consumption
func (m *DiveSummary) SetAvgVolumeSacScaled(v float64) *DiveSummary {
	unscaled := (v + 0) * 100
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint16Invalid) {
		m.AvgVolumeSac = uint16(basetype.Uint16Invalid)
		return m
	}
	m.AvgVolumeSac = uint16(unscaled)
	return m
}

// SetAvgRmv sets AvgRmv value.
//
// Scale: 100; Units: L/min; Average respiratory minute volume
func (m *DiveSummary) SetAvgRmv(v uint16) *DiveSummary {
	m.AvgRmv = v
	return m
}

// SetAvgRmvScaled is similar to SetAvgRmv except it accepts a scaled value.
// This method automatically converts the given value to its uint16 form, discarding any applied scale and offset.
//
// Scale: 100; Units: L/min; Average respiratory minute volume
func (m *DiveSummary) SetAvgRmvScaled(v float64) *DiveSummary {
	unscaled := (v + 0) * 100
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint16Invalid) {
		m.AvgRmv = uint16(basetype.Uint16Invalid)
		return m
	}
	m.AvgRmv = uint16(unscaled)
	return m
}

// SetDescentTime sets DescentTime value.
//
// Scale: 1000; Units: s; Time to reach deepest level stop
func (m *DiveSummary) SetDescentTime(v uint32) *DiveSummary {
	m.DescentTime = v
	return m
}

// SetDescentTimeScaled is similar to SetDescentTime except it accepts a scaled value.
// This method automatically converts the given value to its uint32 form, discarding any applied scale and offset.
//
// Scale: 1000; Units: s; Time to reach deepest level stop
func (m *DiveSummary) SetDescentTimeScaled(v float64) *DiveSummary {
	unscaled := (v + 0) * 1000
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint32Invalid) {
		m.DescentTime = uint32(basetype.Uint32Invalid)
		return m
	}
	m.DescentTime = uint32(unscaled)
	return m
}

// SetAscentTime sets AscentTime value.
//
// Scale: 1000; Units: s; Time after leaving bottom until reaching surface
func (m *DiveSummary) SetAscentTime(v uint32) *DiveSummary {
	m.AscentTime = v
	return m
}

// SetAscentTimeScaled is similar to SetAscentTime except it accepts a scaled value.
// This method automatically converts the given value to its uint32 form, discarding any applied scale and offset.
//
// Scale: 1000; Units: s; Time after leaving bottom until reaching surface
func (m *DiveSummary) SetAscentTimeScaled(v float64) *DiveSummary {
	unscaled := (v + 0) * 1000
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint32Invalid) {
		m.AscentTime = uint32(basetype.Uint32Invalid)
		return m
	}
	m.AscentTime = uint32(unscaled)
	return m
}

// SetAvgAscentRate sets AvgAscentRate value.
//
// Scale: 1000; Units: m/s; Average ascent rate, not including descents or stops
func (m *DiveSummary) SetAvgAscentRate(v int32) *DiveSummary {
	m.AvgAscentRate = v
	return m
}

// SetAvgAscentRateScaled is similar to SetAvgAscentRate except it accepts a scaled value.
// This method automatically converts the given value to its int32 form, discarding any applied scale and offset.
//
// Scale: 1000; Units: m/s; Average ascent rate, not including descents or stops
func (m *DiveSummary) SetAvgAscentRateScaled(v float64) *DiveSummary {
	unscaled := (v + 0) * 1000
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Sint32Invalid) {
		m.AvgAscentRate = int32(basetype.Sint32Invalid)
		return m
	}
	m.AvgAscentRate = int32(unscaled)
	return m
}

// SetAvgDescentRate sets AvgDescentRate value.
//
// Scale: 1000; Units: m/s; Average descent rate, not including ascents or stops
func (m *DiveSummary) SetAvgDescentRate(v uint32) *DiveSummary {
	m.AvgDescentRate = v
	return m
}

// SetAvgDescentRateScaled is similar to SetAvgDescentRate except it accepts a scaled value.
// This method automatically converts the given value to its uint32 form, discarding any applied scale and offset.
//
// Scale: 1000; Units: m/s; Average descent rate, not including ascents or stops
func (m *DiveSummary) SetAvgDescentRateScaled(v float64) *DiveSummary {
	unscaled := (v + 0) * 1000
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint32Invalid) {
		m.AvgDescentRate = uint32(basetype.Uint32Invalid)
		return m
	}
	m.AvgDescentRate = uint32(unscaled)
	return m
}

// SetMaxAscentRate sets MaxAscentRate value.
//
// Scale: 1000; Units: m/s; Maximum ascent rate
func (m *DiveSummary) SetMaxAscentRate(v uint32) *DiveSummary {
	m.MaxAscentRate = v
	return m
}

// SetMaxAscentRateScaled is similar to SetMaxAscentRate except it accepts a scaled value.
// This method automatically converts the given value to its uint32 form, discarding any applied scale and offset.
//
// Scale: 1000; Units: m/s; Maximum ascent rate
func (m *DiveSummary) SetMaxAscentRateScaled(v float64) *DiveSummary {
	unscaled := (v + 0) * 1000
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint32Invalid) {
		m.MaxAscentRate = uint32(basetype.Uint32Invalid)
		return m
	}
	m.MaxAscentRate = uint32(unscaled)
	return m
}

// SetMaxDescentRate sets MaxDescentRate value.
//
// Scale: 1000; Units: m/s; Maximum descent rate
func (m *DiveSummary) SetMaxDescentRate(v uint32) *DiveSummary {
	m.MaxDescentRate = v
	return m
}

// SetMaxDescentRateScaled is similar to SetMaxDescentRate except it accepts a scaled value.
// This method automatically converts the given value to its uint32 form, discarding any applied scale and offset.
//
// Scale: 1000; Units: m/s; Maximum descent rate
func (m *DiveSummary) SetMaxDescentRateScaled(v float64) *DiveSummary {
	unscaled := (v + 0) * 1000
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint32Invalid) {
		m.MaxDescentRate = uint32(basetype.Uint32Invalid)
		return m
	}
	m.MaxDescentRate = uint32(unscaled)
	return m
}

// SetHangTime sets HangTime value.
//
// Scale: 1000; Units: s; Time spent neither ascending nor descending
func (m *DiveSummary) SetHangTime(v uint32) *DiveSummary {
	m.HangTime = v
	return m
}

// SetHangTimeScaled is similar to SetHangTime except it accepts a scaled value.
// This method automatically converts the given value to its uint32 form, discarding any applied scale and offset.
//
// Scale: 1000; Units: s; Time spent neither ascending nor descending
func (m *DiveSummary) SetHangTimeScaled(v float64) *DiveSummary {
	unscaled := (v + 0) * 1000
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint32Invalid) {
		m.HangTime = uint32(basetype.Uint32Invalid)
		return m
	}
	m.HangTime = uint32(unscaled)
	return m
}

// SetDeveloperFields DiveSummary's DeveloperFields.
func (m *DiveSummary) SetDeveloperFields(developerFields ...proto.DeveloperField) *DiveSummary {
	m.DeveloperFields = developerFields
	return m
}
