// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// ObdiiData is a ObdiiData message.
type ObdiiData struct {
	Timestamp        typedef.DateTime // Units: s; Timestamp message was output
	TimestampMs      uint16           // Units: ms; Fractional part of timestamp, added to timestamp
	TimeOffset       []uint16         // Array: [N]; Units: ms; Offset of PID reading [i] from start_timestamp+start_timestamp_ms. Readings may span accross seconds.
	Pid              byte             // Parameter ID
	RawData          []byte           // Array: [N]; Raw parameter data
	PidDataSize      []uint8          // Array: [N]; Optional, data size of PID[i]. If not specified refer to SAE J1979.
	SystemTime       []uint32         // Array: [N]; System time associated with sample expressed in ms, can be used instead of time_offset. There will be a system_time value for each raw_data element. For multibyte pids the system_time is repeated.
	StartTimestamp   typedef.DateTime // Timestamp of first sample recorded in the message. Used with time_offset to generate time of each sample
	StartTimestampMs uint16           // Units: ms; Fractional part of start_timestamp

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewObdiiData creates new ObdiiData struct based on given mesg. If mesg is nil or mesg.Num is not equal to ObdiiData mesg number, it will return nil.
func NewObdiiData(mesg proto.Message) *ObdiiData {
	if mesg.Num != typedef.MesgNumObdiiData {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &ObdiiData{
		Timestamp:        typeconv.ToUint32[typedef.DateTime](vals[253]),
		TimestampMs:      typeconv.ToUint16[uint16](vals[0]),
		TimeOffset:       typeconv.ToSliceUint16[uint16](vals[1]),
		Pid:              typeconv.ToByte[byte](vals[2]),
		RawData:          typeconv.ToSliceByte[byte](vals[3]),
		PidDataSize:      typeconv.ToSliceUint8[uint8](vals[4]),
		SystemTime:       typeconv.ToSliceUint32[uint32](vals[5]),
		StartTimestamp:   typeconv.ToUint32[typedef.DateTime](vals[6]),
		StartTimestampMs: typeconv.ToUint16[uint16](vals[7]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts ObdiiData into proto.Message.
func (m *ObdiiData) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumObdiiData)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.TimestampMs
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimeOffset != nil {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.TimeOffset
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Pid != basetype.ByteInvalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.Pid
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.RawData != nil {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.RawData
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.PidDataSize != nil {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.PidDataSize
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.SystemTime != nil {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.SystemTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.StartTimestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = typeconv.ToUint32[uint32](m.StartTimestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.StartTimestampMs != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = m.StartTimestampMs
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of ObdiiData's valid fields.
func (m *ObdiiData) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		size++
	}
	if m.TimeOffset != nil {
		size++
	}
	if m.Pid != basetype.ByteInvalid {
		size++
	}
	if m.RawData != nil {
		size++
	}
	if m.PidDataSize != nil {
		size++
	}
	if m.SystemTime != nil {
		size++
	}
	if typeconv.ToUint32[uint32](m.StartTimestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.StartTimestampMs != basetype.Uint16Invalid {
		size++
	}
	return size
}
