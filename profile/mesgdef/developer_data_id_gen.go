// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// DeveloperDataId is a DeveloperDataId message.
type DeveloperDataId struct {
	DeveloperId        []byte // Array: [N];
	ApplicationId      []byte // Array: [N];
	ManufacturerId     typedef.Manufacturer
	DeveloperDataIndex uint8
	ApplicationVersion uint32
}

// NewDeveloperDataId creates new DeveloperDataId struct based on given mesg. If mesg is nil or mesg.Num is not equal to DeveloperDataId mesg number, it will return nil.
func NewDeveloperDataId(mesg proto.Message) *DeveloperDataId {
	if mesg.Num != typedef.MesgNumDeveloperDataId {
		return nil
	}

	vals := [5]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &DeveloperDataId{
		DeveloperId:        typeconv.ToSliceByte[byte](vals[0]),
		ApplicationId:      typeconv.ToSliceByte[byte](vals[1]),
		ManufacturerId:     typeconv.ToUint16[typedef.Manufacturer](vals[2]),
		DeveloperDataIndex: typeconv.ToUint8[uint8](vals[3]),
		ApplicationVersion: typeconv.ToUint32[uint32](vals[4]),
	}
}

// ToMesg converts DeveloperDataId into proto.Message.
func (m *DeveloperDataId) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumDeveloperDataId)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if m.DeveloperId != nil {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.DeveloperId
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ApplicationId != nil {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.ApplicationId
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint16[uint16](m.ManufacturerId) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = typeconv.ToUint16[uint16](m.ManufacturerId)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.DeveloperDataIndex != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.DeveloperDataIndex
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ApplicationVersion != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.ApplicationVersion
		mesg.Fields = append(mesg.Fields, field)
	}

	return mesg
}

// size returns size of DeveloperDataId's valid fields.
func (m *DeveloperDataId) size() byte {
	var size byte
	if m.DeveloperId != nil {
		size++
	}
	if m.ApplicationId != nil {
		size++
	}
	if typeconv.ToUint16[uint16](m.ManufacturerId) != basetype.Uint16Invalid {
		size++
	}
	if m.DeveloperDataIndex != basetype.Uint8Invalid {
		size++
	}
	if m.ApplicationVersion != basetype.Uint32Invalid {
		size++
	}
	return size
}
