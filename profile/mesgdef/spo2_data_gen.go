// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// Spo2Data is a Spo2Data message.
//
// Note: The order of the fields is optimized using a memory alignment algorithm.
// Do not rely on field indices, such as when using reflection.
type Spo2Data struct {
	Timestamp         time.Time // Units: s
	ReadingSpo2       uint8     // Units: percent
	ReadingConfidence uint8
	Mode              typedef.Spo2MeasurementType // Mode when data was captured

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSpo2Data creates new Spo2Data struct based on given mesg.
// If mesg is nil, it will return Spo2Data with all fields being set to its corresponding invalid value.
func NewSpo2Data(mesg *proto.Message) *Spo2Data {
	vals := [254]proto.Value{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num > 253 {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &Spo2Data{
		Timestamp:         datetime.ToTime(vals[253].Uint32()),
		ReadingSpo2:       vals[0].Uint8(),
		ReadingConfidence: vals[1].Uint8(),
		Mode:              typedef.Spo2MeasurementType(vals[2].Uint8()),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts Spo2Data into proto.Message. If options is nil, default options will be used.
func (m *Spo2Data) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	arr := pool.Get().(*[255]proto.Field)
	defer pool.Put(arr)

	fields := arr[:0] // Create slice from array with zero len.
	mesg := proto.Message{Num: typedef.MesgNumSpo2Data}

	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = proto.Uint32(datetime.ToUint32(m.Timestamp))
		fields = append(fields, field)
	}
	if m.ReadingSpo2 != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = proto.Uint8(m.ReadingSpo2)
		fields = append(fields, field)
	}
	if m.ReadingConfidence != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = proto.Uint8(m.ReadingConfidence)
		fields = append(fields, field)
	}
	if byte(m.Mode) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = proto.Uint8(byte(m.Mode))
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// TimestampUint32 returns Timestamp in uint32 (seconds since FIT's epoch) instead of time.Time.
func (m *Spo2Data) TimestampUint32() uint32 { return datetime.ToUint32(m.Timestamp) }

// SetTimestamp sets Timestamp value.
//
// Units: s
func (m *Spo2Data) SetTimestamp(v time.Time) *Spo2Data {
	m.Timestamp = v
	return m
}

// SetReadingSpo2 sets ReadingSpo2 value.
//
// Units: percent
func (m *Spo2Data) SetReadingSpo2(v uint8) *Spo2Data {
	m.ReadingSpo2 = v
	return m
}

// SetReadingConfidence sets ReadingConfidence value.
func (m *Spo2Data) SetReadingConfidence(v uint8) *Spo2Data {
	m.ReadingConfidence = v
	return m
}

// SetMode sets Mode value.
//
// Mode when data was captured
func (m *Spo2Data) SetMode(v typedef.Spo2MeasurementType) *Spo2Data {
	m.Mode = v
	return m
}

// SetDeveloperFields Spo2Data's DeveloperFields.
func (m *Spo2Data) SetDeveloperFields(developerFields ...proto.DeveloperField) *Spo2Data {
	m.DeveloperFields = developerFields
	return m
}
