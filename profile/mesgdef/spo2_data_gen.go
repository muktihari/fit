// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Spo2Data is a Spo2Data message.
type Spo2Data struct {
	Timestamp         typedef.DateTime // Units: s;
	ReadingSpo2       uint8            // Units: percent;
	ReadingConfidence uint8
	Mode              typedef.Spo2MeasurementType // Mode when data was captured

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSpo2Data creates new Spo2Data struct based on given mesg. If mesg is nil or mesg.Num is not equal to Spo2Data mesg number, it will return nil.
func NewSpo2Data(mesg proto.Message) *Spo2Data {
	if mesg.Num != typedef.MesgNumSpo2Data {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Spo2Data{
		Timestamp:         typeconv.ToUint32[typedef.DateTime](vals[253]),
		ReadingSpo2:       typeconv.ToUint8[uint8](vals[0]),
		ReadingConfidence: typeconv.ToUint8[uint8](vals[1]),
		Mode:              typeconv.ToEnum[typedef.Spo2MeasurementType](vals[2]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts Spo2Data into proto.Message.
func (m *Spo2Data) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumSpo2Data)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ReadingSpo2 != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.ReadingSpo2
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ReadingConfidence != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.ReadingConfidence
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Mode) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = typeconv.ToEnum[byte](m.Mode)
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of Spo2Data's valid fields.
func (m *Spo2Data) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.ReadingSpo2 != basetype.Uint8Invalid {
		size++
	}
	if m.ReadingConfidence != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Mode) != basetype.EnumInvalid {
		size++
	}
	return size
}
