// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// GpsMetadata is a GpsMetadata message.
type GpsMetadata struct {
	Timestamp        typedef.DateTime // Units: s; Whole second part of the timestamp.
	TimestampMs      uint16           // Units: ms; Millisecond part of the timestamp.
	PositionLat      int32            // Units: semicircles;
	PositionLong     int32            // Units: semicircles;
	EnhancedAltitude uint32           // Scale: 5; Offset: 500; Units: m;
	EnhancedSpeed    uint32           // Scale: 1000; Units: m/s;
	Heading          uint16           // Scale: 100; Units: degrees;
	UtcTimestamp     typedef.DateTime // Units: s; Used to correlate UTC to system time if the timestamp of the message is in system time. This UTC time is derived from the GPS data.
	Velocity         []int16          // Scale: 100; Array: [3]; Units: m/s; velocity[0] is lon velocity. Velocity[1] is lat velocity. Velocity[2] is altitude velocity.

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewGpsMetadata creates new GpsMetadata struct based on given mesg. If mesg is nil or mesg.Num is not equal to GpsMetadata mesg number, it will return nil.
func NewGpsMetadata(mesg proto.Message) *GpsMetadata {
	if mesg.Num != typedef.MesgNumGpsMetadata {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &GpsMetadata{
		Timestamp:        typeconv.ToUint32[typedef.DateTime](vals[253]),
		TimestampMs:      typeconv.ToUint16[uint16](vals[0]),
		PositionLat:      typeconv.ToSint32[int32](vals[1]),
		PositionLong:     typeconv.ToSint32[int32](vals[2]),
		EnhancedAltitude: typeconv.ToUint32[uint32](vals[3]),
		EnhancedSpeed:    typeconv.ToUint32[uint32](vals[4]),
		Heading:          typeconv.ToUint16[uint16](vals[5]),
		UtcTimestamp:     typeconv.ToUint32[typedef.DateTime](vals[6]),
		Velocity:         typeconv.ToSliceSint16[int16](vals[7]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts GpsMetadata into proto.Message.
func (m *GpsMetadata) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumGpsMetadata)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.TimestampMs
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.PositionLat != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.PositionLat
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.PositionLong != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.PositionLong
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EnhancedAltitude != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.EnhancedAltitude
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EnhancedSpeed != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.EnhancedSpeed
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Heading != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.Heading
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.UtcTimestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = typeconv.ToUint32[uint32](m.UtcTimestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Velocity != nil {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = m.Velocity
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of GpsMetadata's valid fields.
func (m *GpsMetadata) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		size++
	}
	if m.PositionLat != basetype.Sint32Invalid {
		size++
	}
	if m.PositionLong != basetype.Sint32Invalid {
		size++
	}
	if m.EnhancedAltitude != basetype.Uint32Invalid {
		size++
	}
	if m.EnhancedSpeed != basetype.Uint32Invalid {
		size++
	}
	if m.Heading != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.UtcTimestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.Velocity != nil {
		size++
	}
	return size
}
