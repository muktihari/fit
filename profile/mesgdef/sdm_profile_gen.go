// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// SdmProfile is a SdmProfile message.
type SdmProfile struct {
	MessageIndex      typedef.MessageIndex
	Enabled           bool
	SdmAntId          uint16
	SdmCalFactor      uint16 // Scale: 10; Units: %;
	Odometer          uint32 // Scale: 100; Units: m;
	SpeedSource       bool   // Use footpod for speed source instead of GPS
	SdmAntIdTransType uint8
	OdometerRollover  uint8 // Rollover counter that can be used to extend the odometer

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSdmProfile creates new SdmProfile struct based on given mesg.
// If mesg is nil, it will return SdmProfile with all fields being set to its corresponding invalid value.
func NewSdmProfile(mesg *proto.Message) *SdmProfile {
	vals := [255]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &SdmProfile{
		MessageIndex:      typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		Enabled:           typeconv.ToBool[bool](vals[0]),
		SdmAntId:          typeconv.ToUint16z[uint16](vals[1]),
		SdmCalFactor:      typeconv.ToUint16[uint16](vals[2]),
		Odometer:          typeconv.ToUint32[uint32](vals[3]),
		SpeedSource:       typeconv.ToBool[bool](vals[4]),
		SdmAntIdTransType: typeconv.ToUint8z[uint8](vals[5]),
		OdometerRollover:  typeconv.ToUint8[uint8](vals[7]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts SdmProfile into proto.Message.
func (m *SdmProfile) ToMesg(fac Factory) proto.Message {
	fieldsPtr := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsPtr)

	fields := (*fieldsPtr)[:0] // Create slice from array with zero len.
	mesg := fac.CreateMesgOnly(typedef.MesgNumSdmProfile)

	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = typeconv.ToUint16[uint16](m.MessageIndex)
		fields = append(fields, field)
	}
	if m.Enabled != false {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.Enabled
		fields = append(fields, field)
	}
	if typeconv.ToUint16z[uint16](m.SdmAntId) != basetype.Uint16zInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = typeconv.ToUint16z[uint16](m.SdmAntId)
		fields = append(fields, field)
	}
	if m.SdmCalFactor != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.SdmCalFactor
		fields = append(fields, field)
	}
	if m.Odometer != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.Odometer
		fields = append(fields, field)
	}
	if m.SpeedSource != false {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.SpeedSource
		fields = append(fields, field)
	}
	if typeconv.ToUint8z[uint8](m.SdmAntIdTransType) != basetype.Uint8zInvalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = typeconv.ToUint8z[uint8](m.SdmAntIdTransType)
		fields = append(fields, field)
	}
	if m.OdometerRollover != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = m.OdometerRollover
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// SetMessageIndex sets SdmProfile value.
func (m *SdmProfile) SetMessageIndex(v typedef.MessageIndex) *SdmProfile {
	m.MessageIndex = v
	return m
}

// SetEnabled sets SdmProfile value.
func (m *SdmProfile) SetEnabled(v bool) *SdmProfile {
	m.Enabled = v
	return m
}

// SetSdmAntId sets SdmProfile value.
func (m *SdmProfile) SetSdmAntId(v uint16) *SdmProfile {
	m.SdmAntId = v
	return m
}

// SetSdmCalFactor sets SdmProfile value.
//
// Scale: 10; Units: %;
func (m *SdmProfile) SetSdmCalFactor(v uint16) *SdmProfile {
	m.SdmCalFactor = v
	return m
}

// SetOdometer sets SdmProfile value.
//
// Scale: 100; Units: m;
func (m *SdmProfile) SetOdometer(v uint32) *SdmProfile {
	m.Odometer = v
	return m
}

// SetSpeedSource sets SdmProfile value.
//
// Use footpod for speed source instead of GPS
func (m *SdmProfile) SetSpeedSource(v bool) *SdmProfile {
	m.SpeedSource = v
	return m
}

// SetSdmAntIdTransType sets SdmProfile value.
func (m *SdmProfile) SetSdmAntIdTransType(v uint8) *SdmProfile {
	m.SdmAntIdTransType = v
	return m
}

// SetOdometerRollover sets SdmProfile value.
//
// Rollover counter that can be used to extend the odometer
func (m *SdmProfile) SetOdometerRollover(v uint8) *SdmProfile {
	m.OdometerRollover = v
	return m
}

// SetDeveloperFields SdmProfile's DeveloperFields.
func (m *SdmProfile) SetDeveloperFields(developerFields ...proto.DeveloperField) *SdmProfile {
	m.DeveloperFields = developerFields
	return m
}
