// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// TankSummary is a TankSummary message.
type TankSummary struct {
	Timestamp     typedef.DateTime // Units: s;
	Sensor        typedef.AntChannelId
	StartPressure uint16 // Scale: 100; Units: bar;
	EndPressure   uint16 // Scale: 100; Units: bar;
	VolumeUsed    uint32 // Scale: 100; Units: L;

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewTankSummary creates new TankSummary struct based on given mesg. If mesg is nil or mesg.Num is not equal to TankSummary mesg number, it will return nil.
func NewTankSummary(mesg proto.Message) *TankSummary {
	if mesg.Num != typedef.MesgNumTankSummary {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &TankSummary{
		Timestamp:     typeconv.ToUint32[typedef.DateTime](vals[253]),
		Sensor:        typeconv.ToUint32z[typedef.AntChannelId](vals[0]),
		StartPressure: typeconv.ToUint16[uint16](vals[1]),
		EndPressure:   typeconv.ToUint16[uint16](vals[2]),
		VolumeUsed:    typeconv.ToUint32[uint32](vals[3]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts TankSummary into proto.Message.
func (m *TankSummary) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumTankSummary)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32z[uint32](m.Sensor) != basetype.Uint32zInvalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = typeconv.ToUint32z[uint32](m.Sensor)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.StartPressure != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.StartPressure
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EndPressure != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.EndPressure
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.VolumeUsed != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.VolumeUsed
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of TankSummary's valid fields.
func (m *TankSummary) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToUint32z[uint32](m.Sensor) != basetype.Uint32zInvalid {
		size++
	}
	if m.StartPressure != basetype.Uint16Invalid {
		size++
	}
	if m.EndPressure != basetype.Uint16Invalid {
		size++
	}
	if m.VolumeUsed != basetype.Uint32Invalid {
		size++
	}
	return size
}
