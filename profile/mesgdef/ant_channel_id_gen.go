// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.115

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// AntChannelId is a AntChannelId message.
type AntChannelId struct {
	ChannelNumber    uint8
	DeviceType       uint8
	DeviceNumber     uint16
	TransmissionType uint8
	DeviceIndex      typedef.DeviceIndex

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewAntChannelId creates new AntChannelId struct based on given mesg. If mesg is nil or mesg.Num is not equal to AntChannelId mesg number, it will return nil.
func NewAntChannelId(mesg proto.Message) *AntChannelId {
	if mesg.Num != typedef.MesgNumAntChannelId {
		return nil
	}

	vals := [256]any{ // Mark all values as invalid, replace only when specified.
		0: basetype.Uint8Invalid,   /* ChannelNumber */
		1: basetype.Uint8zInvalid,  /* DeviceType */
		2: basetype.Uint16zInvalid, /* DeviceNumber */
		3: basetype.Uint8zInvalid,  /* TransmissionType */
		4: basetype.Uint8Invalid,   /* DeviceIndex */
	}

	for i := range mesg.Fields {
		if mesg.Fields[i].Value == nil {
			continue // keep the invalid value
		}
		vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
	}

	return &AntChannelId{
		ChannelNumber:    typeconv.ToUint8[uint8](vals[0]),
		DeviceType:       typeconv.ToUint8z[uint8](vals[1]),
		DeviceNumber:     typeconv.ToUint16z[uint16](vals[2]),
		TransmissionType: typeconv.ToUint8z[uint8](vals[3]),
		DeviceIndex:      typeconv.ToUint8[typedef.DeviceIndex](vals[4]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to AntChannelId mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumAntChannelId)
func (m AntChannelId) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumAntChannelId {
		return
	}

	vals := [256]any{
		0: m.ChannelNumber,
		1: m.DeviceType,
		2: m.DeviceNumber,
		3: m.TransmissionType,
		4: m.DeviceIndex,
	}

	for i := range mesg.Fields {
		mesg.Fields[i].Value = vals[mesg.Fields[i].Num]
	}
	mesg.DeveloperFields = m.DeveloperFields

}
