// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// AntChannelId is a AntChannelId message.
type AntChannelId struct {
	ChannelNumber    uint8
	DeviceType       uint8
	DeviceNumber     uint16
	TransmissionType uint8
	DeviceIndex      typedef.DeviceIndex

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewAntChannelId creates new AntChannelId struct based on given mesg. If mesg is nil or mesg.Num is not equal to AntChannelId mesg number, it will return nil.
func NewAntChannelId(mesg proto.Message) *AntChannelId {
	if mesg.Num != typedef.MesgNumAntChannelId {
		return nil
	}

	vals := [5]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &AntChannelId{
		ChannelNumber:    typeconv.ToUint8[uint8](vals[0]),
		DeviceType:       typeconv.ToUint8z[uint8](vals[1]),
		DeviceNumber:     typeconv.ToUint16z[uint16](vals[2]),
		TransmissionType: typeconv.ToUint8z[uint8](vals[3]),
		DeviceIndex:      typeconv.ToUint8[typedef.DeviceIndex](vals[4]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts AntChannelId into proto.Message.
func (m *AntChannelId) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumAntChannelId)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if m.ChannelNumber != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.ChannelNumber
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint8z[uint8](m.DeviceType) != basetype.Uint8zInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = typeconv.ToUint8z[uint8](m.DeviceType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint16z[uint16](m.DeviceNumber) != basetype.Uint16zInvalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = typeconv.ToUint16z[uint16](m.DeviceNumber)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint8z[uint8](m.TransmissionType) != basetype.Uint8zInvalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = typeconv.ToUint8z[uint8](m.TransmissionType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint8[uint8](m.DeviceIndex) != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = typeconv.ToUint8[uint8](m.DeviceIndex)
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of AntChannelId's valid fields.
func (m *AntChannelId) size() byte {
	var size byte
	if m.ChannelNumber != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToUint8z[uint8](m.DeviceType) != basetype.Uint8zInvalid {
		size++
	}
	if typeconv.ToUint16z[uint16](m.DeviceNumber) != basetype.Uint16zInvalid {
		size++
	}
	if typeconv.ToUint8z[uint8](m.TransmissionType) != basetype.Uint8zInvalid {
		size++
	}
	if typeconv.ToUint8[uint8](m.DeviceIndex) != basetype.Uint8Invalid {
		size++
	}
	return size
}
