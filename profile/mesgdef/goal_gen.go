// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// Goal is a Goal message.
type Goal struct {
	StartDate       time.Time
	EndDate         time.Time
	Value           uint32
	TargetValue     uint32
	MessageIndex    typedef.MessageIndex
	RecurrenceValue uint16
	Sport           typedef.Sport
	SubSport        typedef.SubSport
	Type            typedef.Goal
	Recurrence      typedef.GoalRecurrence
	Source          typedef.GoalSource
	Repeat          bool
	Enabled         bool

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewGoal creates new Goal struct based on given mesg.
// If mesg is nil, it will return Goal with all fields being set to its corresponding invalid value.
func NewGoal(mesg *proto.Message) *Goal {
	vals := [255]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &Goal{
		StartDate:       datetime.ToTime(vals[2]),
		EndDate:         datetime.ToTime(vals[3]),
		Value:           typeconv.ToUint32[uint32](vals[5]),
		TargetValue:     typeconv.ToUint32[uint32](vals[7]),
		MessageIndex:    typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		RecurrenceValue: typeconv.ToUint16[uint16](vals[9]),
		Sport:           typeconv.ToEnum[typedef.Sport](vals[0]),
		SubSport:        typeconv.ToEnum[typedef.SubSport](vals[1]),
		Type:            typeconv.ToEnum[typedef.Goal](vals[4]),
		Recurrence:      typeconv.ToEnum[typedef.GoalRecurrence](vals[8]),
		Source:          typeconv.ToEnum[typedef.GoalSource](vals[11]),
		Repeat:          typeconv.ToBool[bool](vals[6]),
		Enabled:         typeconv.ToBool[bool](vals[10]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts Goal into proto.Message. If options is nil, default options will be used.
func (m *Goal) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := fac.CreateMesgOnly(typedef.MesgNumGoal)

	if datetime.ToUint32(m.StartDate) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = datetime.ToUint32(m.StartDate)
		fields = append(fields, field)
	}
	if datetime.ToUint32(m.EndDate) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = datetime.ToUint32(m.EndDate)
		fields = append(fields, field)
	}
	if m.Value != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.Value
		fields = append(fields, field)
	}
	if m.TargetValue != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = m.TargetValue
		fields = append(fields, field)
	}
	if uint16(m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = uint16(m.MessageIndex)
		fields = append(fields, field)
	}
	if m.RecurrenceValue != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = m.RecurrenceValue
		fields = append(fields, field)
	}
	if byte(m.Sport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = byte(m.Sport)
		fields = append(fields, field)
	}
	if byte(m.SubSport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = byte(m.SubSport)
		fields = append(fields, field)
	}
	if byte(m.Type) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = byte(m.Type)
		fields = append(fields, field)
	}
	if byte(m.Recurrence) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = byte(m.Recurrence)
		fields = append(fields, field)
	}
	if byte(m.Source) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 11)
		field.Value = byte(m.Source)
		fields = append(fields, field)
	}
	if m.Repeat != false {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.Repeat
		fields = append(fields, field)
	}
	if m.Enabled != false {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = m.Enabled
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// SetStartDate sets Goal value.
func (m *Goal) SetStartDate(v time.Time) *Goal {
	m.StartDate = v
	return m
}

// SetEndDate sets Goal value.
func (m *Goal) SetEndDate(v time.Time) *Goal {
	m.EndDate = v
	return m
}

// SetValue sets Goal value.
func (m *Goal) SetValue(v uint32) *Goal {
	m.Value = v
	return m
}

// SetTargetValue sets Goal value.
func (m *Goal) SetTargetValue(v uint32) *Goal {
	m.TargetValue = v
	return m
}

// SetMessageIndex sets Goal value.
func (m *Goal) SetMessageIndex(v typedef.MessageIndex) *Goal {
	m.MessageIndex = v
	return m
}

// SetRecurrenceValue sets Goal value.
func (m *Goal) SetRecurrenceValue(v uint16) *Goal {
	m.RecurrenceValue = v
	return m
}

// SetSport sets Goal value.
func (m *Goal) SetSport(v typedef.Sport) *Goal {
	m.Sport = v
	return m
}

// SetSubSport sets Goal value.
func (m *Goal) SetSubSport(v typedef.SubSport) *Goal {
	m.SubSport = v
	return m
}

// SetType sets Goal value.
func (m *Goal) SetType(v typedef.Goal) *Goal {
	m.Type = v
	return m
}

// SetRecurrence sets Goal value.
func (m *Goal) SetRecurrence(v typedef.GoalRecurrence) *Goal {
	m.Recurrence = v
	return m
}

// SetSource sets Goal value.
func (m *Goal) SetSource(v typedef.GoalSource) *Goal {
	m.Source = v
	return m
}

// SetRepeat sets Goal value.
func (m *Goal) SetRepeat(v bool) *Goal {
	m.Repeat = v
	return m
}

// SetEnabled sets Goal value.
func (m *Goal) SetEnabled(v bool) *Goal {
	m.Enabled = v
	return m
}

// SetDeveloperFields Goal's DeveloperFields.
func (m *Goal) SetDeveloperFields(developerFields ...proto.DeveloperField) *Goal {
	m.DeveloperFields = developerFields
	return m
}
