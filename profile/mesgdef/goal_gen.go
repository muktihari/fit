// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// Goal is a Goal message.
//
// Note: The order of the fields is optimized using a memory alignment algorithm.
// Do not rely on field indices, such as when using reflection.
type Goal struct {
	StartDate       time.Time
	EndDate         time.Time
	Value           uint32
	TargetValue     uint32
	MessageIndex    typedef.MessageIndex
	RecurrenceValue uint16
	Sport           typedef.Sport
	SubSport        typedef.SubSport
	Type            typedef.Goal
	Repeat          bool
	Recurrence      typedef.GoalRecurrence
	Enabled         bool
	Source          typedef.GoalSource

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewGoal creates new Goal struct based on given mesg.
// If mesg is nil, it will return Goal with all fields being set to its corresponding invalid value.
func NewGoal(mesg *proto.Message) *Goal {
	vals := [255]proto.Value{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num > 254 {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &Goal{
		MessageIndex:    typedef.MessageIndex(vals[254].Uint16()),
		Sport:           typedef.Sport(vals[0].Uint8()),
		SubSport:        typedef.SubSport(vals[1].Uint8()),
		StartDate:       datetime.ToTime(vals[2].Uint32()),
		EndDate:         datetime.ToTime(vals[3].Uint32()),
		Type:            typedef.Goal(vals[4].Uint8()),
		Value:           vals[5].Uint32(),
		Repeat:          vals[6].Bool(),
		TargetValue:     vals[7].Uint32(),
		Recurrence:      typedef.GoalRecurrence(vals[8].Uint8()),
		RecurrenceValue: vals[9].Uint16(),
		Enabled:         vals[10].Bool(),
		Source:          typedef.GoalSource(vals[11].Uint8()),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts Goal into proto.Message. If options is nil, default options will be used.
func (m *Goal) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	arr := pool.Get().(*[poolsize]proto.Field)
	fields := arr[:0]

	mesg := proto.Message{Num: typedef.MesgNumGoal}

	if uint16(m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = proto.Uint16(uint16(m.MessageIndex))
		fields = append(fields, field)
	}
	if byte(m.Sport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = proto.Uint8(byte(m.Sport))
		fields = append(fields, field)
	}
	if byte(m.SubSport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = proto.Uint8(byte(m.SubSport))
		fields = append(fields, field)
	}
	if !m.StartDate.Before(datetime.Epoch()) {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = proto.Uint32(uint32(m.StartDate.Sub(datetime.Epoch()).Seconds()))
		fields = append(fields, field)
	}
	if !m.EndDate.Before(datetime.Epoch()) {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = proto.Uint32(uint32(m.EndDate.Sub(datetime.Epoch()).Seconds()))
		fields = append(fields, field)
	}
	if byte(m.Type) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = proto.Uint8(byte(m.Type))
		fields = append(fields, field)
	}
	if m.Value != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = proto.Uint32(m.Value)
		fields = append(fields, field)
	}
	if m.Repeat != false {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = proto.Bool(m.Repeat)
		fields = append(fields, field)
	}
	if m.TargetValue != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = proto.Uint32(m.TargetValue)
		fields = append(fields, field)
	}
	if byte(m.Recurrence) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = proto.Uint8(byte(m.Recurrence))
		fields = append(fields, field)
	}
	if m.RecurrenceValue != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = proto.Uint16(m.RecurrenceValue)
		fields = append(fields, field)
	}
	if m.Enabled != false {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = proto.Bool(m.Enabled)
		fields = append(fields, field)
	}
	if byte(m.Source) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 11)
		field.Value = proto.Uint8(byte(m.Source))
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)
	pool.Put(arr)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// StartDateUint32 returns StartDate in uint32 (seconds since FIT's epoch) instead of time.Time.
func (m *Goal) StartDateUint32() uint32 { return datetime.ToUint32(m.StartDate) }

// EndDateUint32 returns EndDate in uint32 (seconds since FIT's epoch) instead of time.Time.
func (m *Goal) EndDateUint32() uint32 { return datetime.ToUint32(m.EndDate) }

// SetMessageIndex sets MessageIndex value.
func (m *Goal) SetMessageIndex(v typedef.MessageIndex) *Goal {
	m.MessageIndex = v
	return m
}

// SetSport sets Sport value.
func (m *Goal) SetSport(v typedef.Sport) *Goal {
	m.Sport = v
	return m
}

// SetSubSport sets SubSport value.
func (m *Goal) SetSubSport(v typedef.SubSport) *Goal {
	m.SubSport = v
	return m
}

// SetStartDate sets StartDate value.
func (m *Goal) SetStartDate(v time.Time) *Goal {
	m.StartDate = v
	return m
}

// SetEndDate sets EndDate value.
func (m *Goal) SetEndDate(v time.Time) *Goal {
	m.EndDate = v
	return m
}

// SetType sets Type value.
func (m *Goal) SetType(v typedef.Goal) *Goal {
	m.Type = v
	return m
}

// SetValue sets Value value.
func (m *Goal) SetValue(v uint32) *Goal {
	m.Value = v
	return m
}

// SetRepeat sets Repeat value.
func (m *Goal) SetRepeat(v bool) *Goal {
	m.Repeat = v
	return m
}

// SetTargetValue sets TargetValue value.
func (m *Goal) SetTargetValue(v uint32) *Goal {
	m.TargetValue = v
	return m
}

// SetRecurrence sets Recurrence value.
func (m *Goal) SetRecurrence(v typedef.GoalRecurrence) *Goal {
	m.Recurrence = v
	return m
}

// SetRecurrenceValue sets RecurrenceValue value.
func (m *Goal) SetRecurrenceValue(v uint16) *Goal {
	m.RecurrenceValue = v
	return m
}

// SetEnabled sets Enabled value.
func (m *Goal) SetEnabled(v bool) *Goal {
	m.Enabled = v
	return m
}

// SetSource sets Source value.
func (m *Goal) SetSource(v typedef.GoalSource) *Goal {
	m.Source = v
	return m
}

// SetDeveloperFields Goal's DeveloperFields.
func (m *Goal) SetDeveloperFields(developerFields ...proto.DeveloperField) *Goal {
	m.DeveloperFields = developerFields
	return m
}
