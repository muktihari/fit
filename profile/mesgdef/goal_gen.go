// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Goal is a Goal message.
type Goal struct {
	MessageIndex    typedef.MessageIndex
	Sport           typedef.Sport
	SubSport        typedef.SubSport
	StartDate       typedef.DateTime
	EndDate         typedef.DateTime
	Type            typedef.Goal
	Value           uint32
	Repeat          bool
	TargetValue     uint32
	Recurrence      typedef.GoalRecurrence
	RecurrenceValue uint16
	Enabled         bool
	Source          typedef.GoalSource

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewGoal creates new Goal struct based on given mesg. If mesg is nil or mesg.Num is not equal to Goal mesg number, it will return nil.
func NewGoal(mesg proto.Message) *Goal {
	if mesg.Num != typedef.MesgNumGoal {
		return nil
	}

	vals := [255]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Goal{
		MessageIndex:    typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		Sport:           typeconv.ToEnum[typedef.Sport](vals[0]),
		SubSport:        typeconv.ToEnum[typedef.SubSport](vals[1]),
		StartDate:       typeconv.ToUint32[typedef.DateTime](vals[2]),
		EndDate:         typeconv.ToUint32[typedef.DateTime](vals[3]),
		Type:            typeconv.ToEnum[typedef.Goal](vals[4]),
		Value:           typeconv.ToUint32[uint32](vals[5]),
		Repeat:          typeconv.ToBool[bool](vals[6]),
		TargetValue:     typeconv.ToUint32[uint32](vals[7]),
		Recurrence:      typeconv.ToEnum[typedef.GoalRecurrence](vals[8]),
		RecurrenceValue: typeconv.ToUint16[uint16](vals[9]),
		Enabled:         typeconv.ToBool[bool](vals[10]),
		Source:          typeconv.ToEnum[typedef.GoalSource](vals[11]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts Goal into proto.Message.
func (m *Goal) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumGoal)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = typeconv.ToUint16[uint16](m.MessageIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Sport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = typeconv.ToEnum[byte](m.Sport)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.SubSport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = typeconv.ToEnum[byte](m.SubSport)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.StartDate) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = typeconv.ToUint32[uint32](m.StartDate)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.EndDate) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = typeconv.ToUint32[uint32](m.EndDate)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Type) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = typeconv.ToEnum[byte](m.Type)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Value != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.Value
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Repeat != false {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.Repeat
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TargetValue != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = m.TargetValue
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Recurrence) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = typeconv.ToEnum[byte](m.Recurrence)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.RecurrenceValue != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = m.RecurrenceValue
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Enabled != false {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = m.Enabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Source) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 11)
		field.Value = typeconv.ToEnum[byte](m.Source)
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of Goal's valid fields.
func (m *Goal) size() byte {
	var size byte
	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Sport) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.SubSport) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.StartDate) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.EndDate) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Type) != basetype.EnumInvalid {
		size++
	}
	if m.Value != basetype.Uint32Invalid {
		size++
	}
	if m.Repeat != false {
		size++
	}
	if m.TargetValue != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Recurrence) != basetype.EnumInvalid {
		size++
	}
	if m.RecurrenceValue != basetype.Uint16Invalid {
		size++
	}
	if m.Enabled != false {
		size++
	}
	if typeconv.ToEnum[byte](m.Source) != basetype.EnumInvalid {
		size++
	}
	return size
}
