// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Goal is a Goal message.
type Goal struct {
	MessageIndex    typedef.MessageIndex
	Sport           typedef.Sport
	SubSport        typedef.SubSport
	StartDate       typedef.DateTime
	EndDate         typedef.DateTime
	Type            typedef.Goal
	Value           uint32
	Repeat          bool
	TargetValue     uint32
	Recurrence      typedef.GoalRecurrence
	RecurrenceValue uint16
	Enabled         bool
	Source          typedef.GoalSource

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewGoal creates new Goal struct based on given mesg. If mesg is nil or mesg.Num is not equal to Goal mesg number, it will return nil.
func NewGoal(mesg proto.Message) *Goal {
	if mesg.Num != typedef.MesgNumGoal {
		return nil
	}

	vals := [...]any{ // nil value will be converted to its corresponding invalid value by typeconv.
		254: nil, /* MessageIndex */
		0:   nil, /* Sport */
		1:   nil, /* SubSport */
		2:   nil, /* StartDate */
		3:   nil, /* EndDate */
		4:   nil, /* Type */
		5:   nil, /* Value */
		6:   nil, /* Repeat */
		7:   nil, /* TargetValue */
		8:   nil, /* Recurrence */
		9:   nil, /* RecurrenceValue */
		10:  nil, /* Enabled */
		11:  nil, /* Source */
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Goal{
		MessageIndex:    typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		Sport:           typeconv.ToEnum[typedef.Sport](vals[0]),
		SubSport:        typeconv.ToEnum[typedef.SubSport](vals[1]),
		StartDate:       typeconv.ToUint32[typedef.DateTime](vals[2]),
		EndDate:         typeconv.ToUint32[typedef.DateTime](vals[3]),
		Type:            typeconv.ToEnum[typedef.Goal](vals[4]),
		Value:           typeconv.ToUint32[uint32](vals[5]),
		Repeat:          typeconv.ToBool[bool](vals[6]),
		TargetValue:     typeconv.ToUint32[uint32](vals[7]),
		Recurrence:      typeconv.ToEnum[typedef.GoalRecurrence](vals[8]),
		RecurrenceValue: typeconv.ToUint16[uint16](vals[9]),
		Enabled:         typeconv.ToBool[bool](vals[10]),
		Source:          typeconv.ToEnum[typedef.GoalSource](vals[11]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to Goal mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumGoal)
func (m *Goal) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumGoal {
		return
	}

	vals := [...]any{
		254: typeconv.ToUint16[uint16](m.MessageIndex),
		0:   typeconv.ToEnum[byte](m.Sport),
		1:   typeconv.ToEnum[byte](m.SubSport),
		2:   typeconv.ToUint32[uint32](m.StartDate),
		3:   typeconv.ToUint32[uint32](m.EndDate),
		4:   typeconv.ToEnum[byte](m.Type),
		5:   m.Value,
		6:   m.Repeat,
		7:   m.TargetValue,
		8:   typeconv.ToEnum[byte](m.Recurrence),
		9:   m.RecurrenceValue,
		10:  m.Enabled,
		11:  typeconv.ToEnum[byte](m.Source),
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		field.Value = vals[field.Num]
	}

	mesg.DeveloperFields = m.DeveloperFields
}
