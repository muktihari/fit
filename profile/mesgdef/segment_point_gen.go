// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// SegmentPoint is a SegmentPoint message.
type SegmentPoint struct {
	MessageIndex     typedef.MessageIndex
	PositionLat      int32    // Units: semicircles;
	PositionLong     int32    // Units: semicircles;
	Distance         uint32   // Scale: 100; Units: m; Accumulated distance along the segment at the described point
	Altitude         uint16   // Scale: 5; Offset: 500; Units: m; Accumulated altitude along the segment at the described point
	LeaderTime       []uint32 // Scale: 1000; Array: [N]; Units: s; Accumualted time each leader board member required to reach the described point. This value is zero for all leader board members at the starting point of the segment.
	EnhancedAltitude uint32   // Scale: 5; Offset: 500; Units: m; Accumulated altitude along the segment at the described point

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSegmentPoint creates new SegmentPoint struct based on given mesg. If mesg is nil or mesg.Num is not equal to SegmentPoint mesg number, it will return nil.
func NewSegmentPoint(mesg proto.Message) *SegmentPoint {
	if mesg.Num != typedef.MesgNumSegmentPoint {
		return nil
	}

	vals := [255]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &SegmentPoint{
		MessageIndex:     typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		PositionLat:      typeconv.ToSint32[int32](vals[1]),
		PositionLong:     typeconv.ToSint32[int32](vals[2]),
		Distance:         typeconv.ToUint32[uint32](vals[3]),
		Altitude:         typeconv.ToUint16[uint16](vals[4]),
		LeaderTime:       typeconv.ToSliceUint32[uint32](vals[5]),
		EnhancedAltitude: typeconv.ToUint32[uint32](vals[6]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts SegmentPoint into proto.Message.
func (m *SegmentPoint) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumSegmentPoint)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = typeconv.ToUint16[uint16](m.MessageIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.PositionLat != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.PositionLat
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.PositionLong != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.PositionLong
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Distance != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.Distance
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Altitude != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.Altitude
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.LeaderTime != nil {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.LeaderTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EnhancedAltitude != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.EnhancedAltitude
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of SegmentPoint's valid fields.
func (m *SegmentPoint) size() byte {
	var size byte
	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		size++
	}
	if m.PositionLat != basetype.Sint32Invalid {
		size++
	}
	if m.PositionLong != basetype.Sint32Invalid {
		size++
	}
	if m.Distance != basetype.Uint32Invalid {
		size++
	}
	if m.Altitude != basetype.Uint16Invalid {
		size++
	}
	if m.LeaderTime != nil {
		size++
	}
	if m.EnhancedAltitude != basetype.Uint32Invalid {
		size++
	}
	return size
}
