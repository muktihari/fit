// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// SegmentPoint is a SegmentPoint message.
type SegmentPoint struct {
	MessageIndex     typedef.MessageIndex
	PositionLat      int32    // Units: semicircles;
	PositionLong     int32    // Units: semicircles;
	Distance         uint32   // Scale: 100; Units: m; Accumulated distance along the segment at the described point
	Altitude         uint16   // Scale: 5; Offset: 500; Units: m; Accumulated altitude along the segment at the described point
	LeaderTime       []uint32 // Scale: 1000; Array: [N]; Units: s; Accumualted time each leader board member required to reach the described point. This value is zero for all leader board members at the starting point of the segment.
	EnhancedAltitude uint32   // Scale: 5; Offset: 500; Units: m; Accumulated altitude along the segment at the described point

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSegmentPoint creates new SegmentPoint struct based on given mesg. If mesg is nil or mesg.Num is not equal to SegmentPoint mesg number, it will return nil.
func NewSegmentPoint(mesg proto.Message) *SegmentPoint {
	if mesg.Num != typedef.MesgNumSegmentPoint {
		return nil
	}

	vals := [...]any{ // nil value will be converted to its corresponding invalid value by typeconv.
		254: nil, /* MessageIndex */
		1:   nil, /* PositionLat */
		2:   nil, /* PositionLong */
		3:   nil, /* Distance */
		4:   nil, /* Altitude */
		5:   nil, /* LeaderTime */
		6:   nil, /* EnhancedAltitude */
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &SegmentPoint{
		MessageIndex:     typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		PositionLat:      typeconv.ToSint32[int32](vals[1]),
		PositionLong:     typeconv.ToSint32[int32](vals[2]),
		Distance:         typeconv.ToUint32[uint32](vals[3]),
		Altitude:         typeconv.ToUint16[uint16](vals[4]),
		LeaderTime:       typeconv.ToSliceUint32[uint32](vals[5]),
		EnhancedAltitude: typeconv.ToUint32[uint32](vals[6]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to SegmentPoint mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumSegmentPoint)
func (m *SegmentPoint) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumSegmentPoint {
		return
	}

	vals := [...]any{
		254: typeconv.ToUint16[uint16](m.MessageIndex),
		1:   m.PositionLat,
		2:   m.PositionLong,
		3:   m.Distance,
		4:   m.Altitude,
		5:   m.LeaderTime,
		6:   m.EnhancedAltitude,
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		field.Value = vals[field.Num]
	}

	mesg.DeveloperFields = m.DeveloperFields
}
