// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.115

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// TrainingFile is a TrainingFile message.
type TrainingFile struct {
	Timestamp    typedef.DateTime
	Type         typedef.File
	Manufacturer typedef.Manufacturer
	Product      uint16
	SerialNumber uint32
	TimeCreated  typedef.DateTime

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewTrainingFile creates new TrainingFile struct based on given mesg. If mesg is nil or mesg.Num is not equal to TrainingFile mesg number, it will return nil.
func NewTrainingFile(mesg proto.Message) *TrainingFile {
	if mesg.Num != typedef.MesgNumTrainingFile {
		return nil
	}

	vals := [256]any{ // Mark all values as invalid, replace only when specified.
		253: basetype.Uint32Invalid,  /* Timestamp */
		0:   basetype.EnumInvalid,    /* Type */
		1:   basetype.Uint16Invalid,  /* Manufacturer */
		2:   basetype.Uint16Invalid,  /* Product */
		3:   basetype.Uint32zInvalid, /* SerialNumber */
		4:   basetype.Uint32Invalid,  /* TimeCreated */
	}

	for i := range mesg.Fields {
		if mesg.Fields[i].Value == nil {
			continue // keep the invalid value
		}
		vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
	}

	return &TrainingFile{
		Timestamp:    typeconv.ToUint32[typedef.DateTime](vals[253]),
		Type:         typeconv.ToEnum[typedef.File](vals[0]),
		Manufacturer: typeconv.ToUint16[typedef.Manufacturer](vals[1]),
		Product:      typeconv.ToUint16[uint16](vals[2]),
		SerialNumber: typeconv.ToUint32z[uint32](vals[3]),
		TimeCreated:  typeconv.ToUint32[typedef.DateTime](vals[4]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to TrainingFile mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumTrainingFile)
func (m TrainingFile) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumTrainingFile {
		return
	}

	vals := [256]any{
		253: m.Timestamp,
		0:   m.Type,
		1:   m.Manufacturer,
		2:   m.Product,
		3:   m.SerialNumber,
		4:   m.TimeCreated,
	}

	for i := range mesg.Fields {
		mesg.Fields[i].Value = vals[mesg.Fields[i].Num]
	}
	mesg.DeveloperFields = m.DeveloperFields

}
