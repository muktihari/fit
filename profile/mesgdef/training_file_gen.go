// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// TrainingFile is a TrainingFile message.
type TrainingFile struct {
	Timestamp    time.Time
	TimeCreated  time.Time
	SerialNumber uint32
	Manufacturer typedef.Manufacturer
	Product      uint16
	Type         typedef.File

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewTrainingFile creates new TrainingFile struct based on given mesg.
// If mesg is nil, it will return TrainingFile with all fields being set to its corresponding invalid value.
func NewTrainingFile(mesg *proto.Message) *TrainingFile {
	vals := [254]proto.Value{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &TrainingFile{
		Timestamp:    datetime.ToTime(vals[253].Uint32()),
		TimeCreated:  datetime.ToTime(vals[4].Uint32()),
		SerialNumber: vals[3].Uint32z(),
		Manufacturer: typedef.Manufacturer(vals[1].Uint16()),
		Product:      vals[2].Uint16(),
		Type:         typedef.File(vals[0].Uint8()),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts TrainingFile into proto.Message. If options is nil, default options will be used.
func (m *TrainingFile) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := proto.Message{Num: typedef.MesgNumTrainingFile}

	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = proto.Uint32(datetime.ToUint32(m.Timestamp))
		fields = append(fields, field)
	}
	if datetime.ToUint32(m.TimeCreated) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = proto.Uint32(datetime.ToUint32(m.TimeCreated))
		fields = append(fields, field)
	}
	if uint32(m.SerialNumber) != basetype.Uint32zInvalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = proto.Uint32(m.SerialNumber)
		fields = append(fields, field)
	}
	if uint16(m.Manufacturer) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = proto.Uint16(uint16(m.Manufacturer))
		fields = append(fields, field)
	}
	if m.Product != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = proto.Uint16(m.Product)
		fields = append(fields, field)
	}
	if byte(m.Type) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = proto.Uint8(byte(m.Type))
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// SetTimestamp sets TrainingFile value.
func (m *TrainingFile) SetTimestamp(v time.Time) *TrainingFile {
	m.Timestamp = v
	return m
}

// SetTimeCreated sets TrainingFile value.
func (m *TrainingFile) SetTimeCreated(v time.Time) *TrainingFile {
	m.TimeCreated = v
	return m
}

// SetSerialNumber sets TrainingFile value.
func (m *TrainingFile) SetSerialNumber(v uint32) *TrainingFile {
	m.SerialNumber = v
	return m
}

// SetManufacturer sets TrainingFile value.
func (m *TrainingFile) SetManufacturer(v typedef.Manufacturer) *TrainingFile {
	m.Manufacturer = v
	return m
}

// SetProduct sets TrainingFile value.
func (m *TrainingFile) SetProduct(v uint16) *TrainingFile {
	m.Product = v
	return m
}

// SetType sets TrainingFile value.
func (m *TrainingFile) SetType(v typedef.File) *TrainingFile {
	m.Type = v
	return m
}

// SetDeveloperFields TrainingFile's DeveloperFields.
func (m *TrainingFile) SetDeveloperFields(developerFields ...proto.DeveloperField) *TrainingFile {
	m.DeveloperFields = developerFields
	return m
}
