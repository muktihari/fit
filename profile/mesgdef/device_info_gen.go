// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// DeviceInfo is a DeviceInfo message.
type DeviceInfo struct {
	Timestamp           typedef.DateTime // Units: s;
	DeviceIndex         typedef.DeviceIndex
	DeviceType          uint8
	Manufacturer        typedef.Manufacturer
	SerialNumber        uint32
	Product             uint16
	SoftwareVersion     uint16 // Scale: 100;
	HardwareVersion     uint8
	CumOperatingTime    uint32 // Units: s; Reset by new battery or charge.
	BatteryVoltage      uint16 // Scale: 256; Units: V;
	BatteryStatus       typedef.BatteryStatus
	SensorPosition      typedef.BodyLocation // Indicates the location of the sensor
	Descriptor          string               // Used to describe the sensor or location
	AntTransmissionType uint8
	AntDeviceNumber     uint16
	AntNetwork          typedef.AntNetwork
	SourceType          typedef.SourceType
	ProductName         string // Optional free form string to indicate the devices name or model
	BatteryLevel        uint8  // Units: %;

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewDeviceInfo creates new DeviceInfo struct based on given mesg. If mesg is nil or mesg.Num is not equal to DeviceInfo mesg number, it will return nil.
func NewDeviceInfo(mesg proto.Message) *DeviceInfo {
	if mesg.Num != typedef.MesgNumDeviceInfo {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &DeviceInfo{
		Timestamp:           typeconv.ToUint32[typedef.DateTime](vals[253]),
		DeviceIndex:         typeconv.ToUint8[typedef.DeviceIndex](vals[0]),
		DeviceType:          typeconv.ToUint8[uint8](vals[1]),
		Manufacturer:        typeconv.ToUint16[typedef.Manufacturer](vals[2]),
		SerialNumber:        typeconv.ToUint32z[uint32](vals[3]),
		Product:             typeconv.ToUint16[uint16](vals[4]),
		SoftwareVersion:     typeconv.ToUint16[uint16](vals[5]),
		HardwareVersion:     typeconv.ToUint8[uint8](vals[6]),
		CumOperatingTime:    typeconv.ToUint32[uint32](vals[7]),
		BatteryVoltage:      typeconv.ToUint16[uint16](vals[10]),
		BatteryStatus:       typeconv.ToUint8[typedef.BatteryStatus](vals[11]),
		SensorPosition:      typeconv.ToEnum[typedef.BodyLocation](vals[18]),
		Descriptor:          typeconv.ToString[string](vals[19]),
		AntTransmissionType: typeconv.ToUint8z[uint8](vals[20]),
		AntDeviceNumber:     typeconv.ToUint16z[uint16](vals[21]),
		AntNetwork:          typeconv.ToEnum[typedef.AntNetwork](vals[22]),
		SourceType:          typeconv.ToEnum[typedef.SourceType](vals[25]),
		ProductName:         typeconv.ToString[string](vals[27]),
		BatteryLevel:        typeconv.ToUint8[uint8](vals[32]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts DeviceInfo into proto.Message.
func (m *DeviceInfo) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumDeviceInfo)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint8[uint8](m.DeviceIndex) != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = typeconv.ToUint8[uint8](m.DeviceIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.DeviceType != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.DeviceType
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint16[uint16](m.Manufacturer) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = typeconv.ToUint16[uint16](m.Manufacturer)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32z[uint32](m.SerialNumber) != basetype.Uint32zInvalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = typeconv.ToUint32z[uint32](m.SerialNumber)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Product != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.Product
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.SoftwareVersion != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.SoftwareVersion
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.HardwareVersion != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.HardwareVersion
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.CumOperatingTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = m.CumOperatingTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.BatteryVoltage != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = m.BatteryVoltage
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint8[uint8](m.BatteryStatus) != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 11)
		field.Value = typeconv.ToUint8[uint8](m.BatteryStatus)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.SensorPosition) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 18)
		field.Value = typeconv.ToEnum[byte](m.SensorPosition)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Descriptor != basetype.StringInvalid && m.Descriptor != "" {
		field := fac.CreateField(mesg.Num, 19)
		field.Value = m.Descriptor
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint8z[uint8](m.AntTransmissionType) != basetype.Uint8zInvalid {
		field := fac.CreateField(mesg.Num, 20)
		field.Value = typeconv.ToUint8z[uint8](m.AntTransmissionType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint16z[uint16](m.AntDeviceNumber) != basetype.Uint16zInvalid {
		field := fac.CreateField(mesg.Num, 21)
		field.Value = typeconv.ToUint16z[uint16](m.AntDeviceNumber)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.AntNetwork) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 22)
		field.Value = typeconv.ToEnum[byte](m.AntNetwork)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.SourceType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 25)
		field.Value = typeconv.ToEnum[byte](m.SourceType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ProductName != basetype.StringInvalid && m.ProductName != "" {
		field := fac.CreateField(mesg.Num, 27)
		field.Value = m.ProductName
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.BatteryLevel != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 32)
		field.Value = m.BatteryLevel
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of DeviceInfo's valid fields.
func (m *DeviceInfo) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToUint8[uint8](m.DeviceIndex) != basetype.Uint8Invalid {
		size++
	}
	if m.DeviceType != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToUint16[uint16](m.Manufacturer) != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint32z[uint32](m.SerialNumber) != basetype.Uint32zInvalid {
		size++
	}
	if m.Product != basetype.Uint16Invalid {
		size++
	}
	if m.SoftwareVersion != basetype.Uint16Invalid {
		size++
	}
	if m.HardwareVersion != basetype.Uint8Invalid {
		size++
	}
	if m.CumOperatingTime != basetype.Uint32Invalid {
		size++
	}
	if m.BatteryVoltage != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint8[uint8](m.BatteryStatus) != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.SensorPosition) != basetype.EnumInvalid {
		size++
	}
	if m.Descriptor != basetype.StringInvalid && m.Descriptor != "" {
		size++
	}
	if typeconv.ToUint8z[uint8](m.AntTransmissionType) != basetype.Uint8zInvalid {
		size++
	}
	if typeconv.ToUint16z[uint16](m.AntDeviceNumber) != basetype.Uint16zInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.AntNetwork) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.SourceType) != basetype.EnumInvalid {
		size++
	}
	if m.ProductName != basetype.StringInvalid && m.ProductName != "" {
		size++
	}
	if m.BatteryLevel != basetype.Uint8Invalid {
		size++
	}
	return size
}
