// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Session is a Session message.
type Session struct {
	MessageIndex                  typedef.MessageIndex // Selected bit is set for the current session.
	Timestamp                     typedef.DateTime     // Units: s; Sesson end time.
	Event                         typedef.Event        // session
	EventType                     typedef.EventType    // stop
	StartTime                     typedef.DateTime
	StartPositionLat              int32 // Units: semicircles;
	StartPositionLong             int32 // Units: semicircles;
	Sport                         typedef.Sport
	SubSport                      typedef.SubSport
	TotalElapsedTime              uint32 // Scale: 1000; Units: s; Time (includes pauses)
	TotalTimerTime                uint32 // Scale: 1000; Units: s; Timer Time (excludes pauses)
	TotalDistance                 uint32 // Scale: 100; Units: m;
	TotalCycles                   uint32 // Units: cycles;
	TotalCalories                 uint16 // Units: kcal;
	TotalFatCalories              uint16 // Units: kcal;
	AvgSpeed                      uint16 // Scale: 1000; Units: m/s; total_distance / total_timer_time
	MaxSpeed                      uint16 // Scale: 1000; Units: m/s;
	AvgHeartRate                  uint8  // Units: bpm; average heart rate (excludes pause time)
	MaxHeartRate                  uint8  // Units: bpm;
	AvgCadence                    uint8  // Units: rpm; total_cycles / total_timer_time if non_zero_avg_cadence otherwise total_cycles / total_elapsed_time
	MaxCadence                    uint8  // Units: rpm;
	AvgPower                      uint16 // Units: watts; total_power / total_timer_time if non_zero_avg_power otherwise total_power / total_elapsed_time
	MaxPower                      uint16 // Units: watts;
	TotalAscent                   uint16 // Units: m;
	TotalDescent                  uint16 // Units: m;
	TotalTrainingEffect           uint8  // Scale: 10;
	FirstLapIndex                 uint16
	NumLaps                       uint16
	EventGroup                    uint8
	Trigger                       typedef.SessionTrigger
	NecLat                        int32  // Units: semicircles; North east corner latitude
	NecLong                       int32  // Units: semicircles; North east corner longitude
	SwcLat                        int32  // Units: semicircles; South west corner latitude
	SwcLong                       int32  // Units: semicircles; South west corner longitude
	NumLengths                    uint16 // Units: lengths; # of lengths of swim pool
	NormalizedPower               uint16 // Units: watts;
	TrainingStressScore           uint16 // Scale: 10; Units: tss;
	IntensityFactor               uint16 // Scale: 1000; Units: if;
	LeftRightBalance              typedef.LeftRightBalance100
	EndPositionLat                int32              // Units: semicircles;
	EndPositionLong               int32              // Units: semicircles;
	AvgStrokeCount                uint32             // Scale: 10; Units: strokes/lap;
	AvgStrokeDistance             uint16             // Scale: 100; Units: m;
	SwimStroke                    typedef.SwimStroke // Units: swim_stroke;
	PoolLength                    uint16             // Scale: 100; Units: m;
	ThresholdPower                uint16             // Units: watts;
	PoolLengthUnit                typedef.DisplayMeasure
	NumActiveLengths              uint16   // Units: lengths; # of active lengths of swim pool
	TotalWork                     uint32   // Units: J;
	AvgAltitude                   uint16   // Scale: 5; Offset: 500; Units: m;
	MaxAltitude                   uint16   // Scale: 5; Offset: 500; Units: m;
	GpsAccuracy                   uint8    // Units: m;
	AvgGrade                      int16    // Scale: 100; Units: %;
	AvgPosGrade                   int16    // Scale: 100; Units: %;
	AvgNegGrade                   int16    // Scale: 100; Units: %;
	MaxPosGrade                   int16    // Scale: 100; Units: %;
	MaxNegGrade                   int16    // Scale: 100; Units: %;
	AvgTemperature                int8     // Units: C;
	MaxTemperature                int8     // Units: C;
	TotalMovingTime               uint32   // Scale: 1000; Units: s;
	AvgPosVerticalSpeed           int16    // Scale: 1000; Units: m/s;
	AvgNegVerticalSpeed           int16    // Scale: 1000; Units: m/s;
	MaxPosVerticalSpeed           int16    // Scale: 1000; Units: m/s;
	MaxNegVerticalSpeed           int16    // Scale: 1000; Units: m/s;
	MinHeartRate                  uint8    // Units: bpm;
	TimeInHrZone                  []uint32 // Scale: 1000; Array: [N]; Units: s;
	TimeInSpeedZone               []uint32 // Scale: 1000; Array: [N]; Units: s;
	TimeInCadenceZone             []uint32 // Scale: 1000; Array: [N]; Units: s;
	TimeInPowerZone               []uint32 // Scale: 1000; Array: [N]; Units: s;
	AvgLapTime                    uint32   // Scale: 1000; Units: s;
	BestLapIndex                  uint16
	MinAltitude                   uint16 // Scale: 5; Offset: 500; Units: m;
	PlayerScore                   uint16
	OpponentScore                 uint16
	OpponentName                  string
	StrokeCount                   []uint16 // Array: [N]; Units: counts; stroke_type enum used as the index
	ZoneCount                     []uint16 // Array: [N]; Units: counts; zone number used as the index
	MaxBallSpeed                  uint16   // Scale: 100; Units: m/s;
	AvgBallSpeed                  uint16   // Scale: 100; Units: m/s;
	AvgVerticalOscillation        uint16   // Scale: 10; Units: mm;
	AvgStanceTimePercent          uint16   // Scale: 100; Units: percent;
	AvgStanceTime                 uint16   // Scale: 10; Units: ms;
	AvgFractionalCadence          uint8    // Scale: 128; Units: rpm; fractional part of the avg_cadence
	MaxFractionalCadence          uint8    // Scale: 128; Units: rpm; fractional part of the max_cadence
	TotalFractionalCycles         uint8    // Scale: 128; Units: cycles; fractional part of the total_cycles
	AvgTotalHemoglobinConc        []uint16 // Scale: 100; Array: [N]; Units: g/dL; Avg saturated and unsaturated hemoglobin
	MinTotalHemoglobinConc        []uint16 // Scale: 100; Array: [N]; Units: g/dL; Min saturated and unsaturated hemoglobin
	MaxTotalHemoglobinConc        []uint16 // Scale: 100; Array: [N]; Units: g/dL; Max saturated and unsaturated hemoglobin
	AvgSaturatedHemoglobinPercent []uint16 // Scale: 10; Array: [N]; Units: %; Avg percentage of hemoglobin saturated with oxygen
	MinSaturatedHemoglobinPercent []uint16 // Scale: 10; Array: [N]; Units: %; Min percentage of hemoglobin saturated with oxygen
	MaxSaturatedHemoglobinPercent []uint16 // Scale: 10; Array: [N]; Units: %; Max percentage of hemoglobin saturated with oxygen
	AvgLeftTorqueEffectiveness    uint8    // Scale: 2; Units: percent;
	AvgRightTorqueEffectiveness   uint8    // Scale: 2; Units: percent;
	AvgLeftPedalSmoothness        uint8    // Scale: 2; Units: percent;
	AvgRightPedalSmoothness       uint8    // Scale: 2; Units: percent;
	AvgCombinedPedalSmoothness    uint8    // Scale: 2; Units: percent;
	SportProfileName              string   // Sport name from associated sport mesg
	SportIndex                    uint8
	TimeStanding                  uint32   // Scale: 1000; Units: s; Total time spend in the standing position
	StandCount                    uint16   // Number of transitions to the standing state
	AvgLeftPco                    int8     // Units: mm; Average platform center offset Left
	AvgRightPco                   int8     // Units: mm; Average platform center offset Right
	AvgLeftPowerPhase             []uint8  // Scale: 0.7111111; Array: [N]; Units: degrees; Average left power phase angles. Indexes defined by power_phase_type.
	AvgLeftPowerPhasePeak         []uint8  // Scale: 0.7111111; Array: [N]; Units: degrees; Average left power phase peak angles. Data value indexes defined by power_phase_type.
	AvgRightPowerPhase            []uint8  // Scale: 0.7111111; Array: [N]; Units: degrees; Average right power phase angles. Data value indexes defined by power_phase_type.
	AvgRightPowerPhasePeak        []uint8  // Scale: 0.7111111; Array: [N]; Units: degrees; Average right power phase peak angles data value indexes defined by power_phase_type.
	AvgPowerPosition              []uint16 // Array: [N]; Units: watts; Average power by position. Data value indexes defined by rider_position_type.
	MaxPowerPosition              []uint16 // Array: [N]; Units: watts; Maximum power by position. Data value indexes defined by rider_position_type.
	AvgCadencePosition            []uint8  // Array: [N]; Units: rpm; Average cadence by position. Data value indexes defined by rider_position_type.
	MaxCadencePosition            []uint8  // Array: [N]; Units: rpm; Maximum cadence by position. Data value indexes defined by rider_position_type.
	EnhancedAvgSpeed              uint32   // Scale: 1000; Units: m/s; total_distance / total_timer_time
	EnhancedMaxSpeed              uint32   // Scale: 1000; Units: m/s;
	EnhancedAvgAltitude           uint32   // Scale: 5; Offset: 500; Units: m;
	EnhancedMinAltitude           uint32   // Scale: 5; Offset: 500; Units: m;
	EnhancedMaxAltitude           uint32   // Scale: 5; Offset: 500; Units: m;
	AvgLevMotorPower              uint16   // Units: watts; lev average motor power during session
	MaxLevMotorPower              uint16   // Units: watts; lev maximum motor power during session
	LevBatteryConsumption         uint8    // Scale: 2; Units: percent; lev battery consumption during session
	AvgVerticalRatio              uint16   // Scale: 100; Units: percent;
	AvgStanceTimeBalance          uint16   // Scale: 100; Units: percent;
	AvgStepLength                 uint16   // Scale: 10; Units: mm;
	TotalAnaerobicTrainingEffect  uint8    // Scale: 10;
	AvgVam                        uint16   // Scale: 1000; Units: m/s;
	AvgDepth                      uint32   // Scale: 1000; Units: m; 0 if above water
	MaxDepth                      uint32   // Scale: 1000; Units: m; 0 if above water
	SurfaceInterval               uint32   // Units: s; Time since end of last dive
	StartCns                      uint8    // Units: percent;
	EndCns                        uint8    // Units: percent;
	StartN2                       uint16   // Units: percent;
	EndN2                         uint16   // Units: percent;
	AvgRespirationRate            uint8
	MaxRespirationRate            uint8
	MinRespirationRate            uint8
	MinTemperature                int8   // Units: C;
	O2Toxicity                    uint16 // Units: OTUs;
	DiveNumber                    uint32
	TrainingLoadPeak              int32   // Scale: 65536;
	EnhancedAvgRespirationRate    uint16  // Scale: 100; Units: Breaths/min;
	EnhancedMaxRespirationRate    uint16  // Scale: 100; Units: Breaths/min;
	EnhancedMinRespirationRate    uint16  // Scale: 100;
	TotalGrit                     float32 // Units: kGrit; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	TotalFlow                     float32 // Units: Flow; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	JumpCount                     uint16
	AvgGrit                       float32 // Units: kGrit; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	AvgFlow                       float32 // Units: Flow; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	AvgSpo2                       uint8   // Units: percent; Average SPO2 for the monitoring session
	AvgStress                     uint8   // Units: percent; Average stress for the monitoring session
	SdrrHrv                       uint8   // Units: mS; Standard deviation of R-R interval (SDRR) - Heart rate variability measure most useful for wellness users.
	RmssdHrv                      uint8   // Units: mS; Root mean square successive difference (RMSSD) - Heart rate variability measure most useful for athletes
	TotalFractionalAscent         uint8   // Scale: 100; Units: m; fractional part of total_ascent
	TotalFractionalDescent        uint8   // Scale: 100; Units: m; fractional part of total_descent
	AvgCoreTemperature            uint16  // Scale: 100; Units: C;
	MinCoreTemperature            uint16  // Scale: 100; Units: C;
	MaxCoreTemperature            uint16  // Scale: 100; Units: C;

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSession creates new Session struct based on given mesg. If mesg is nil or mesg.Num is not equal to Session mesg number, it will return nil.
func NewSession(mesg proto.Message) *Session {
	if mesg.Num != typedef.MesgNumSession {
		return nil
	}

	vals := [...]any{ // nil value will be converted to its corresponding invalid value by typeconv.
		254: nil, /* MessageIndex */
		253: nil, /* Timestamp */
		0:   nil, /* Event */
		1:   nil, /* EventType */
		2:   nil, /* StartTime */
		3:   nil, /* StartPositionLat */
		4:   nil, /* StartPositionLong */
		5:   nil, /* Sport */
		6:   nil, /* SubSport */
		7:   nil, /* TotalElapsedTime */
		8:   nil, /* TotalTimerTime */
		9:   nil, /* TotalDistance */
		10:  nil, /* TotalCycles */
		11:  nil, /* TotalCalories */
		13:  nil, /* TotalFatCalories */
		14:  nil, /* AvgSpeed */
		15:  nil, /* MaxSpeed */
		16:  nil, /* AvgHeartRate */
		17:  nil, /* MaxHeartRate */
		18:  nil, /* AvgCadence */
		19:  nil, /* MaxCadence */
		20:  nil, /* AvgPower */
		21:  nil, /* MaxPower */
		22:  nil, /* TotalAscent */
		23:  nil, /* TotalDescent */
		24:  nil, /* TotalTrainingEffect */
		25:  nil, /* FirstLapIndex */
		26:  nil, /* NumLaps */
		27:  nil, /* EventGroup */
		28:  nil, /* Trigger */
		29:  nil, /* NecLat */
		30:  nil, /* NecLong */
		31:  nil, /* SwcLat */
		32:  nil, /* SwcLong */
		33:  nil, /* NumLengths */
		34:  nil, /* NormalizedPower */
		35:  nil, /* TrainingStressScore */
		36:  nil, /* IntensityFactor */
		37:  nil, /* LeftRightBalance */
		38:  nil, /* EndPositionLat */
		39:  nil, /* EndPositionLong */
		41:  nil, /* AvgStrokeCount */
		42:  nil, /* AvgStrokeDistance */
		43:  nil, /* SwimStroke */
		44:  nil, /* PoolLength */
		45:  nil, /* ThresholdPower */
		46:  nil, /* PoolLengthUnit */
		47:  nil, /* NumActiveLengths */
		48:  nil, /* TotalWork */
		49:  nil, /* AvgAltitude */
		50:  nil, /* MaxAltitude */
		51:  nil, /* GpsAccuracy */
		52:  nil, /* AvgGrade */
		53:  nil, /* AvgPosGrade */
		54:  nil, /* AvgNegGrade */
		55:  nil, /* MaxPosGrade */
		56:  nil, /* MaxNegGrade */
		57:  nil, /* AvgTemperature */
		58:  nil, /* MaxTemperature */
		59:  nil, /* TotalMovingTime */
		60:  nil, /* AvgPosVerticalSpeed */
		61:  nil, /* AvgNegVerticalSpeed */
		62:  nil, /* MaxPosVerticalSpeed */
		63:  nil, /* MaxNegVerticalSpeed */
		64:  nil, /* MinHeartRate */
		65:  nil, /* TimeInHrZone */
		66:  nil, /* TimeInSpeedZone */
		67:  nil, /* TimeInCadenceZone */
		68:  nil, /* TimeInPowerZone */
		69:  nil, /* AvgLapTime */
		70:  nil, /* BestLapIndex */
		71:  nil, /* MinAltitude */
		82:  nil, /* PlayerScore */
		83:  nil, /* OpponentScore */
		84:  nil, /* OpponentName */
		85:  nil, /* StrokeCount */
		86:  nil, /* ZoneCount */
		87:  nil, /* MaxBallSpeed */
		88:  nil, /* AvgBallSpeed */
		89:  nil, /* AvgVerticalOscillation */
		90:  nil, /* AvgStanceTimePercent */
		91:  nil, /* AvgStanceTime */
		92:  nil, /* AvgFractionalCadence */
		93:  nil, /* MaxFractionalCadence */
		94:  nil, /* TotalFractionalCycles */
		95:  nil, /* AvgTotalHemoglobinConc */
		96:  nil, /* MinTotalHemoglobinConc */
		97:  nil, /* MaxTotalHemoglobinConc */
		98:  nil, /* AvgSaturatedHemoglobinPercent */
		99:  nil, /* MinSaturatedHemoglobinPercent */
		100: nil, /* MaxSaturatedHemoglobinPercent */
		101: nil, /* AvgLeftTorqueEffectiveness */
		102: nil, /* AvgRightTorqueEffectiveness */
		103: nil, /* AvgLeftPedalSmoothness */
		104: nil, /* AvgRightPedalSmoothness */
		105: nil, /* AvgCombinedPedalSmoothness */
		110: nil, /* SportProfileName */
		111: nil, /* SportIndex */
		112: nil, /* TimeStanding */
		113: nil, /* StandCount */
		114: nil, /* AvgLeftPco */
		115: nil, /* AvgRightPco */
		116: nil, /* AvgLeftPowerPhase */
		117: nil, /* AvgLeftPowerPhasePeak */
		118: nil, /* AvgRightPowerPhase */
		119: nil, /* AvgRightPowerPhasePeak */
		120: nil, /* AvgPowerPosition */
		121: nil, /* MaxPowerPosition */
		122: nil, /* AvgCadencePosition */
		123: nil, /* MaxCadencePosition */
		124: nil, /* EnhancedAvgSpeed */
		125: nil, /* EnhancedMaxSpeed */
		126: nil, /* EnhancedAvgAltitude */
		127: nil, /* EnhancedMinAltitude */
		128: nil, /* EnhancedMaxAltitude */
		129: nil, /* AvgLevMotorPower */
		130: nil, /* MaxLevMotorPower */
		131: nil, /* LevBatteryConsumption */
		132: nil, /* AvgVerticalRatio */
		133: nil, /* AvgStanceTimeBalance */
		134: nil, /* AvgStepLength */
		137: nil, /* TotalAnaerobicTrainingEffect */
		139: nil, /* AvgVam */
		140: nil, /* AvgDepth */
		141: nil, /* MaxDepth */
		142: nil, /* SurfaceInterval */
		143: nil, /* StartCns */
		144: nil, /* EndCns */
		145: nil, /* StartN2 */
		146: nil, /* EndN2 */
		147: nil, /* AvgRespirationRate */
		148: nil, /* MaxRespirationRate */
		149: nil, /* MinRespirationRate */
		150: nil, /* MinTemperature */
		155: nil, /* O2Toxicity */
		156: nil, /* DiveNumber */
		168: nil, /* TrainingLoadPeak */
		169: nil, /* EnhancedAvgRespirationRate */
		170: nil, /* EnhancedMaxRespirationRate */
		180: nil, /* EnhancedMinRespirationRate */
		181: nil, /* TotalGrit */
		182: nil, /* TotalFlow */
		183: nil, /* JumpCount */
		186: nil, /* AvgGrit */
		187: nil, /* AvgFlow */
		194: nil, /* AvgSpo2 */
		195: nil, /* AvgStress */
		197: nil, /* SdrrHrv */
		198: nil, /* RmssdHrv */
		199: nil, /* TotalFractionalAscent */
		200: nil, /* TotalFractionalDescent */
		208: nil, /* AvgCoreTemperature */
		209: nil, /* MinCoreTemperature */
		210: nil, /* MaxCoreTemperature */
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Session{
		MessageIndex:                  typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		Timestamp:                     typeconv.ToUint32[typedef.DateTime](vals[253]),
		Event:                         typeconv.ToEnum[typedef.Event](vals[0]),
		EventType:                     typeconv.ToEnum[typedef.EventType](vals[1]),
		StartTime:                     typeconv.ToUint32[typedef.DateTime](vals[2]),
		StartPositionLat:              typeconv.ToSint32[int32](vals[3]),
		StartPositionLong:             typeconv.ToSint32[int32](vals[4]),
		Sport:                         typeconv.ToEnum[typedef.Sport](vals[5]),
		SubSport:                      typeconv.ToEnum[typedef.SubSport](vals[6]),
		TotalElapsedTime:              typeconv.ToUint32[uint32](vals[7]),
		TotalTimerTime:                typeconv.ToUint32[uint32](vals[8]),
		TotalDistance:                 typeconv.ToUint32[uint32](vals[9]),
		TotalCycles:                   typeconv.ToUint32[uint32](vals[10]),
		TotalCalories:                 typeconv.ToUint16[uint16](vals[11]),
		TotalFatCalories:              typeconv.ToUint16[uint16](vals[13]),
		AvgSpeed:                      typeconv.ToUint16[uint16](vals[14]),
		MaxSpeed:                      typeconv.ToUint16[uint16](vals[15]),
		AvgHeartRate:                  typeconv.ToUint8[uint8](vals[16]),
		MaxHeartRate:                  typeconv.ToUint8[uint8](vals[17]),
		AvgCadence:                    typeconv.ToUint8[uint8](vals[18]),
		MaxCadence:                    typeconv.ToUint8[uint8](vals[19]),
		AvgPower:                      typeconv.ToUint16[uint16](vals[20]),
		MaxPower:                      typeconv.ToUint16[uint16](vals[21]),
		TotalAscent:                   typeconv.ToUint16[uint16](vals[22]),
		TotalDescent:                  typeconv.ToUint16[uint16](vals[23]),
		TotalTrainingEffect:           typeconv.ToUint8[uint8](vals[24]),
		FirstLapIndex:                 typeconv.ToUint16[uint16](vals[25]),
		NumLaps:                       typeconv.ToUint16[uint16](vals[26]),
		EventGroup:                    typeconv.ToUint8[uint8](vals[27]),
		Trigger:                       typeconv.ToEnum[typedef.SessionTrigger](vals[28]),
		NecLat:                        typeconv.ToSint32[int32](vals[29]),
		NecLong:                       typeconv.ToSint32[int32](vals[30]),
		SwcLat:                        typeconv.ToSint32[int32](vals[31]),
		SwcLong:                       typeconv.ToSint32[int32](vals[32]),
		NumLengths:                    typeconv.ToUint16[uint16](vals[33]),
		NormalizedPower:               typeconv.ToUint16[uint16](vals[34]),
		TrainingStressScore:           typeconv.ToUint16[uint16](vals[35]),
		IntensityFactor:               typeconv.ToUint16[uint16](vals[36]),
		LeftRightBalance:              typeconv.ToUint16[typedef.LeftRightBalance100](vals[37]),
		EndPositionLat:                typeconv.ToSint32[int32](vals[38]),
		EndPositionLong:               typeconv.ToSint32[int32](vals[39]),
		AvgStrokeCount:                typeconv.ToUint32[uint32](vals[41]),
		AvgStrokeDistance:             typeconv.ToUint16[uint16](vals[42]),
		SwimStroke:                    typeconv.ToEnum[typedef.SwimStroke](vals[43]),
		PoolLength:                    typeconv.ToUint16[uint16](vals[44]),
		ThresholdPower:                typeconv.ToUint16[uint16](vals[45]),
		PoolLengthUnit:                typeconv.ToEnum[typedef.DisplayMeasure](vals[46]),
		NumActiveLengths:              typeconv.ToUint16[uint16](vals[47]),
		TotalWork:                     typeconv.ToUint32[uint32](vals[48]),
		AvgAltitude:                   typeconv.ToUint16[uint16](vals[49]),
		MaxAltitude:                   typeconv.ToUint16[uint16](vals[50]),
		GpsAccuracy:                   typeconv.ToUint8[uint8](vals[51]),
		AvgGrade:                      typeconv.ToSint16[int16](vals[52]),
		AvgPosGrade:                   typeconv.ToSint16[int16](vals[53]),
		AvgNegGrade:                   typeconv.ToSint16[int16](vals[54]),
		MaxPosGrade:                   typeconv.ToSint16[int16](vals[55]),
		MaxNegGrade:                   typeconv.ToSint16[int16](vals[56]),
		AvgTemperature:                typeconv.ToSint8[int8](vals[57]),
		MaxTemperature:                typeconv.ToSint8[int8](vals[58]),
		TotalMovingTime:               typeconv.ToUint32[uint32](vals[59]),
		AvgPosVerticalSpeed:           typeconv.ToSint16[int16](vals[60]),
		AvgNegVerticalSpeed:           typeconv.ToSint16[int16](vals[61]),
		MaxPosVerticalSpeed:           typeconv.ToSint16[int16](vals[62]),
		MaxNegVerticalSpeed:           typeconv.ToSint16[int16](vals[63]),
		MinHeartRate:                  typeconv.ToUint8[uint8](vals[64]),
		TimeInHrZone:                  typeconv.ToSliceUint32[uint32](vals[65]),
		TimeInSpeedZone:               typeconv.ToSliceUint32[uint32](vals[66]),
		TimeInCadenceZone:             typeconv.ToSliceUint32[uint32](vals[67]),
		TimeInPowerZone:               typeconv.ToSliceUint32[uint32](vals[68]),
		AvgLapTime:                    typeconv.ToUint32[uint32](vals[69]),
		BestLapIndex:                  typeconv.ToUint16[uint16](vals[70]),
		MinAltitude:                   typeconv.ToUint16[uint16](vals[71]),
		PlayerScore:                   typeconv.ToUint16[uint16](vals[82]),
		OpponentScore:                 typeconv.ToUint16[uint16](vals[83]),
		OpponentName:                  typeconv.ToString[string](vals[84]),
		StrokeCount:                   typeconv.ToSliceUint16[uint16](vals[85]),
		ZoneCount:                     typeconv.ToSliceUint16[uint16](vals[86]),
		MaxBallSpeed:                  typeconv.ToUint16[uint16](vals[87]),
		AvgBallSpeed:                  typeconv.ToUint16[uint16](vals[88]),
		AvgVerticalOscillation:        typeconv.ToUint16[uint16](vals[89]),
		AvgStanceTimePercent:          typeconv.ToUint16[uint16](vals[90]),
		AvgStanceTime:                 typeconv.ToUint16[uint16](vals[91]),
		AvgFractionalCadence:          typeconv.ToUint8[uint8](vals[92]),
		MaxFractionalCadence:          typeconv.ToUint8[uint8](vals[93]),
		TotalFractionalCycles:         typeconv.ToUint8[uint8](vals[94]),
		AvgTotalHemoglobinConc:        typeconv.ToSliceUint16[uint16](vals[95]),
		MinTotalHemoglobinConc:        typeconv.ToSliceUint16[uint16](vals[96]),
		MaxTotalHemoglobinConc:        typeconv.ToSliceUint16[uint16](vals[97]),
		AvgSaturatedHemoglobinPercent: typeconv.ToSliceUint16[uint16](vals[98]),
		MinSaturatedHemoglobinPercent: typeconv.ToSliceUint16[uint16](vals[99]),
		MaxSaturatedHemoglobinPercent: typeconv.ToSliceUint16[uint16](vals[100]),
		AvgLeftTorqueEffectiveness:    typeconv.ToUint8[uint8](vals[101]),
		AvgRightTorqueEffectiveness:   typeconv.ToUint8[uint8](vals[102]),
		AvgLeftPedalSmoothness:        typeconv.ToUint8[uint8](vals[103]),
		AvgRightPedalSmoothness:       typeconv.ToUint8[uint8](vals[104]),
		AvgCombinedPedalSmoothness:    typeconv.ToUint8[uint8](vals[105]),
		SportProfileName:              typeconv.ToString[string](vals[110]),
		SportIndex:                    typeconv.ToUint8[uint8](vals[111]),
		TimeStanding:                  typeconv.ToUint32[uint32](vals[112]),
		StandCount:                    typeconv.ToUint16[uint16](vals[113]),
		AvgLeftPco:                    typeconv.ToSint8[int8](vals[114]),
		AvgRightPco:                   typeconv.ToSint8[int8](vals[115]),
		AvgLeftPowerPhase:             typeconv.ToSliceUint8[uint8](vals[116]),
		AvgLeftPowerPhasePeak:         typeconv.ToSliceUint8[uint8](vals[117]),
		AvgRightPowerPhase:            typeconv.ToSliceUint8[uint8](vals[118]),
		AvgRightPowerPhasePeak:        typeconv.ToSliceUint8[uint8](vals[119]),
		AvgPowerPosition:              typeconv.ToSliceUint16[uint16](vals[120]),
		MaxPowerPosition:              typeconv.ToSliceUint16[uint16](vals[121]),
		AvgCadencePosition:            typeconv.ToSliceUint8[uint8](vals[122]),
		MaxCadencePosition:            typeconv.ToSliceUint8[uint8](vals[123]),
		EnhancedAvgSpeed:              typeconv.ToUint32[uint32](vals[124]),
		EnhancedMaxSpeed:              typeconv.ToUint32[uint32](vals[125]),
		EnhancedAvgAltitude:           typeconv.ToUint32[uint32](vals[126]),
		EnhancedMinAltitude:           typeconv.ToUint32[uint32](vals[127]),
		EnhancedMaxAltitude:           typeconv.ToUint32[uint32](vals[128]),
		AvgLevMotorPower:              typeconv.ToUint16[uint16](vals[129]),
		MaxLevMotorPower:              typeconv.ToUint16[uint16](vals[130]),
		LevBatteryConsumption:         typeconv.ToUint8[uint8](vals[131]),
		AvgVerticalRatio:              typeconv.ToUint16[uint16](vals[132]),
		AvgStanceTimeBalance:          typeconv.ToUint16[uint16](vals[133]),
		AvgStepLength:                 typeconv.ToUint16[uint16](vals[134]),
		TotalAnaerobicTrainingEffect:  typeconv.ToUint8[uint8](vals[137]),
		AvgVam:                        typeconv.ToUint16[uint16](vals[139]),
		AvgDepth:                      typeconv.ToUint32[uint32](vals[140]),
		MaxDepth:                      typeconv.ToUint32[uint32](vals[141]),
		SurfaceInterval:               typeconv.ToUint32[uint32](vals[142]),
		StartCns:                      typeconv.ToUint8[uint8](vals[143]),
		EndCns:                        typeconv.ToUint8[uint8](vals[144]),
		StartN2:                       typeconv.ToUint16[uint16](vals[145]),
		EndN2:                         typeconv.ToUint16[uint16](vals[146]),
		AvgRespirationRate:            typeconv.ToUint8[uint8](vals[147]),
		MaxRespirationRate:            typeconv.ToUint8[uint8](vals[148]),
		MinRespirationRate:            typeconv.ToUint8[uint8](vals[149]),
		MinTemperature:                typeconv.ToSint8[int8](vals[150]),
		O2Toxicity:                    typeconv.ToUint16[uint16](vals[155]),
		DiveNumber:                    typeconv.ToUint32[uint32](vals[156]),
		TrainingLoadPeak:              typeconv.ToSint32[int32](vals[168]),
		EnhancedAvgRespirationRate:    typeconv.ToUint16[uint16](vals[169]),
		EnhancedMaxRespirationRate:    typeconv.ToUint16[uint16](vals[170]),
		EnhancedMinRespirationRate:    typeconv.ToUint16[uint16](vals[180]),
		TotalGrit:                     typeconv.ToFloat32[float32](vals[181]),
		TotalFlow:                     typeconv.ToFloat32[float32](vals[182]),
		JumpCount:                     typeconv.ToUint16[uint16](vals[183]),
		AvgGrit:                       typeconv.ToFloat32[float32](vals[186]),
		AvgFlow:                       typeconv.ToFloat32[float32](vals[187]),
		AvgSpo2:                       typeconv.ToUint8[uint8](vals[194]),
		AvgStress:                     typeconv.ToUint8[uint8](vals[195]),
		SdrrHrv:                       typeconv.ToUint8[uint8](vals[197]),
		RmssdHrv:                      typeconv.ToUint8[uint8](vals[198]),
		TotalFractionalAscent:         typeconv.ToUint8[uint8](vals[199]),
		TotalFractionalDescent:        typeconv.ToUint8[uint8](vals[200]),
		AvgCoreTemperature:            typeconv.ToUint16[uint16](vals[208]),
		MinCoreTemperature:            typeconv.ToUint16[uint16](vals[209]),
		MaxCoreTemperature:            typeconv.ToUint16[uint16](vals[210]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to Session mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumSession)
func (m Session) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumSession {
		return
	}

	vals := [...]any{
		254: m.MessageIndex,
		253: m.Timestamp,
		0:   m.Event,
		1:   m.EventType,
		2:   m.StartTime,
		3:   m.StartPositionLat,
		4:   m.StartPositionLong,
		5:   m.Sport,
		6:   m.SubSport,
		7:   m.TotalElapsedTime,
		8:   m.TotalTimerTime,
		9:   m.TotalDistance,
		10:  m.TotalCycles,
		11:  m.TotalCalories,
		13:  m.TotalFatCalories,
		14:  m.AvgSpeed,
		15:  m.MaxSpeed,
		16:  m.AvgHeartRate,
		17:  m.MaxHeartRate,
		18:  m.AvgCadence,
		19:  m.MaxCadence,
		20:  m.AvgPower,
		21:  m.MaxPower,
		22:  m.TotalAscent,
		23:  m.TotalDescent,
		24:  m.TotalTrainingEffect,
		25:  m.FirstLapIndex,
		26:  m.NumLaps,
		27:  m.EventGroup,
		28:  m.Trigger,
		29:  m.NecLat,
		30:  m.NecLong,
		31:  m.SwcLat,
		32:  m.SwcLong,
		33:  m.NumLengths,
		34:  m.NormalizedPower,
		35:  m.TrainingStressScore,
		36:  m.IntensityFactor,
		37:  m.LeftRightBalance,
		38:  m.EndPositionLat,
		39:  m.EndPositionLong,
		41:  m.AvgStrokeCount,
		42:  m.AvgStrokeDistance,
		43:  m.SwimStroke,
		44:  m.PoolLength,
		45:  m.ThresholdPower,
		46:  m.PoolLengthUnit,
		47:  m.NumActiveLengths,
		48:  m.TotalWork,
		49:  m.AvgAltitude,
		50:  m.MaxAltitude,
		51:  m.GpsAccuracy,
		52:  m.AvgGrade,
		53:  m.AvgPosGrade,
		54:  m.AvgNegGrade,
		55:  m.MaxPosGrade,
		56:  m.MaxNegGrade,
		57:  m.AvgTemperature,
		58:  m.MaxTemperature,
		59:  m.TotalMovingTime,
		60:  m.AvgPosVerticalSpeed,
		61:  m.AvgNegVerticalSpeed,
		62:  m.MaxPosVerticalSpeed,
		63:  m.MaxNegVerticalSpeed,
		64:  m.MinHeartRate,
		65:  m.TimeInHrZone,
		66:  m.TimeInSpeedZone,
		67:  m.TimeInCadenceZone,
		68:  m.TimeInPowerZone,
		69:  m.AvgLapTime,
		70:  m.BestLapIndex,
		71:  m.MinAltitude,
		82:  m.PlayerScore,
		83:  m.OpponentScore,
		84:  m.OpponentName,
		85:  m.StrokeCount,
		86:  m.ZoneCount,
		87:  m.MaxBallSpeed,
		88:  m.AvgBallSpeed,
		89:  m.AvgVerticalOscillation,
		90:  m.AvgStanceTimePercent,
		91:  m.AvgStanceTime,
		92:  m.AvgFractionalCadence,
		93:  m.MaxFractionalCadence,
		94:  m.TotalFractionalCycles,
		95:  m.AvgTotalHemoglobinConc,
		96:  m.MinTotalHemoglobinConc,
		97:  m.MaxTotalHemoglobinConc,
		98:  m.AvgSaturatedHemoglobinPercent,
		99:  m.MinSaturatedHemoglobinPercent,
		100: m.MaxSaturatedHemoglobinPercent,
		101: m.AvgLeftTorqueEffectiveness,
		102: m.AvgRightTorqueEffectiveness,
		103: m.AvgLeftPedalSmoothness,
		104: m.AvgRightPedalSmoothness,
		105: m.AvgCombinedPedalSmoothness,
		110: m.SportProfileName,
		111: m.SportIndex,
		112: m.TimeStanding,
		113: m.StandCount,
		114: m.AvgLeftPco,
		115: m.AvgRightPco,
		116: m.AvgLeftPowerPhase,
		117: m.AvgLeftPowerPhasePeak,
		118: m.AvgRightPowerPhase,
		119: m.AvgRightPowerPhasePeak,
		120: m.AvgPowerPosition,
		121: m.MaxPowerPosition,
		122: m.AvgCadencePosition,
		123: m.MaxCadencePosition,
		124: m.EnhancedAvgSpeed,
		125: m.EnhancedMaxSpeed,
		126: m.EnhancedAvgAltitude,
		127: m.EnhancedMinAltitude,
		128: m.EnhancedMaxAltitude,
		129: m.AvgLevMotorPower,
		130: m.MaxLevMotorPower,
		131: m.LevBatteryConsumption,
		132: m.AvgVerticalRatio,
		133: m.AvgStanceTimeBalance,
		134: m.AvgStepLength,
		137: m.TotalAnaerobicTrainingEffect,
		139: m.AvgVam,
		140: m.AvgDepth,
		141: m.MaxDepth,
		142: m.SurfaceInterval,
		143: m.StartCns,
		144: m.EndCns,
		145: m.StartN2,
		146: m.EndN2,
		147: m.AvgRespirationRate,
		148: m.MaxRespirationRate,
		149: m.MinRespirationRate,
		150: m.MinTemperature,
		155: m.O2Toxicity,
		156: m.DiveNumber,
		168: m.TrainingLoadPeak,
		169: m.EnhancedAvgRespirationRate,
		170: m.EnhancedMaxRespirationRate,
		180: m.EnhancedMinRespirationRate,
		181: m.TotalGrit,
		182: m.TotalFlow,
		183: m.JumpCount,
		186: m.AvgGrit,
		187: m.AvgFlow,
		194: m.AvgSpo2,
		195: m.AvgStress,
		197: m.SdrrHrv,
		198: m.RmssdHrv,
		199: m.TotalFractionalAscent,
		200: m.TotalFractionalDescent,
		208: m.AvgCoreTemperature,
		209: m.MinCoreTemperature,
		210: m.MaxCoreTemperature,
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		field.Value = vals[field.Num]
	}

	mesg.DeveloperFields = m.DeveloperFields
}
