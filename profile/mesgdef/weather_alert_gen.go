// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.115

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// WeatherAlert is a WeatherAlert message.
type WeatherAlert struct {
	Timestamp  typedef.DateTime
	ReportId   string                    // Unique identifier from GCS report ID string, length is 12
	IssueTime  typedef.DateTime          // Time alert was issued
	ExpireTime typedef.DateTime          // Time alert expires
	Severity   typedef.WeatherSeverity   // Warning, Watch, Advisory, Statement
	Type       typedef.WeatherSevereType // Tornado, Severe Thunderstorm, etc.

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewWeatherAlert creates new WeatherAlert struct based on given mesg. If mesg is nil or mesg.Num is not equal to WeatherAlert mesg number, it will return nil.
func NewWeatherAlert(mesg proto.Message) *WeatherAlert {
	if mesg.Num != typedef.MesgNumWeatherAlert {
		return nil
	}

	vals := [256]any{ // Mark all values as invalid, replace only when specified.
		253: basetype.Uint32Invalid, /* Timestamp */
		0:   basetype.StringInvalid, /* ReportId */
		1:   basetype.Uint32Invalid, /* IssueTime */
		2:   basetype.Uint32Invalid, /* ExpireTime */
		3:   basetype.EnumInvalid,   /* Severity */
		4:   basetype.EnumInvalid,   /* Type */
	}

	for i := range mesg.Fields {
		if mesg.Fields[i].Value == nil {
			continue // keep the invalid value
		}
		vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
	}

	return &WeatherAlert{
		Timestamp:  typeconv.ToUint32[typedef.DateTime](vals[253]),
		ReportId:   typeconv.ToString[string](vals[0]),
		IssueTime:  typeconv.ToUint32[typedef.DateTime](vals[1]),
		ExpireTime: typeconv.ToUint32[typedef.DateTime](vals[2]),
		Severity:   typeconv.ToEnum[typedef.WeatherSeverity](vals[3]),
		Type:       typeconv.ToEnum[typedef.WeatherSevereType](vals[4]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to WeatherAlert mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumWeatherAlert)
func (m WeatherAlert) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumWeatherAlert {
		return
	}

	vals := [256]any{
		253: m.Timestamp,
		0:   m.ReportId,
		1:   m.IssueTime,
		2:   m.ExpireTime,
		3:   m.Severity,
		4:   m.Type,
	}

	for i := range mesg.Fields {
		mesg.Fields[i].Value = vals[mesg.Fields[i].Num]
	}
	mesg.DeveloperFields = m.DeveloperFields

}
