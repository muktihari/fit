// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// ExdScreenConfiguration is a ExdScreenConfiguration message.
type ExdScreenConfiguration struct {
	ScreenIndex   uint8
	FieldCount    uint8 // number of fields in screen
	Layout        typedef.ExdLayout
	ScreenEnabled bool

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewExdScreenConfiguration creates new ExdScreenConfiguration struct based on given mesg. If mesg is nil or mesg.Num is not equal to ExdScreenConfiguration mesg number, it will return nil.
func NewExdScreenConfiguration(mesg proto.Message) *ExdScreenConfiguration {
	if mesg.Num != typedef.MesgNumExdScreenConfiguration {
		return nil
	}

	vals := [4]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &ExdScreenConfiguration{
		ScreenIndex:   typeconv.ToUint8[uint8](vals[0]),
		FieldCount:    typeconv.ToUint8[uint8](vals[1]),
		Layout:        typeconv.ToEnum[typedef.ExdLayout](vals[2]),
		ScreenEnabled: typeconv.ToBool[bool](vals[3]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts ExdScreenConfiguration into proto.Message.
func (m *ExdScreenConfiguration) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumExdScreenConfiguration)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if m.ScreenIndex != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.ScreenIndex
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.FieldCount != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.FieldCount
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Layout) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = typeconv.ToEnum[byte](m.Layout)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ScreenEnabled != false {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.ScreenEnabled
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of ExdScreenConfiguration's valid fields.
func (m *ExdScreenConfiguration) size() byte {
	var size byte
	if m.ScreenIndex != basetype.Uint8Invalid {
		size++
	}
	if m.FieldCount != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Layout) != basetype.EnumInvalid {
		size++
	}
	if m.ScreenEnabled != false {
		size++
	}
	return size
}
