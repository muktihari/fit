// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// SegmentId is a SegmentId message.
type SegmentId struct {
	Name                  string                       // Friendly name assigned to segment
	Uuid                  string                       // UUID of the segment
	Sport                 typedef.Sport                // Sport associated with the segment
	Enabled               bool                         // Segment enabled for evaluation
	UserProfilePrimaryKey uint32                       // Primary key of the user that created the segment
	DeviceId              uint32                       // ID of the device that created the segment
	DefaultRaceLeader     uint8                        // Index for the Leader Board entry selected as the default race participant
	DeleteStatus          typedef.SegmentDeleteStatus  // Indicates if any segments should be deleted
	SelectionType         typedef.SegmentSelectionType // Indicates how the segment was selected to be sent to the device

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSegmentId creates new SegmentId struct based on given mesg. If mesg is nil or mesg.Num is not equal to SegmentId mesg number, it will return nil.
func NewSegmentId(mesg proto.Message) *SegmentId {
	if mesg.Num != typedef.MesgNumSegmentId {
		return nil
	}

	vals := [...]any{ // nil value will be converted to its corresponding invalid value by typeconv.
		0: nil, /* Name */
		1: nil, /* Uuid */
		2: nil, /* Sport */
		3: nil, /* Enabled */
		4: nil, /* UserProfilePrimaryKey */
		5: nil, /* DeviceId */
		6: nil, /* DefaultRaceLeader */
		7: nil, /* DeleteStatus */
		8: nil, /* SelectionType */
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &SegmentId{
		Name:                  typeconv.ToString[string](vals[0]),
		Uuid:                  typeconv.ToString[string](vals[1]),
		Sport:                 typeconv.ToEnum[typedef.Sport](vals[2]),
		Enabled:               typeconv.ToBool[bool](vals[3]),
		UserProfilePrimaryKey: typeconv.ToUint32[uint32](vals[4]),
		DeviceId:              typeconv.ToUint32[uint32](vals[5]),
		DefaultRaceLeader:     typeconv.ToUint8[uint8](vals[6]),
		DeleteStatus:          typeconv.ToEnum[typedef.SegmentDeleteStatus](vals[7]),
		SelectionType:         typeconv.ToEnum[typedef.SegmentSelectionType](vals[8]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to SegmentId mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumSegmentId)
func (m SegmentId) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumSegmentId {
		return
	}

	vals := [...]any{
		0: m.Name,
		1: m.Uuid,
		2: m.Sport,
		3: m.Enabled,
		4: m.UserProfilePrimaryKey,
		5: m.DeviceId,
		6: m.DefaultRaceLeader,
		7: m.DeleteStatus,
		8: m.SelectionType,
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		field.Value = vals[field.Num]
	}

	mesg.DeveloperFields = m.DeveloperFields
}
