// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// SegmentId is a SegmentId message.
type SegmentId struct {
	Name                  string                       // Friendly name assigned to segment
	Uuid                  string                       // UUID of the segment
	Sport                 typedef.Sport                // Sport associated with the segment
	Enabled               bool                         // Segment enabled for evaluation
	UserProfilePrimaryKey uint32                       // Primary key of the user that created the segment
	DeviceId              uint32                       // ID of the device that created the segment
	DefaultRaceLeader     uint8                        // Index for the Leader Board entry selected as the default race participant
	DeleteStatus          typedef.SegmentDeleteStatus  // Indicates if any segments should be deleted
	SelectionType         typedef.SegmentSelectionType // Indicates how the segment was selected to be sent to the device

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSegmentId creates new SegmentId struct based on given mesg. If mesg is nil or mesg.Num is not equal to SegmentId mesg number, it will return nil.
func NewSegmentId(mesg proto.Message) *SegmentId {
	if mesg.Num != typedef.MesgNumSegmentId {
		return nil
	}

	vals := [9]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &SegmentId{
		Name:                  typeconv.ToString[string](vals[0]),
		Uuid:                  typeconv.ToString[string](vals[1]),
		Sport:                 typeconv.ToEnum[typedef.Sport](vals[2]),
		Enabled:               typeconv.ToBool[bool](vals[3]),
		UserProfilePrimaryKey: typeconv.ToUint32[uint32](vals[4]),
		DeviceId:              typeconv.ToUint32[uint32](vals[5]),
		DefaultRaceLeader:     typeconv.ToUint8[uint8](vals[6]),
		DeleteStatus:          typeconv.ToEnum[typedef.SegmentDeleteStatus](vals[7]),
		SelectionType:         typeconv.ToEnum[typedef.SegmentSelectionType](vals[8]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts SegmentId into proto.Message.
func (m *SegmentId) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumSegmentId)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if m.Name != basetype.StringInvalid && m.Name != "" {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.Name
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Uuid != basetype.StringInvalid && m.Uuid != "" {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.Uuid
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Sport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = typeconv.ToEnum[byte](m.Sport)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Enabled != false {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.Enabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.UserProfilePrimaryKey != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.UserProfilePrimaryKey
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.DeviceId != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.DeviceId
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.DefaultRaceLeader != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.DefaultRaceLeader
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.DeleteStatus) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = typeconv.ToEnum[byte](m.DeleteStatus)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.SelectionType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = typeconv.ToEnum[byte](m.SelectionType)
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of SegmentId's valid fields.
func (m *SegmentId) size() byte {
	var size byte
	if m.Name != basetype.StringInvalid && m.Name != "" {
		size++
	}
	if m.Uuid != basetype.StringInvalid && m.Uuid != "" {
		size++
	}
	if typeconv.ToEnum[byte](m.Sport) != basetype.EnumInvalid {
		size++
	}
	if m.Enabled != false {
		size++
	}
	if m.UserProfilePrimaryKey != basetype.Uint32Invalid {
		size++
	}
	if m.DeviceId != basetype.Uint32Invalid {
		size++
	}
	if m.DefaultRaceLeader != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.DeleteStatus) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.SelectionType) != basetype.EnumInvalid {
		size++
	}
	return size
}
