// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.115

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// StressLevel is a StressLevel message.
type StressLevel struct {
	StressLevelValue int16
	StressLevelTime  typedef.DateTime // Units: s; Time stress score was calculated

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewStressLevel creates new StressLevel struct based on given mesg. If mesg is nil or mesg.Num is not equal to StressLevel mesg number, it will return nil.
func NewStressLevel(mesg proto.Message) *StressLevel {
	if mesg.Num != typedef.MesgNumStressLevel {
		return nil
	}

	vals := [256]any{ // Mark all values as invalid, replace only when specified.
		0: basetype.Sint16Invalid, /* StressLevelValue */
		1: basetype.Uint32Invalid, /* StressLevelTime */
	}

	for i := range mesg.Fields {
		if mesg.Fields[i].Value == nil {
			continue // keep the invalid value
		}
		vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
	}

	return &StressLevel{
		StressLevelValue: typeconv.ToSint16[int16](vals[0]),
		StressLevelTime:  typeconv.ToUint32[typedef.DateTime](vals[1]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to StressLevel mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumStressLevel)
func (m StressLevel) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumStressLevel {
		return
	}

	vals := [256]any{
		0: m.StressLevelValue,
		1: m.StressLevelTime,
	}

	for i := range mesg.Fields {
		mesg.Fields[i].Value = vals[mesg.Fields[i].Num]
	}
	mesg.DeveloperFields = m.DeveloperFields

}
