// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// StressLevel is a StressLevel message.
type StressLevel struct {
	StressLevelValue int16
	StressLevelTime  time.Time // Units: s; Time stress score was calculated

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewStressLevel creates new StressLevel struct based on given mesg.
// If mesg is nil, it will return StressLevel with all fields being set to its corresponding invalid value.
func NewStressLevel(mesg *proto.Message) *StressLevel {
	vals := [2]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &StressLevel{
		StressLevelValue: typeconv.ToSint16[int16](vals[0]),
		StressLevelTime:  datetime.ToTime(vals[1]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts StressLevel into proto.Message.
func (m *StressLevel) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumStressLevel)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if m.StressLevelValue != basetype.Sint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.StressLevelValue
		mesg.Fields = append(mesg.Fields, field)
	}
	if datetime.ToUint32(m.StressLevelTime) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = datetime.ToUint32(m.StressLevelTime)
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of StressLevel's valid fields.
func (m *StressLevel) size() byte {
	var size byte
	if m.StressLevelValue != basetype.Sint16Invalid {
		size++
	}
	if datetime.ToUint32(m.StressLevelTime) != basetype.Uint32Invalid {
		size++
	}
	return size
}

// SetStressLevelValue sets StressLevel value.
func (m *StressLevel) SetStressLevelValue(v int16) *StressLevel {
	m.StressLevelValue = v
	return m
}

// SetStressLevelTime sets StressLevel value.
//
// Units: s; Time stress score was calculated
func (m *StressLevel) SetStressLevelTime(v time.Time) *StressLevel {
	m.StressLevelTime = v
	return m
}

// SetDeveloperFields StressLevel's DeveloperFields.
func (m *StressLevel) SetDeveloperFields(developerFields ...proto.DeveloperField) *StressLevel {
	m.DeveloperFields = developerFields
	return m
}
