// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// PowerZone is a PowerZone message.
type PowerZone struct {
	Name         string
	MessageIndex typedef.MessageIndex
	HighValue    uint16 // Units: watts

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewPowerZone creates new PowerZone struct based on given mesg.
// If mesg is nil, it will return PowerZone with all fields being set to its corresponding invalid value.
func NewPowerZone(mesg *proto.Message) *PowerZone {
	vals := [255]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &PowerZone{
		Name:         typeconv.ToString[string](vals[2]),
		MessageIndex: typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		HighValue:    typeconv.ToUint16[uint16](vals[1]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts PowerZone into proto.Message. If options is nil, default options will be used.
func (m *PowerZone) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := fac.CreateMesgOnly(typedef.MesgNumPowerZone)

	if m.Name != basetype.StringInvalid && m.Name != "" {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.Name
		fields = append(fields, field)
	}
	if uint16(m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = uint16(m.MessageIndex)
		fields = append(fields, field)
	}
	if m.HighValue != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.HighValue
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// SetName sets PowerZone value.
func (m *PowerZone) SetName(v string) *PowerZone {
	m.Name = v
	return m
}

// SetMessageIndex sets PowerZone value.
func (m *PowerZone) SetMessageIndex(v typedef.MessageIndex) *PowerZone {
	m.MessageIndex = v
	return m
}

// SetHighValue sets PowerZone value.
//
// Units: watts
func (m *PowerZone) SetHighValue(v uint16) *PowerZone {
	m.HighValue = v
	return m
}

// SetDeveloperFields PowerZone's DeveloperFields.
func (m *PowerZone) SetDeveloperFields(developerFields ...proto.DeveloperField) *PowerZone {
	m.DeveloperFields = developerFields
	return m
}
