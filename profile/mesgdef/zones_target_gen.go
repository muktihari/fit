// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// ZonesTarget is a ZonesTarget message.
//
// Note: The order of the fields is optimized using a memory alignment algorithm.
// Do not rely on field indices, such as when using reflection.
type ZonesTarget struct {
	FunctionalThresholdPower uint16
	MaxHeartRate             uint8
	ThresholdHeartRate       uint8
	HrCalcType               typedef.HrZoneCalc
	PwrCalcType              typedef.PwrZoneCalc

	UnknownFields   []proto.Field          // UnknownFields are fields that are exist but they are not defined in Profile.xlsx
	DeveloperFields []proto.DeveloperField // DeveloperFields are custom data fields [Added since protocol version 2.0]
}

// NewZonesTarget creates new ZonesTarget struct based on given mesg.
// If mesg is nil, it will return ZonesTarget with all fields being set to its corresponding invalid value.
func NewZonesTarget(mesg *proto.Message) *ZonesTarget {
	vals := [8]proto.Value{}

	var unknownFields []proto.Field
	var developerFields []proto.DeveloperField
	if mesg != nil {
		arr := pool.Get().(*[poolsize]proto.Field)
		unknownFields = arr[:0]
		for i := range mesg.Fields {
			if mesg.Fields[i].Num > 7 || mesg.Fields[i].Name == factory.NameUnknown {
				unknownFields = append(unknownFields, mesg.Fields[i])
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		if len(unknownFields) == 0 {
			unknownFields = nil
		}
		unknownFields = append(unknownFields[:0:0], unknownFields...)
		pool.Put(arr)
		developerFields = mesg.DeveloperFields
	}

	return &ZonesTarget{
		MaxHeartRate:             vals[1].Uint8(),
		ThresholdHeartRate:       vals[2].Uint8(),
		FunctionalThresholdPower: vals[3].Uint16(),
		HrCalcType:               typedef.HrZoneCalc(vals[5].Uint8()),
		PwrCalcType:              typedef.PwrZoneCalc(vals[7].Uint8()),

		UnknownFields:   unknownFields,
		DeveloperFields: developerFields,
	}
}

// ToMesg converts ZonesTarget into proto.Message. If options is nil, default options will be used.
func (m *ZonesTarget) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	arr := pool.Get().(*[poolsize]proto.Field)
	fields := arr[:0]

	mesg := proto.Message{Num: typedef.MesgNumZonesTarget}

	if m.MaxHeartRate != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = proto.Uint8(m.MaxHeartRate)
		fields = append(fields, field)
	}
	if m.ThresholdHeartRate != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = proto.Uint8(m.ThresholdHeartRate)
		fields = append(fields, field)
	}
	if m.FunctionalThresholdPower != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = proto.Uint16(m.FunctionalThresholdPower)
		fields = append(fields, field)
	}
	if m.HrCalcType != typedef.HrZoneCalcInvalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = proto.Uint8(byte(m.HrCalcType))
		fields = append(fields, field)
	}
	if m.PwrCalcType != typedef.PwrZoneCalcInvalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = proto.Uint8(byte(m.PwrCalcType))
		fields = append(fields, field)
	}

	for i := range m.UnknownFields {
		fields = append(fields, m.UnknownFields[i])
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)
	pool.Put(arr)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// SetMaxHeartRate sets MaxHeartRate value.
func (m *ZonesTarget) SetMaxHeartRate(v uint8) *ZonesTarget {
	m.MaxHeartRate = v
	return m
}

// SetThresholdHeartRate sets ThresholdHeartRate value.
func (m *ZonesTarget) SetThresholdHeartRate(v uint8) *ZonesTarget {
	m.ThresholdHeartRate = v
	return m
}

// SetFunctionalThresholdPower sets FunctionalThresholdPower value.
func (m *ZonesTarget) SetFunctionalThresholdPower(v uint16) *ZonesTarget {
	m.FunctionalThresholdPower = v
	return m
}

// SetHrCalcType sets HrCalcType value.
func (m *ZonesTarget) SetHrCalcType(v typedef.HrZoneCalc) *ZonesTarget {
	m.HrCalcType = v
	return m
}

// SetPwrCalcType sets PwrCalcType value.
func (m *ZonesTarget) SetPwrCalcType(v typedef.PwrZoneCalc) *ZonesTarget {
	m.PwrCalcType = v
	return m
}

// SetDeveloperFields ZonesTarget's UnknownFields (fields that are exist but they are not defined in Profile.xlsx)
func (m *ZonesTarget) SetUnknownFields(unknownFields ...proto.Field) *ZonesTarget {
	m.UnknownFields = unknownFields
	return m
}

// SetDeveloperFields ZonesTarget's DeveloperFields.
func (m *ZonesTarget) SetDeveloperFields(developerFields ...proto.DeveloperField) *ZonesTarget {
	m.DeveloperFields = developerFields
	return m
}
