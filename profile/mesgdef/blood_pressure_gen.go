// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// BloodPressure is a BloodPressure message.
type BloodPressure struct {
	Timestamp            typedef.DateTime // Units: s;
	SystolicPressure     uint16           // Units: mmHg;
	DiastolicPressure    uint16           // Units: mmHg;
	MeanArterialPressure uint16           // Units: mmHg;
	Map3SampleMean       uint16           // Units: mmHg;
	MapMorningValues     uint16           // Units: mmHg;
	MapEveningValues     uint16           // Units: mmHg;
	HeartRate            uint8            // Units: bpm;
	HeartRateType        typedef.HrType
	Status               typedef.BpStatus
	UserProfileIndex     typedef.MessageIndex // Associates this blood pressure message to a user. This corresponds to the index of the user profile message in the blood pressure file.

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewBloodPressure creates new BloodPressure struct based on given mesg. If mesg is nil or mesg.Num is not equal to BloodPressure mesg number, it will return nil.
func NewBloodPressure(mesg proto.Message) *BloodPressure {
	if mesg.Num != typedef.MesgNumBloodPressure {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &BloodPressure{
		Timestamp:            typeconv.ToUint32[typedef.DateTime](vals[253]),
		SystolicPressure:     typeconv.ToUint16[uint16](vals[0]),
		DiastolicPressure:    typeconv.ToUint16[uint16](vals[1]),
		MeanArterialPressure: typeconv.ToUint16[uint16](vals[2]),
		Map3SampleMean:       typeconv.ToUint16[uint16](vals[3]),
		MapMorningValues:     typeconv.ToUint16[uint16](vals[4]),
		MapEveningValues:     typeconv.ToUint16[uint16](vals[5]),
		HeartRate:            typeconv.ToUint8[uint8](vals[6]),
		HeartRateType:        typeconv.ToEnum[typedef.HrType](vals[7]),
		Status:               typeconv.ToEnum[typedef.BpStatus](vals[8]),
		UserProfileIndex:     typeconv.ToUint16[typedef.MessageIndex](vals[9]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts BloodPressure into proto.Message.
func (m *BloodPressure) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumBloodPressure)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.SystolicPressure != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.SystolicPressure
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.DiastolicPressure != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.DiastolicPressure
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MeanArterialPressure != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.MeanArterialPressure
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Map3SampleMean != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.Map3SampleMean
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MapMorningValues != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.MapMorningValues
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MapEveningValues != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.MapEveningValues
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.HeartRate != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.HeartRate
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.HeartRateType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = typeconv.ToEnum[byte](m.HeartRateType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Status) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = typeconv.ToEnum[byte](m.Status)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint16[uint16](m.UserProfileIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = typeconv.ToUint16[uint16](m.UserProfileIndex)
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of BloodPressure's valid fields.
func (m *BloodPressure) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.SystolicPressure != basetype.Uint16Invalid {
		size++
	}
	if m.DiastolicPressure != basetype.Uint16Invalid {
		size++
	}
	if m.MeanArterialPressure != basetype.Uint16Invalid {
		size++
	}
	if m.Map3SampleMean != basetype.Uint16Invalid {
		size++
	}
	if m.MapMorningValues != basetype.Uint16Invalid {
		size++
	}
	if m.MapEveningValues != basetype.Uint16Invalid {
		size++
	}
	if m.HeartRate != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.HeartRateType) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Status) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToUint16[uint16](m.UserProfileIndex) != basetype.Uint16Invalid {
		size++
	}
	return size
}
