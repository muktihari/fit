// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// BloodPressure is a BloodPressure message.
type BloodPressure struct {
	Timestamp            typedef.DateTime // Units: s;
	SystolicPressure     uint16           // Units: mmHg;
	DiastolicPressure    uint16           // Units: mmHg;
	MeanArterialPressure uint16           // Units: mmHg;
	Map3SampleMean       uint16           // Units: mmHg;
	MapMorningValues     uint16           // Units: mmHg;
	MapEveningValues     uint16           // Units: mmHg;
	HeartRate            uint8            // Units: bpm;
	HeartRateType        typedef.HrType
	Status               typedef.BpStatus
	UserProfileIndex     typedef.MessageIndex // Associates this blood pressure message to a user. This corresponds to the index of the user profile message in the blood pressure file.

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewBloodPressure creates new BloodPressure struct based on given mesg. If mesg is nil or mesg.Num is not equal to BloodPressure mesg number, it will return nil.
func NewBloodPressure(mesg proto.Message) *BloodPressure {
	if mesg.Num != typedef.MesgNumBloodPressure {
		return nil
	}

	vals := [256]any{ // Mark all values as invalid, replace only when specified.
		253: basetype.Uint32Invalid, /* Timestamp */
		0:   basetype.Uint16Invalid, /* SystolicPressure */
		1:   basetype.Uint16Invalid, /* DiastolicPressure */
		2:   basetype.Uint16Invalid, /* MeanArterialPressure */
		3:   basetype.Uint16Invalid, /* Map3SampleMean */
		4:   basetype.Uint16Invalid, /* MapMorningValues */
		5:   basetype.Uint16Invalid, /* MapEveningValues */
		6:   basetype.Uint8Invalid,  /* HeartRate */
		7:   basetype.EnumInvalid,   /* HeartRateType */
		8:   basetype.EnumInvalid,   /* Status */
		9:   basetype.Uint16Invalid, /* UserProfileIndex */
	}

	for i := range mesg.Fields {
		if mesg.Fields[i].Value == nil {
			continue // keep the invalid value
		}
		vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
	}

	return &BloodPressure{
		Timestamp:            typeconv.ToUint32[typedef.DateTime](vals[253]),
		SystolicPressure:     typeconv.ToUint16[uint16](vals[0]),
		DiastolicPressure:    typeconv.ToUint16[uint16](vals[1]),
		MeanArterialPressure: typeconv.ToUint16[uint16](vals[2]),
		Map3SampleMean:       typeconv.ToUint16[uint16](vals[3]),
		MapMorningValues:     typeconv.ToUint16[uint16](vals[4]),
		MapEveningValues:     typeconv.ToUint16[uint16](vals[5]),
		HeartRate:            typeconv.ToUint8[uint8](vals[6]),
		HeartRateType:        typeconv.ToEnum[typedef.HrType](vals[7]),
		Status:               typeconv.ToEnum[typedef.BpStatus](vals[8]),
		UserProfileIndex:     typeconv.ToUint16[typedef.MessageIndex](vals[9]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to BloodPressure mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumBloodPressure)
func (m BloodPressure) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumBloodPressure {
		return
	}

	vals := [256]any{
		253: m.Timestamp,
		0:   m.SystolicPressure,
		1:   m.DiastolicPressure,
		2:   m.MeanArterialPressure,
		3:   m.Map3SampleMean,
		4:   m.MapMorningValues,
		5:   m.MapEveningValues,
		6:   m.HeartRate,
		7:   m.HeartRateType,
		8:   m.Status,
		9:   m.UserProfileIndex,
	}

	for i := range mesg.Fields {
		mesg.Fields[i].Value = vals[mesg.Fields[i].Num]
	}
	mesg.DeveloperFields = m.DeveloperFields

}
