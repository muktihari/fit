// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// MonitoringInfo is a MonitoringInfo message.
type MonitoringInfo struct {
	Timestamp            typedef.DateTime       // Units: s;
	LocalTimestamp       typedef.LocalDateTime  // Units: s; Use to convert activity timestamps to local time if device does not support time zone and daylight savings time correction.
	ActivityType         []typedef.ActivityType // Array: [N];
	CyclesToDistance     []uint16               // Scale: 5000; Array: [N]; Units: m/cycle; Indexed by activity_type
	CyclesToCalories     []uint16               // Scale: 5000; Array: [N]; Units: kcal/cycle; Indexed by activity_type
	RestingMetabolicRate uint16                 // Units: kcal / day;

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewMonitoringInfo creates new MonitoringInfo struct based on given mesg. If mesg is nil or mesg.Num is not equal to MonitoringInfo mesg number, it will return nil.
func NewMonitoringInfo(mesg proto.Message) *MonitoringInfo {
	if mesg.Num != typedef.MesgNumMonitoringInfo {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &MonitoringInfo{
		Timestamp:            typeconv.ToUint32[typedef.DateTime](vals[253]),
		LocalTimestamp:       typeconv.ToUint32[typedef.LocalDateTime](vals[0]),
		ActivityType:         typeconv.ToSliceEnum[typedef.ActivityType](vals[1]),
		CyclesToDistance:     typeconv.ToSliceUint16[uint16](vals[3]),
		CyclesToCalories:     typeconv.ToSliceUint16[uint16](vals[4]),
		RestingMetabolicRate: typeconv.ToUint16[uint16](vals[5]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts MonitoringInfo into proto.Message.
func (m *MonitoringInfo) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumMonitoringInfo)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.LocalTimestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = typeconv.ToUint32[uint32](m.LocalTimestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToSliceEnum[byte](m.ActivityType) != nil {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = typeconv.ToSliceEnum[byte](m.ActivityType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.CyclesToDistance != nil {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.CyclesToDistance
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.CyclesToCalories != nil {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.CyclesToCalories
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.RestingMetabolicRate != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.RestingMetabolicRate
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of MonitoringInfo's valid fields.
func (m *MonitoringInfo) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.LocalTimestamp) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToSliceEnum[byte](m.ActivityType) != nil {
		size++
	}
	if m.CyclesToDistance != nil {
		size++
	}
	if m.CyclesToCalories != nil {
		size++
	}
	if m.RestingMetabolicRate != basetype.Uint16Invalid {
		size++
	}
	return size
}
