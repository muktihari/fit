// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/kit/scaleoffset"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"math"
)

// SegmentLeaderboardEntry is a SegmentLeaderboardEntry message.
type SegmentLeaderboardEntry struct {
	Name             string // Friendly name assigned to leader
	ActivityIdString string // String version of the activity_id. 21 characters long, express in decimal
	GroupPrimaryKey  uint32 // Primary user ID of this leader
	ActivityId       uint32 // ID of the activity associated with this leader time
	SegmentTime      uint32 // Scale: 1000; Units: s; Segment Time (includes pauses)
	MessageIndex     typedef.MessageIndex
	Type             typedef.SegmentLeaderboardType // Leader classification

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSegmentLeaderboardEntry creates new SegmentLeaderboardEntry struct based on given mesg.
// If mesg is nil, it will return SegmentLeaderboardEntry with all fields being set to its corresponding invalid value.
func NewSegmentLeaderboardEntry(mesg *proto.Message) *SegmentLeaderboardEntry {
	vals := [255]proto.Value{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &SegmentLeaderboardEntry{
		Name:             vals[0].String(),
		ActivityIdString: vals[5].String(),
		GroupPrimaryKey:  vals[2].Uint32(),
		ActivityId:       vals[3].Uint32(),
		SegmentTime:      vals[4].Uint32(),
		MessageIndex:     typedef.MessageIndex(vals[254].Uint16()),
		Type:             typedef.SegmentLeaderboardType(vals[1].Uint8()),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts SegmentLeaderboardEntry into proto.Message. If options is nil, default options will be used.
func (m *SegmentLeaderboardEntry) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	arr := pool.Get().(*[256]proto.Field)
	defer pool.Put(arr)

	fields := arr[:0] // Create slice from array with zero len.
	mesg := proto.Message{Num: typedef.MesgNumSegmentLeaderboardEntry}

	if m.Name != basetype.StringInvalid && m.Name != "" {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = proto.String(m.Name)
		fields = append(fields, field)
	}
	if m.ActivityIdString != basetype.StringInvalid && m.ActivityIdString != "" {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = proto.String(m.ActivityIdString)
		fields = append(fields, field)
	}
	if m.GroupPrimaryKey != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = proto.Uint32(m.GroupPrimaryKey)
		fields = append(fields, field)
	}
	if m.ActivityId != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = proto.Uint32(m.ActivityId)
		fields = append(fields, field)
	}
	if m.SegmentTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = proto.Uint32(m.SegmentTime)
		fields = append(fields, field)
	}
	if uint16(m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = proto.Uint16(uint16(m.MessageIndex))
		fields = append(fields, field)
	}
	if byte(m.Type) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = proto.Uint8(byte(m.Type))
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// SegmentTimeScaled return SegmentTime in its scaled value [Scale: 1000; Units: s; Segment Time (includes pauses)].
//
// If SegmentTime value is invalid, float64 invalid value will be returned.
func (m *SegmentLeaderboardEntry) SegmentTimeScaled() float64 {
	if m.SegmentTime == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return scaleoffset.Apply(m.SegmentTime, 1000, 0)
}

// SetName sets SegmentLeaderboardEntry value.
//
// Friendly name assigned to leader
func (m *SegmentLeaderboardEntry) SetName(v string) *SegmentLeaderboardEntry {
	m.Name = v
	return m
}

// SetActivityIdString sets SegmentLeaderboardEntry value.
//
// String version of the activity_id. 21 characters long, express in decimal
func (m *SegmentLeaderboardEntry) SetActivityIdString(v string) *SegmentLeaderboardEntry {
	m.ActivityIdString = v
	return m
}

// SetGroupPrimaryKey sets SegmentLeaderboardEntry value.
//
// Primary user ID of this leader
func (m *SegmentLeaderboardEntry) SetGroupPrimaryKey(v uint32) *SegmentLeaderboardEntry {
	m.GroupPrimaryKey = v
	return m
}

// SetActivityId sets SegmentLeaderboardEntry value.
//
// ID of the activity associated with this leader time
func (m *SegmentLeaderboardEntry) SetActivityId(v uint32) *SegmentLeaderboardEntry {
	m.ActivityId = v
	return m
}

// SetSegmentTime sets SegmentLeaderboardEntry value.
//
// Scale: 1000; Units: s; Segment Time (includes pauses)
func (m *SegmentLeaderboardEntry) SetSegmentTime(v uint32) *SegmentLeaderboardEntry {
	m.SegmentTime = v
	return m
}

// SetMessageIndex sets SegmentLeaderboardEntry value.
func (m *SegmentLeaderboardEntry) SetMessageIndex(v typedef.MessageIndex) *SegmentLeaderboardEntry {
	m.MessageIndex = v
	return m
}

// SetType sets SegmentLeaderboardEntry value.
//
// Leader classification
func (m *SegmentLeaderboardEntry) SetType(v typedef.SegmentLeaderboardType) *SegmentLeaderboardEntry {
	m.Type = v
	return m
}

// SetDeveloperFields SegmentLeaderboardEntry's DeveloperFields.
func (m *SegmentLeaderboardEntry) SetDeveloperFields(developerFields ...proto.DeveloperField) *SegmentLeaderboardEntry {
	m.DeveloperFields = developerFields
	return m
}
