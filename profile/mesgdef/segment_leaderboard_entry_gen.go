// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// SegmentLeaderboardEntry is a SegmentLeaderboardEntry message.
type SegmentLeaderboardEntry struct {
	MessageIndex     typedef.MessageIndex
	Name             string                         // Friendly name assigned to leader
	Type             typedef.SegmentLeaderboardType // Leader classification
	GroupPrimaryKey  uint32                         // Primary user ID of this leader
	ActivityId       uint32                         // ID of the activity associated with this leader time
	SegmentTime      uint32                         // Scale: 1000; Units: s; Segment Time (includes pauses)
	ActivityIdString string                         // String version of the activity_id. 21 characters long, express in decimal

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSegmentLeaderboardEntry creates new SegmentLeaderboardEntry struct based on given mesg. If mesg is nil or mesg.Num is not equal to SegmentLeaderboardEntry mesg number, it will return nil.
func NewSegmentLeaderboardEntry(mesg proto.Message) *SegmentLeaderboardEntry {
	if mesg.Num != typedef.MesgNumSegmentLeaderboardEntry {
		return nil
	}

	vals := [255]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &SegmentLeaderboardEntry{
		MessageIndex:     typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		Name:             typeconv.ToString[string](vals[0]),
		Type:             typeconv.ToEnum[typedef.SegmentLeaderboardType](vals[1]),
		GroupPrimaryKey:  typeconv.ToUint32[uint32](vals[2]),
		ActivityId:       typeconv.ToUint32[uint32](vals[3]),
		SegmentTime:      typeconv.ToUint32[uint32](vals[4]),
		ActivityIdString: typeconv.ToString[string](vals[5]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts SegmentLeaderboardEntry into proto.Message.
func (m *SegmentLeaderboardEntry) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumSegmentLeaderboardEntry)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = typeconv.ToUint16[uint16](m.MessageIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.Name
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Type) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = typeconv.ToEnum[byte](m.Type)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.GroupPrimaryKey != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.GroupPrimaryKey
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ActivityId != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.ActivityId
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.SegmentTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.SegmentTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ActivityIdString != basetype.StringInvalid && m.ActivityIdString != "" {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.ActivityIdString
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of SegmentLeaderboardEntry's valid fields.
func (m *SegmentLeaderboardEntry) size() byte {
	var size byte
	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		size++
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		size++
	}
	if typeconv.ToEnum[byte](m.Type) != basetype.EnumInvalid {
		size++
	}
	if m.GroupPrimaryKey != basetype.Uint32Invalid {
		size++
	}
	if m.ActivityId != basetype.Uint32Invalid {
		size++
	}
	if m.SegmentTime != basetype.Uint32Invalid {
		size++
	}
	if m.ActivityIdString != basetype.StringInvalid && m.ActivityIdString != "" {
		size++
	}
	return size
}
