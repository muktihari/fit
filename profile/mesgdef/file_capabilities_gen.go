// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// FileCapabilities is a FileCapabilities message.
type FileCapabilities struct {
	Directory    string
	MaxSize      uint32 // Units: bytes
	MessageIndex typedef.MessageIndex
	MaxCount     uint16
	Type         typedef.File
	Flags        typedef.FileFlags

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewFileCapabilities creates new FileCapabilities struct based on given mesg.
// If mesg is nil, it will return FileCapabilities with all fields being set to its corresponding invalid value.
func NewFileCapabilities(mesg *proto.Message) *FileCapabilities {
	vals := [255]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &FileCapabilities{
		Directory:    typeconv.ToString[string](vals[2]),
		MaxSize:      typeconv.ToUint32[uint32](vals[4]),
		MessageIndex: typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		MaxCount:     typeconv.ToUint16[uint16](vals[3]),
		Type:         typeconv.ToEnum[typedef.File](vals[0]),
		Flags:        typeconv.ToUint8z[typedef.FileFlags](vals[1]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts FileCapabilities into proto.Message.
func (m *FileCapabilities) ToMesg(fac Factory) proto.Message {
	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := fac.CreateMesgOnly(typedef.MesgNumFileCapabilities)

	if m.Directory != basetype.StringInvalid && m.Directory != "" {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.Directory
		fields = append(fields, field)
	}
	if m.MaxSize != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.MaxSize
		fields = append(fields, field)
	}
	if uint16(m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = uint16(m.MessageIndex)
		fields = append(fields, field)
	}
	if m.MaxCount != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.MaxCount
		fields = append(fields, field)
	}
	if byte(m.Type) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = byte(m.Type)
		fields = append(fields, field)
	}
	if uint8(m.Flags) != basetype.Uint8zInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = uint8(m.Flags)
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// SetDirectory sets FileCapabilities value.
func (m *FileCapabilities) SetDirectory(v string) *FileCapabilities {
	m.Directory = v
	return m
}

// SetMaxSize sets FileCapabilities value.
//
// Units: bytes
func (m *FileCapabilities) SetMaxSize(v uint32) *FileCapabilities {
	m.MaxSize = v
	return m
}

// SetMessageIndex sets FileCapabilities value.
func (m *FileCapabilities) SetMessageIndex(v typedef.MessageIndex) *FileCapabilities {
	m.MessageIndex = v
	return m
}

// SetMaxCount sets FileCapabilities value.
func (m *FileCapabilities) SetMaxCount(v uint16) *FileCapabilities {
	m.MaxCount = v
	return m
}

// SetType sets FileCapabilities value.
func (m *FileCapabilities) SetType(v typedef.File) *FileCapabilities {
	m.Type = v
	return m
}

// SetFlags sets FileCapabilities value.
func (m *FileCapabilities) SetFlags(v typedef.FileFlags) *FileCapabilities {
	m.Flags = v
	return m
}

// SetDeveloperFields FileCapabilities's DeveloperFields.
func (m *FileCapabilities) SetDeveloperFields(developerFields ...proto.DeveloperField) *FileCapabilities {
	m.DeveloperFields = developerFields
	return m
}
