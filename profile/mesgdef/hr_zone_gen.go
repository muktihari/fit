// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// HrZone is a HrZone message.
type HrZone struct {
	MessageIndex typedef.MessageIndex
	HighBpm      uint8 // Units: bpm;
	Name         string

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewHrZone creates new HrZone struct based on given mesg.
// If mesg is nil, it will return HrZone with all fields being set to its corresponding invalid value.
func NewHrZone(mesg *proto.Message) *HrZone {
	vals := [255]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &HrZone{
		MessageIndex: typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		HighBpm:      typeconv.ToUint8[uint8](vals[1]),
		Name:         typeconv.ToString[string](vals[2]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts HrZone into proto.Message.
func (m *HrZone) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumHrZone)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = typeconv.ToUint16[uint16](m.MessageIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.HighBpm != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.HighBpm
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.Name
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of HrZone's valid fields.
func (m *HrZone) size() byte {
	var size byte
	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		size++
	}
	if m.HighBpm != basetype.Uint8Invalid {
		size++
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		size++
	}
	return size
}

// SetMessageIndex sets HrZone value.
func (m *HrZone) SetMessageIndex(v typedef.MessageIndex) *HrZone {
	m.MessageIndex = v
	return m
}

// SetHighBpm sets HrZone value.
//
// Units: bpm;
func (m *HrZone) SetHighBpm(v uint8) *HrZone {
	m.HighBpm = v
	return m
}

// SetName sets HrZone value.
func (m *HrZone) SetName(v string) *HrZone {
	m.Name = v
	return m
}

// SetDeveloperFields HrZone's DeveloperFields.
func (m *HrZone) SetDeveloperFields(developerFields ...proto.DeveloperField) *HrZone {
	m.DeveloperFields = developerFields
	return m
}
