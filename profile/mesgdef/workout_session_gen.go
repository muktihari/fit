// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"math"
)

// WorkoutSession is a WorkoutSession message.
//
// Note: The order of the fields is optimized using a memory alignment algorithm.
// Do not rely on field indices, such as when using reflection.
type WorkoutSession struct {
	MessageIndex   typedef.MessageIndex
	NumValidSteps  uint16
	FirstStepIndex uint16
	PoolLength     uint16 // Scale: 100; Units: m
	Sport          typedef.Sport
	SubSport       typedef.SubSport
	PoolLengthUnit typedef.DisplayMeasure

	UnknownFields   []proto.Field          // UnknownFields are fields that are exist but they are not defined in Profile.xlsx
	DeveloperFields []proto.DeveloperField // DeveloperFields are custom data fields [Added since protocol version 2.0]
}

// NewWorkoutSession creates new WorkoutSession struct based on given mesg.
// If mesg is nil, it will return WorkoutSession with all fields being set to its corresponding invalid value.
func NewWorkoutSession(mesg *proto.Message) *WorkoutSession {
	vals := [255]proto.Value{}

	var unknownFields []proto.Field
	var developerFields []proto.DeveloperField
	if mesg != nil {
		arr := pool.Get().(*[poolsize]proto.Field)
		unknownFields = arr[:0]
		for i := range mesg.Fields {
			if mesg.Fields[i].Num > 254 || mesg.Fields[i].Name == factory.NameUnknown {
				unknownFields = append(unknownFields, mesg.Fields[i])
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		if len(unknownFields) == 0 {
			unknownFields = nil
		}
		unknownFields = append(unknownFields[:0:0], unknownFields...)
		pool.Put(arr)
		developerFields = mesg.DeveloperFields
	}

	return &WorkoutSession{
		MessageIndex:   typedef.MessageIndex(vals[254].Uint16()),
		Sport:          typedef.Sport(vals[0].Uint8()),
		SubSport:       typedef.SubSport(vals[1].Uint8()),
		NumValidSteps:  vals[2].Uint16(),
		FirstStepIndex: vals[3].Uint16(),
		PoolLength:     vals[4].Uint16(),
		PoolLengthUnit: typedef.DisplayMeasure(vals[5].Uint8()),

		UnknownFields:   unknownFields,
		DeveloperFields: developerFields,
	}
}

// ToMesg converts WorkoutSession into proto.Message. If options is nil, default options will be used.
func (m *WorkoutSession) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	arr := pool.Get().(*[poolsize]proto.Field)
	fields := arr[:0]

	mesg := proto.Message{Num: typedef.MesgNumWorkoutSession}

	if m.MessageIndex != typedef.MessageIndexInvalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = proto.Uint16(uint16(m.MessageIndex))
		fields = append(fields, field)
	}
	if m.Sport != typedef.SportInvalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = proto.Uint8(byte(m.Sport))
		fields = append(fields, field)
	}
	if m.SubSport != typedef.SubSportInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = proto.Uint8(byte(m.SubSport))
		fields = append(fields, field)
	}
	if m.NumValidSteps != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = proto.Uint16(m.NumValidSteps)
		fields = append(fields, field)
	}
	if m.FirstStepIndex != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = proto.Uint16(m.FirstStepIndex)
		fields = append(fields, field)
	}
	if m.PoolLength != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = proto.Uint16(m.PoolLength)
		fields = append(fields, field)
	}
	if m.PoolLengthUnit != typedef.DisplayMeasureInvalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = proto.Uint8(byte(m.PoolLengthUnit))
		fields = append(fields, field)
	}

	for i := range m.UnknownFields {
		fields = append(fields, m.UnknownFields[i])
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)
	pool.Put(arr)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// PoolLengthScaled return PoolLength in its scaled value.
// If PoolLength value is invalid, float64 invalid value will be returned.
//
// Scale: 100; Units: m
func (m *WorkoutSession) PoolLengthScaled() float64 {
	if m.PoolLength == basetype.Uint16Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return float64(m.PoolLength)/100 - 0
}

// SetMessageIndex sets MessageIndex value.
func (m *WorkoutSession) SetMessageIndex(v typedef.MessageIndex) *WorkoutSession {
	m.MessageIndex = v
	return m
}

// SetSport sets Sport value.
func (m *WorkoutSession) SetSport(v typedef.Sport) *WorkoutSession {
	m.Sport = v
	return m
}

// SetSubSport sets SubSport value.
func (m *WorkoutSession) SetSubSport(v typedef.SubSport) *WorkoutSession {
	m.SubSport = v
	return m
}

// SetNumValidSteps sets NumValidSteps value.
func (m *WorkoutSession) SetNumValidSteps(v uint16) *WorkoutSession {
	m.NumValidSteps = v
	return m
}

// SetFirstStepIndex sets FirstStepIndex value.
func (m *WorkoutSession) SetFirstStepIndex(v uint16) *WorkoutSession {
	m.FirstStepIndex = v
	return m
}

// SetPoolLength sets PoolLength value.
//
// Scale: 100; Units: m
func (m *WorkoutSession) SetPoolLength(v uint16) *WorkoutSession {
	m.PoolLength = v
	return m
}

// SetPoolLengthScaled is similar to SetPoolLength except it accepts a scaled value.
// This method automatically converts the given value to its uint16 form, discarding any applied scale and offset.
//
// Scale: 100; Units: m
func (m *WorkoutSession) SetPoolLengthScaled(v float64) *WorkoutSession {
	unscaled := (v + 0) * 100
	if math.IsNaN(unscaled) || math.IsInf(unscaled, 0) || unscaled > float64(basetype.Uint16Invalid) {
		m.PoolLength = uint16(basetype.Uint16Invalid)
		return m
	}
	m.PoolLength = uint16(unscaled)
	return m
}

// SetPoolLengthUnit sets PoolLengthUnit value.
func (m *WorkoutSession) SetPoolLengthUnit(v typedef.DisplayMeasure) *WorkoutSession {
	m.PoolLengthUnit = v
	return m
}

// SetDeveloperFields WorkoutSession's UnknownFields (fields that are exist but they are not defined in Profile.xlsx)
func (m *WorkoutSession) SetUnknownFields(unknownFields ...proto.Field) *WorkoutSession {
	m.UnknownFields = unknownFields
	return m
}

// SetDeveloperFields WorkoutSession's DeveloperFields.
func (m *WorkoutSession) SetDeveloperFields(developerFields ...proto.DeveloperField) *WorkoutSession {
	m.DeveloperFields = developerFields
	return m
}
