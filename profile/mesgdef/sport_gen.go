// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Sport is a Sport message.
type Sport struct {
	Sport    typedef.Sport
	SubSport typedef.SubSport
	Name     string

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSport creates new Sport struct based on given mesg. If mesg is nil or mesg.Num is not equal to Sport mesg number, it will return nil.
func NewSport(mesg proto.Message) *Sport {
	if mesg.Num != typedef.MesgNumSport {
		return nil
	}

	vals := [4]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Sport{
		Sport:    typeconv.ToEnum[typedef.Sport](vals[0]),
		SubSport: typeconv.ToEnum[typedef.SubSport](vals[1]),
		Name:     typeconv.ToString[string](vals[3]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts Sport into proto.Message.
func (m *Sport) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumSport)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToEnum[byte](m.Sport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = typeconv.ToEnum[byte](m.Sport)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.SubSport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = typeconv.ToEnum[byte](m.SubSport)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.Name
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of Sport's valid fields.
func (m *Sport) size() byte {
	var size byte
	if typeconv.ToEnum[byte](m.Sport) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.SubSport) != basetype.EnumInvalid {
		size++
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		size++
	}
	return size
}
