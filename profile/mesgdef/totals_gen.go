// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// Totals is a Totals message.
type Totals struct {
	Timestamp    time.Time // Units: s
	TimerTime    uint32    // Units: s; Excludes pauses
	Distance     uint32    // Units: m
	Calories     uint32    // Units: kcal
	ElapsedTime  uint32    // Units: s; Includes pauses
	ActiveTime   uint32    // Units: s
	MessageIndex typedef.MessageIndex
	Sessions     uint16
	Sport        typedef.Sport
	SportIndex   uint8

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewTotals creates new Totals struct based on given mesg.
// If mesg is nil, it will return Totals with all fields being set to its corresponding invalid value.
func NewTotals(mesg *proto.Message) *Totals {
	vals := [255]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &Totals{
		Timestamp:    datetime.ToTime(vals[253]),
		TimerTime:    typeconv.ToUint32[uint32](vals[0]),
		Distance:     typeconv.ToUint32[uint32](vals[1]),
		Calories:     typeconv.ToUint32[uint32](vals[2]),
		ElapsedTime:  typeconv.ToUint32[uint32](vals[4]),
		ActiveTime:   typeconv.ToUint32[uint32](vals[6]),
		MessageIndex: typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		Sessions:     typeconv.ToUint16[uint16](vals[5]),
		Sport:        typeconv.ToEnum[typedef.Sport](vals[3]),
		SportIndex:   typeconv.ToUint8[uint8](vals[9]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts Totals into proto.Message.
func (m *Totals) ToMesg(fac Factory) proto.Message {
	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := fac.CreateMesgOnly(typedef.MesgNumTotals)

	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = datetime.ToUint32(m.Timestamp)
		fields = append(fields, field)
	}
	if m.TimerTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.TimerTime
		fields = append(fields, field)
	}
	if m.Distance != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.Distance
		fields = append(fields, field)
	}
	if m.Calories != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.Calories
		fields = append(fields, field)
	}
	if m.ElapsedTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.ElapsedTime
		fields = append(fields, field)
	}
	if m.ActiveTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.ActiveTime
		fields = append(fields, field)
	}
	if uint16(m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = uint16(m.MessageIndex)
		fields = append(fields, field)
	}
	if m.Sessions != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.Sessions
		fields = append(fields, field)
	}
	if byte(m.Sport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = byte(m.Sport)
		fields = append(fields, field)
	}
	if m.SportIndex != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = m.SportIndex
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// SetTimestamp sets Totals value.
//
// Units: s
func (m *Totals) SetTimestamp(v time.Time) *Totals {
	m.Timestamp = v
	return m
}

// SetTimerTime sets Totals value.
//
// Units: s; Excludes pauses
func (m *Totals) SetTimerTime(v uint32) *Totals {
	m.TimerTime = v
	return m
}

// SetDistance sets Totals value.
//
// Units: m
func (m *Totals) SetDistance(v uint32) *Totals {
	m.Distance = v
	return m
}

// SetCalories sets Totals value.
//
// Units: kcal
func (m *Totals) SetCalories(v uint32) *Totals {
	m.Calories = v
	return m
}

// SetElapsedTime sets Totals value.
//
// Units: s; Includes pauses
func (m *Totals) SetElapsedTime(v uint32) *Totals {
	m.ElapsedTime = v
	return m
}

// SetActiveTime sets Totals value.
//
// Units: s
func (m *Totals) SetActiveTime(v uint32) *Totals {
	m.ActiveTime = v
	return m
}

// SetMessageIndex sets Totals value.
func (m *Totals) SetMessageIndex(v typedef.MessageIndex) *Totals {
	m.MessageIndex = v
	return m
}

// SetSessions sets Totals value.
func (m *Totals) SetSessions(v uint16) *Totals {
	m.Sessions = v
	return m
}

// SetSport sets Totals value.
func (m *Totals) SetSport(v typedef.Sport) *Totals {
	m.Sport = v
	return m
}

// SetSportIndex sets Totals value.
func (m *Totals) SetSportIndex(v uint8) *Totals {
	m.SportIndex = v
	return m
}

// SetDeveloperFields Totals's DeveloperFields.
func (m *Totals) SetDeveloperFields(developerFields ...proto.DeveloperField) *Totals {
	m.DeveloperFields = developerFields
	return m
}
