// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Totals is a Totals message.
type Totals struct {
	MessageIndex typedef.MessageIndex
	Timestamp    typedef.DateTime // Units: s;
	TimerTime    uint32           // Units: s; Excludes pauses
	Distance     uint32           // Units: m;
	Calories     uint32           // Units: kcal;
	Sport        typedef.Sport
	ElapsedTime  uint32 // Units: s; Includes pauses
	Sessions     uint16
	ActiveTime   uint32 // Units: s;
	SportIndex   uint8

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewTotals creates new Totals struct based on given mesg. If mesg is nil or mesg.Num is not equal to Totals mesg number, it will return nil.
func NewTotals(mesg proto.Message) *Totals {
	if mesg.Num != typedef.MesgNumTotals {
		return nil
	}

	vals := [255]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Totals{
		MessageIndex: typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		Timestamp:    typeconv.ToUint32[typedef.DateTime](vals[253]),
		TimerTime:    typeconv.ToUint32[uint32](vals[0]),
		Distance:     typeconv.ToUint32[uint32](vals[1]),
		Calories:     typeconv.ToUint32[uint32](vals[2]),
		Sport:        typeconv.ToEnum[typedef.Sport](vals[3]),
		ElapsedTime:  typeconv.ToUint32[uint32](vals[4]),
		Sessions:     typeconv.ToUint16[uint16](vals[5]),
		ActiveTime:   typeconv.ToUint32[uint32](vals[6]),
		SportIndex:   typeconv.ToUint8[uint8](vals[9]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts Totals into proto.Message.
func (m *Totals) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumTotals)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = typeconv.ToUint16[uint16](m.MessageIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimerTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.TimerTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Distance != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.Distance
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Calories != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.Calories
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Sport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = typeconv.ToEnum[byte](m.Sport)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ElapsedTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.ElapsedTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Sessions != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.Sessions
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ActiveTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.ActiveTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.SportIndex != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = m.SportIndex
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of Totals's valid fields.
func (m *Totals) size() byte {
	var size byte
	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.TimerTime != basetype.Uint32Invalid {
		size++
	}
	if m.Distance != basetype.Uint32Invalid {
		size++
	}
	if m.Calories != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Sport) != basetype.EnumInvalid {
		size++
	}
	if m.ElapsedTime != basetype.Uint32Invalid {
		size++
	}
	if m.Sessions != basetype.Uint16Invalid {
		size++
	}
	if m.ActiveTime != basetype.Uint32Invalid {
		size++
	}
	if m.SportIndex != basetype.Uint8Invalid {
		size++
	}
	return size
}
