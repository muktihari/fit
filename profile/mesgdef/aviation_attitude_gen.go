// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// AviationAttitude is a AviationAttitude message.
type AviationAttitude struct {
	Timestamp             typedef.DateTime           // Units: s; Timestamp message was output
	TimestampMs           uint16                     // Units: ms; Fractional part of timestamp, added to timestamp
	SystemTime            []uint32                   // Array: [N]; Units: ms; System time associated with sample expressed in ms.
	Pitch                 []int16                    // Scale: 10430.38; Array: [N]; Units: radians; Range -PI/2 to +PI/2
	Roll                  []int16                    // Scale: 10430.38; Array: [N]; Units: radians; Range -PI to +PI
	AccelLateral          []int16                    // Scale: 100; Array: [N]; Units: m/s^2; Range -78.4 to +78.4 (-8 Gs to 8 Gs)
	AccelNormal           []int16                    // Scale: 100; Array: [N]; Units: m/s^2; Range -78.4 to +78.4 (-8 Gs to 8 Gs)
	TurnRate              []int16                    // Scale: 1024; Array: [N]; Units: radians/second; Range -8.727 to +8.727 (-500 degs/sec to +500 degs/sec)
	Stage                 []typedef.AttitudeStage    // Array: [N];
	AttitudeStageComplete []uint8                    // Array: [N]; Units: %; The percent complete of the current attitude stage. Set to 0 for attitude stages 0, 1 and 2 and to 100 for attitude stage 3 by AHRS modules that do not support it. Range - 100
	Track                 []uint16                   // Scale: 10430.38; Array: [N]; Units: radians; Track Angle/Heading Range 0 - 2pi
	Validity              []typedef.AttitudeValidity // Array: [N];

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewAviationAttitude creates new AviationAttitude struct based on given mesg. If mesg is nil or mesg.Num is not equal to AviationAttitude mesg number, it will return nil.
func NewAviationAttitude(mesg proto.Message) *AviationAttitude {
	if mesg.Num != typedef.MesgNumAviationAttitude {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &AviationAttitude{
		Timestamp:             typeconv.ToUint32[typedef.DateTime](vals[253]),
		TimestampMs:           typeconv.ToUint16[uint16](vals[0]),
		SystemTime:            typeconv.ToSliceUint32[uint32](vals[1]),
		Pitch:                 typeconv.ToSliceSint16[int16](vals[2]),
		Roll:                  typeconv.ToSliceSint16[int16](vals[3]),
		AccelLateral:          typeconv.ToSliceSint16[int16](vals[4]),
		AccelNormal:           typeconv.ToSliceSint16[int16](vals[5]),
		TurnRate:              typeconv.ToSliceSint16[int16](vals[6]),
		Stage:                 typeconv.ToSliceEnum[typedef.AttitudeStage](vals[7]),
		AttitudeStageComplete: typeconv.ToSliceUint8[uint8](vals[8]),
		Track:                 typeconv.ToSliceUint16[uint16](vals[9]),
		Validity:              typeconv.ToSliceUint16[typedef.AttitudeValidity](vals[10]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts AviationAttitude into proto.Message.
func (m *AviationAttitude) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumAviationAttitude)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.TimestampMs
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.SystemTime != nil {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.SystemTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Pitch != nil {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.Pitch
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Roll != nil {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.Roll
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AccelLateral != nil {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.AccelLateral
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AccelNormal != nil {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.AccelNormal
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TurnRate != nil {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.TurnRate
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToSliceEnum[byte](m.Stage) != nil {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = typeconv.ToSliceEnum[byte](m.Stage)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AttitudeStageComplete != nil {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = m.AttitudeStageComplete
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Track != nil {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = m.Track
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToSliceUint16[uint16](m.Validity) != nil {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = typeconv.ToSliceUint16[uint16](m.Validity)
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of AviationAttitude's valid fields.
func (m *AviationAttitude) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		size++
	}
	if m.SystemTime != nil {
		size++
	}
	if m.Pitch != nil {
		size++
	}
	if m.Roll != nil {
		size++
	}
	if m.AccelLateral != nil {
		size++
	}
	if m.AccelNormal != nil {
		size++
	}
	if m.TurnRate != nil {
		size++
	}
	if typeconv.ToSliceEnum[byte](m.Stage) != nil {
		size++
	}
	if m.AttitudeStageComplete != nil {
		size++
	}
	if m.Track != nil {
		size++
	}
	if typeconv.ToSliceUint16[uint16](m.Validity) != nil {
		size++
	}
	return size
}
