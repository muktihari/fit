// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.133

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// MonitoringHrData is a MonitoringHrData message.
type MonitoringHrData struct {
	Timestamp                  time.Time // Units: s; Must align to logging interval, for example, time must be 00:00:00 for daily log.
	RestingHeartRate           uint8     // Units: bpm; 7-day rolling average
	CurrentDayRestingHeartRate uint8     // Units: bpm; RHR for today only. (Feeds into 7-day average)

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewMonitoringHrData creates new MonitoringHrData struct based on given mesg.
// If mesg is nil, it will return MonitoringHrData with all fields being set to its corresponding invalid value.
func NewMonitoringHrData(mesg *proto.Message) *MonitoringHrData {
	vals := [254]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &MonitoringHrData{
		Timestamp:                  datetime.ToTime(vals[253]),
		RestingHeartRate:           typeconv.ToUint8[uint8](vals[0]),
		CurrentDayRestingHeartRate: typeconv.ToUint8[uint8](vals[1]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts MonitoringHrData into proto.Message.
func (m *MonitoringHrData) ToMesg(fac Factory) proto.Message {
	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := fac.CreateMesgOnly(typedef.MesgNumMonitoringHrData)

	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = datetime.ToUint32(m.Timestamp)
		fields = append(fields, field)
	}
	if m.RestingHeartRate != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.RestingHeartRate
		fields = append(fields, field)
	}
	if m.CurrentDayRestingHeartRate != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.CurrentDayRestingHeartRate
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// SetTimestamp sets MonitoringHrData value.
//
// Units: s; Must align to logging interval, for example, time must be 00:00:00 for daily log.
func (m *MonitoringHrData) SetTimestamp(v time.Time) *MonitoringHrData {
	m.Timestamp = v
	return m
}

// SetRestingHeartRate sets MonitoringHrData value.
//
// Units: bpm; 7-day rolling average
func (m *MonitoringHrData) SetRestingHeartRate(v uint8) *MonitoringHrData {
	m.RestingHeartRate = v
	return m
}

// SetCurrentDayRestingHeartRate sets MonitoringHrData value.
//
// Units: bpm; RHR for today only. (Feeds into 7-day average)
func (m *MonitoringHrData) SetCurrentDayRestingHeartRate(v uint8) *MonitoringHrData {
	m.CurrentDayRestingHeartRate = v
	return m
}

// SetDeveloperFields MonitoringHrData's DeveloperFields.
func (m *MonitoringHrData) SetDeveloperFields(developerFields ...proto.DeveloperField) *MonitoringHrData {
	m.DeveloperFields = developerFields
	return m
}
