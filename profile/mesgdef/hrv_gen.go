// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Hrv is a Hrv message.
type Hrv struct {
	Time []uint16 // Array: [N]; Scale: 1000; Units: s; Time between beats

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewHrv creates new Hrv struct based on given mesg.
// If mesg is nil, it will return Hrv with all fields being set to its corresponding invalid value.
func NewHrv(mesg *proto.Message) *Hrv {
	vals := [1]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &Hrv{
		Time: typeconv.ToSliceUint16[uint16](vals[0]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts Hrv into proto.Message.
func (m *Hrv) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumHrv)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if m.Time != nil {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.Time
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of Hrv's valid fields.
func (m *Hrv) size() byte {
	var size byte
	if m.Time != nil {
		size++
	}
	return size
}

// SetTime sets Hrv value.
//
// Array: [N]; Scale: 1000; Units: s; Time between beats
func (m *Hrv) SetTime(v []uint16) *Hrv {
	m.Time = v
	return m
}

// SetDeveloperFields Hrv's DeveloperFields.
func (m *Hrv) SetDeveloperFields(developerFields ...proto.DeveloperField) *Hrv {
	m.DeveloperFields = developerFields
	return m
}
