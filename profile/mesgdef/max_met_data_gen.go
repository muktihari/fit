// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/kit/scaleoffset"
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// MaxMetData is a MaxMetData message.
type MaxMetData struct {
	UpdateTime     time.Time // Time maxMET and vo2 were calculated
	Vo2Max         uint16    // Scale: 10; Units: mL/kg/min
	Sport          typedef.Sport
	SubSport       typedef.SubSport
	MaxMetCategory typedef.MaxMetCategory
	HrSource       typedef.MaxMetHeartRateSource // Indicates if the estimate was obtained using a chest strap or wrist heart rate
	SpeedSource    typedef.MaxMetSpeedSource     // Indidcates if the estimate was obtained using onboard GPS or connected GPS
	CalibratedData bool                          // Indicates if calibrated data was used in the calculation

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewMaxMetData creates new MaxMetData struct based on given mesg.
// If mesg is nil, it will return MaxMetData with all fields being set to its corresponding invalid value.
func NewMaxMetData(mesg *proto.Message) *MaxMetData {
	vals := [14]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &MaxMetData{
		UpdateTime:     datetime.ToTime(vals[0]),
		Vo2Max:         typeconv.ToUint16[uint16](vals[2]),
		Sport:          typeconv.ToEnum[typedef.Sport](vals[5]),
		SubSport:       typeconv.ToEnum[typedef.SubSport](vals[6]),
		MaxMetCategory: typeconv.ToEnum[typedef.MaxMetCategory](vals[8]),
		HrSource:       typeconv.ToEnum[typedef.MaxMetHeartRateSource](vals[12]),
		SpeedSource:    typeconv.ToEnum[typedef.MaxMetSpeedSource](vals[13]),
		CalibratedData: typeconv.ToBool[bool](vals[9]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts MaxMetData into proto.Message.
func (m *MaxMetData) ToMesg(fac Factory) proto.Message {
	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := fac.CreateMesgOnly(typedef.MesgNumMaxMetData)

	if datetime.ToUint32(m.UpdateTime) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = datetime.ToUint32(m.UpdateTime)
		fields = append(fields, field)
	}
	if m.Vo2Max != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.Vo2Max
		fields = append(fields, field)
	}
	if byte(m.Sport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = byte(m.Sport)
		fields = append(fields, field)
	}
	if byte(m.SubSport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = byte(m.SubSport)
		fields = append(fields, field)
	}
	if byte(m.MaxMetCategory) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = byte(m.MaxMetCategory)
		fields = append(fields, field)
	}
	if byte(m.HrSource) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 12)
		field.Value = byte(m.HrSource)
		fields = append(fields, field)
	}
	if byte(m.SpeedSource) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 13)
		field.Value = byte(m.SpeedSource)
		fields = append(fields, field)
	}
	if m.CalibratedData != false {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = m.CalibratedData
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// Vo2MaxScaled return Vo2Max in its scaled value [Scale: 10; Units: mL/kg/min].
//
// If Vo2Max value is invalid, float64 invalid value will be returned.
func (m *MaxMetData) Vo2MaxScaled() float64 {
	if m.Vo2Max == basetype.Uint16Invalid {
		return basetype.Float64InvalidInFloatForm()
	}
	return scaleoffset.Apply(m.Vo2Max, 10, 0)
}

// SetUpdateTime sets MaxMetData value.
//
// Time maxMET and vo2 were calculated
func (m *MaxMetData) SetUpdateTime(v time.Time) *MaxMetData {
	m.UpdateTime = v
	return m
}

// SetVo2Max sets MaxMetData value.
//
// Scale: 10; Units: mL/kg/min
func (m *MaxMetData) SetVo2Max(v uint16) *MaxMetData {
	m.Vo2Max = v
	return m
}

// SetSport sets MaxMetData value.
func (m *MaxMetData) SetSport(v typedef.Sport) *MaxMetData {
	m.Sport = v
	return m
}

// SetSubSport sets MaxMetData value.
func (m *MaxMetData) SetSubSport(v typedef.SubSport) *MaxMetData {
	m.SubSport = v
	return m
}

// SetMaxMetCategory sets MaxMetData value.
func (m *MaxMetData) SetMaxMetCategory(v typedef.MaxMetCategory) *MaxMetData {
	m.MaxMetCategory = v
	return m
}

// SetHrSource sets MaxMetData value.
//
// Indicates if the estimate was obtained using a chest strap or wrist heart rate
func (m *MaxMetData) SetHrSource(v typedef.MaxMetHeartRateSource) *MaxMetData {
	m.HrSource = v
	return m
}

// SetSpeedSource sets MaxMetData value.
//
// Indidcates if the estimate was obtained using onboard GPS or connected GPS
func (m *MaxMetData) SetSpeedSource(v typedef.MaxMetSpeedSource) *MaxMetData {
	m.SpeedSource = v
	return m
}

// SetCalibratedData sets MaxMetData value.
//
// Indicates if calibrated data was used in the calculation
func (m *MaxMetData) SetCalibratedData(v bool) *MaxMetData {
	m.CalibratedData = v
	return m
}

// SetDeveloperFields MaxMetData's DeveloperFields.
func (m *MaxMetData) SetDeveloperFields(developerFields ...proto.DeveloperField) *MaxMetData {
	m.DeveloperFields = developerFields
	return m
}
