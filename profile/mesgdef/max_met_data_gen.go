// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// MaxMetData is a MaxMetData message.
type MaxMetData struct {
	UpdateTime     typedef.DateTime // Time maxMET and vo2 were calculated
	Vo2Max         uint16           // Scale: 10; Units: mL/kg/min;
	Sport          typedef.Sport
	SubSport       typedef.SubSport
	MaxMetCategory typedef.MaxMetCategory
	CalibratedData bool                          // Indicates if calibrated data was used in the calculation
	HrSource       typedef.MaxMetHeartRateSource // Indicates if the estimate was obtained using a chest strap or wrist heart rate
	SpeedSource    typedef.MaxMetSpeedSource     // Indidcates if the estimate was obtained using onboard GPS or connected GPS

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewMaxMetData creates new MaxMetData struct based on given mesg. If mesg is nil or mesg.Num is not equal to MaxMetData mesg number, it will return nil.
func NewMaxMetData(mesg proto.Message) *MaxMetData {
	if mesg.Num != typedef.MesgNumMaxMetData {
		return nil
	}

	vals := [14]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &MaxMetData{
		UpdateTime:     typeconv.ToUint32[typedef.DateTime](vals[0]),
		Vo2Max:         typeconv.ToUint16[uint16](vals[2]),
		Sport:          typeconv.ToEnum[typedef.Sport](vals[5]),
		SubSport:       typeconv.ToEnum[typedef.SubSport](vals[6]),
		MaxMetCategory: typeconv.ToEnum[typedef.MaxMetCategory](vals[8]),
		CalibratedData: typeconv.ToBool[bool](vals[9]),
		HrSource:       typeconv.ToEnum[typedef.MaxMetHeartRateSource](vals[12]),
		SpeedSource:    typeconv.ToEnum[typedef.MaxMetSpeedSource](vals[13]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts MaxMetData into proto.Message.
func (m *MaxMetData) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumMaxMetData)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.UpdateTime) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = typeconv.ToUint32[uint32](m.UpdateTime)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Vo2Max != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.Vo2Max
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Sport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = typeconv.ToEnum[byte](m.Sport)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.SubSport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = typeconv.ToEnum[byte](m.SubSport)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.MaxMetCategory) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = typeconv.ToEnum[byte](m.MaxMetCategory)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.CalibratedData != false {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = m.CalibratedData
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.HrSource) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 12)
		field.Value = typeconv.ToEnum[byte](m.HrSource)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.SpeedSource) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 13)
		field.Value = typeconv.ToEnum[byte](m.SpeedSource)
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of MaxMetData's valid fields.
func (m *MaxMetData) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.UpdateTime) != basetype.Uint32Invalid {
		size++
	}
	if m.Vo2Max != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Sport) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.SubSport) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.MaxMetCategory) != basetype.EnumInvalid {
		size++
	}
	if m.CalibratedData != false {
		size++
	}
	if typeconv.ToEnum[byte](m.HrSource) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.SpeedSource) != basetype.EnumInvalid {
		size++
	}
	return size
}
