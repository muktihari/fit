// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.133

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/kit/scaleoffset"
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// CoursePoint is a CoursePoint message.
type CoursePoint struct {
	Timestamp    time.Time
	Name         string
	PositionLat  int32  // Units: semicircles
	PositionLong int32  // Units: semicircles
	Distance     uint32 // Scale: 100; Units: m
	MessageIndex typedef.MessageIndex
	Type         typedef.CoursePoint
	Favorite     bool

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewCoursePoint creates new CoursePoint struct based on given mesg.
// If mesg is nil, it will return CoursePoint with all fields being set to its corresponding invalid value.
func NewCoursePoint(mesg *proto.Message) *CoursePoint {
	vals := [255]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &CoursePoint{
		Timestamp:    datetime.ToTime(vals[1]),
		Name:         typeconv.ToString[string](vals[6]),
		PositionLat:  typeconv.ToSint32[int32](vals[2]),
		PositionLong: typeconv.ToSint32[int32](vals[3]),
		Distance:     typeconv.ToUint32[uint32](vals[4]),
		MessageIndex: typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		Type:         typeconv.ToEnum[typedef.CoursePoint](vals[5]),
		Favorite:     typeconv.ToBool[bool](vals[8]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts CoursePoint into proto.Message.
func (m *CoursePoint) ToMesg(fac Factory) proto.Message {
	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := fac.CreateMesgOnly(typedef.MesgNumCoursePoint)

	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = datetime.ToUint32(m.Timestamp)
		fields = append(fields, field)
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.Name
		fields = append(fields, field)
	}
	if m.PositionLat != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.PositionLat
		fields = append(fields, field)
	}
	if m.PositionLong != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.PositionLong
		fields = append(fields, field)
	}
	if m.Distance != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.Distance
		fields = append(fields, field)
	}
	if uint16(m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = uint16(m.MessageIndex)
		fields = append(fields, field)
	}
	if byte(m.Type) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = byte(m.Type)
		fields = append(fields, field)
	}
	if m.Favorite != false {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = m.Favorite
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// DistanceScaled return Distance in its scaled value [Scale: 100; Units: m].
//
// If Distance value is invalid, float64 invalid value will be returned.
func (m *CoursePoint) DistanceScaled() float64 {
	if m.Distance == basetype.Uint32Invalid {
		return basetype.Float64InvalidInFloatForm()
	}
	return scaleoffset.Apply(m.Distance, 100, 0)
}

// SetTimestamp sets CoursePoint value.
func (m *CoursePoint) SetTimestamp(v time.Time) *CoursePoint {
	m.Timestamp = v
	return m
}

// SetName sets CoursePoint value.
func (m *CoursePoint) SetName(v string) *CoursePoint {
	m.Name = v
	return m
}

// SetPositionLat sets CoursePoint value.
//
// Units: semicircles
func (m *CoursePoint) SetPositionLat(v int32) *CoursePoint {
	m.PositionLat = v
	return m
}

// SetPositionLong sets CoursePoint value.
//
// Units: semicircles
func (m *CoursePoint) SetPositionLong(v int32) *CoursePoint {
	m.PositionLong = v
	return m
}

// SetDistance sets CoursePoint value.
//
// Scale: 100; Units: m
func (m *CoursePoint) SetDistance(v uint32) *CoursePoint {
	m.Distance = v
	return m
}

// SetMessageIndex sets CoursePoint value.
func (m *CoursePoint) SetMessageIndex(v typedef.MessageIndex) *CoursePoint {
	m.MessageIndex = v
	return m
}

// SetType sets CoursePoint value.
func (m *CoursePoint) SetType(v typedef.CoursePoint) *CoursePoint {
	m.Type = v
	return m
}

// SetFavorite sets CoursePoint value.
func (m *CoursePoint) SetFavorite(v bool) *CoursePoint {
	m.Favorite = v
	return m
}

// SetDeveloperFields CoursePoint's DeveloperFields.
func (m *CoursePoint) SetDeveloperFields(developerFields ...proto.DeveloperField) *CoursePoint {
	m.DeveloperFields = developerFields
	return m
}
