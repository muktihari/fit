// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// CoursePoint is a CoursePoint message.
type CoursePoint struct {
	MessageIndex typedef.MessageIndex
	Timestamp    typedef.DateTime
	PositionLat  int32  // Units: semicircles;
	PositionLong int32  // Units: semicircles;
	Distance     uint32 // Scale: 100; Units: m;
	Type         typedef.CoursePoint
	Name         string
	Favorite     bool

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewCoursePoint creates new CoursePoint struct based on given mesg. If mesg is nil or mesg.Num is not equal to CoursePoint mesg number, it will return nil.
func NewCoursePoint(mesg proto.Message) *CoursePoint {
	if mesg.Num != typedef.MesgNumCoursePoint {
		return nil
	}

	vals := [...]any{ // nil value will be converted to its corresponding invalid value by typeconv.
		254: nil, /* MessageIndex */
		1:   nil, /* Timestamp */
		2:   nil, /* PositionLat */
		3:   nil, /* PositionLong */
		4:   nil, /* Distance */
		5:   nil, /* Type */
		6:   nil, /* Name */
		8:   nil, /* Favorite */
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &CoursePoint{
		MessageIndex: typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		Timestamp:    typeconv.ToUint32[typedef.DateTime](vals[1]),
		PositionLat:  typeconv.ToSint32[int32](vals[2]),
		PositionLong: typeconv.ToSint32[int32](vals[3]),
		Distance:     typeconv.ToUint32[uint32](vals[4]),
		Type:         typeconv.ToEnum[typedef.CoursePoint](vals[5]),
		Name:         typeconv.ToString[string](vals[6]),
		Favorite:     typeconv.ToBool[bool](vals[8]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to CoursePoint mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumCoursePoint)
func (m CoursePoint) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumCoursePoint {
		return
	}

	vals := [...]any{
		254: m.MessageIndex,
		1:   m.Timestamp,
		2:   m.PositionLat,
		3:   m.PositionLong,
		4:   m.Distance,
		5:   m.Type,
		6:   m.Name,
		8:   m.Favorite,
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		field.Value = vals[field.Num]
	}

	mesg.DeveloperFields = m.DeveloperFields
}
