// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Course is a Course message.
type Course struct {
	Sport        typedef.Sport
	Name         string
	Capabilities typedef.CourseCapabilities
	SubSport     typedef.SubSport

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewCourse creates new Course struct based on given mesg.
// If mesg is nil, it will return Course with all fields being set to its corresponding invalid value.
func NewCourse(mesg *proto.Message) *Course {
	vals := [8]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &Course{
		Sport:        typeconv.ToEnum[typedef.Sport](vals[4]),
		Name:         typeconv.ToString[string](vals[5]),
		Capabilities: typeconv.ToUint32z[typedef.CourseCapabilities](vals[6]),
		SubSport:     typeconv.ToEnum[typedef.SubSport](vals[7]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts Course into proto.Message.
func (m *Course) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumCourse)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToEnum[byte](m.Sport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = typeconv.ToEnum[byte](m.Sport)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.Name
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32z[uint32](m.Capabilities) != basetype.Uint32zInvalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = typeconv.ToUint32z[uint32](m.Capabilities)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.SubSport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = typeconv.ToEnum[byte](m.SubSport)
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of Course's valid fields.
func (m *Course) size() byte {
	var size byte
	if typeconv.ToEnum[byte](m.Sport) != basetype.EnumInvalid {
		size++
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		size++
	}
	if typeconv.ToUint32z[uint32](m.Capabilities) != basetype.Uint32zInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.SubSport) != basetype.EnumInvalid {
		size++
	}
	return size
}

// SetSport sets Course value.
func (m *Course) SetSport(v typedef.Sport) *Course {
	m.Sport = v
	return m
}

// SetName sets Course value.
func (m *Course) SetName(v string) *Course {
	m.Name = v
	return m
}

// SetCapabilities sets Course value.
func (m *Course) SetCapabilities(v typedef.CourseCapabilities) *Course {
	m.Capabilities = v
	return m
}

// SetSubSport sets Course value.
func (m *Course) SetSubSport(v typedef.SubSport) *Course {
	m.SubSport = v
	return m
}

// SetDeveloperFields Course's DeveloperFields.
func (m *Course) SetDeveloperFields(developerFields ...proto.DeveloperField) *Course {
	m.DeveloperFields = developerFields
	return m
}
