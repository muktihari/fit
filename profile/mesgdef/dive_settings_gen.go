// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// DiveSettings is a DiveSettings message.
type DiveSettings struct {
	Timestamp                 typedef.DateTime
	MessageIndex              typedef.MessageIndex
	Name                      string
	Model                     typedef.TissueModelType
	GfLow                     uint8 // Units: percent;
	GfHigh                    uint8 // Units: percent;
	WaterType                 typedef.WaterType
	WaterDensity              float32 // Units: kg/m^3; Fresh water is usually 1000; salt water is usually 1025
	Po2Warn                   uint8   // Scale: 100; Units: percent; Typically 1.40
	Po2Critical               uint8   // Scale: 100; Units: percent; Typically 1.60
	Po2Deco                   uint8   // Scale: 100; Units: percent;
	SafetyStopEnabled         bool
	BottomDepth               float32
	BottomTime                uint32
	ApneaCountdownEnabled     bool
	ApneaCountdownTime        uint32
	BacklightMode             typedef.DiveBacklightMode
	BacklightBrightness       uint8
	BacklightTimeout          typedef.BacklightTimeout
	RepeatDiveInterval        uint16 // Units: s; Time between surfacing and ending the activity
	SafetyStopTime            uint16 // Units: s; Time at safety stop (if enabled)
	HeartRateSourceType       typedef.SourceType
	HeartRateSource           uint8
	TravelGas                 typedef.MessageIndex           // Index of travel dive_gas message
	CcrLowSetpointSwitchMode  typedef.CcrSetpointSwitchMode  // If low PO2 should be switched to automatically
	CcrLowSetpoint            uint8                          // Scale: 100; Units: percent; Target PO2 when using low setpoint
	CcrLowSetpointDepth       uint32                         // Scale: 1000; Units: m; Depth to switch to low setpoint in automatic mode
	CcrHighSetpointSwitchMode typedef.CcrSetpointSwitchMode  // If high PO2 should be switched to automatically
	CcrHighSetpoint           uint8                          // Scale: 100; Units: percent; Target PO2 when using high setpoint
	CcrHighSetpointDepth      uint32                         // Scale: 1000; Units: m; Depth to switch to high setpoint in automatic mode
	GasConsumptionDisplay     typedef.GasConsumptionRateType // Type of gas consumption rate to display. Some values are only valid if tank volume is known.
	UpKeyEnabled              bool                           // Indicates whether the up key is enabled during dives
	DiveSounds                typedef.Tone                   // Sounds and vibration enabled or disabled in-dive
	LastStopMultiple          uint8                          // Scale: 10; Usually 1.0/1.5/2.0 representing 3/4.5/6m or 10/15/20ft
	NoFlyTimeMode             typedef.NoFlyTimeMode          // Indicates which guidelines to use for no-fly surface interval.

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewDiveSettings creates new DiveSettings struct based on given mesg. If mesg is nil or mesg.Num is not equal to DiveSettings mesg number, it will return nil.
func NewDiveSettings(mesg proto.Message) *DiveSettings {
	if mesg.Num != typedef.MesgNumDiveSettings {
		return nil
	}

	vals := [255]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &DiveSettings{
		Timestamp:                 typeconv.ToUint32[typedef.DateTime](vals[253]),
		MessageIndex:              typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		Name:                      typeconv.ToString[string](vals[0]),
		Model:                     typeconv.ToEnum[typedef.TissueModelType](vals[1]),
		GfLow:                     typeconv.ToUint8[uint8](vals[2]),
		GfHigh:                    typeconv.ToUint8[uint8](vals[3]),
		WaterType:                 typeconv.ToEnum[typedef.WaterType](vals[4]),
		WaterDensity:              typeconv.ToFloat32[float32](vals[5]),
		Po2Warn:                   typeconv.ToUint8[uint8](vals[6]),
		Po2Critical:               typeconv.ToUint8[uint8](vals[7]),
		Po2Deco:                   typeconv.ToUint8[uint8](vals[8]),
		SafetyStopEnabled:         typeconv.ToBool[bool](vals[9]),
		BottomDepth:               typeconv.ToFloat32[float32](vals[10]),
		BottomTime:                typeconv.ToUint32[uint32](vals[11]),
		ApneaCountdownEnabled:     typeconv.ToBool[bool](vals[12]),
		ApneaCountdownTime:        typeconv.ToUint32[uint32](vals[13]),
		BacklightMode:             typeconv.ToEnum[typedef.DiveBacklightMode](vals[14]),
		BacklightBrightness:       typeconv.ToUint8[uint8](vals[15]),
		BacklightTimeout:          typeconv.ToUint8[typedef.BacklightTimeout](vals[16]),
		RepeatDiveInterval:        typeconv.ToUint16[uint16](vals[17]),
		SafetyStopTime:            typeconv.ToUint16[uint16](vals[18]),
		HeartRateSourceType:       typeconv.ToEnum[typedef.SourceType](vals[19]),
		HeartRateSource:           typeconv.ToUint8[uint8](vals[20]),
		TravelGas:                 typeconv.ToUint16[typedef.MessageIndex](vals[21]),
		CcrLowSetpointSwitchMode:  typeconv.ToEnum[typedef.CcrSetpointSwitchMode](vals[22]),
		CcrLowSetpoint:            typeconv.ToUint8[uint8](vals[23]),
		CcrLowSetpointDepth:       typeconv.ToUint32[uint32](vals[24]),
		CcrHighSetpointSwitchMode: typeconv.ToEnum[typedef.CcrSetpointSwitchMode](vals[25]),
		CcrHighSetpoint:           typeconv.ToUint8[uint8](vals[26]),
		CcrHighSetpointDepth:      typeconv.ToUint32[uint32](vals[27]),
		GasConsumptionDisplay:     typeconv.ToEnum[typedef.GasConsumptionRateType](vals[29]),
		UpKeyEnabled:              typeconv.ToBool[bool](vals[30]),
		DiveSounds:                typeconv.ToEnum[typedef.Tone](vals[35]),
		LastStopMultiple:          typeconv.ToUint8[uint8](vals[36]),
		NoFlyTimeMode:             typeconv.ToEnum[typedef.NoFlyTimeMode](vals[37]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts DiveSettings into proto.Message.
func (m *DiveSettings) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumDiveSettings)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = typeconv.ToUint16[uint16](m.MessageIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.Name
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Model) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = typeconv.ToEnum[byte](m.Model)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.GfLow != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.GfLow
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.GfHigh != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.GfHigh
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.WaterType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = typeconv.ToEnum[byte](m.WaterType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.WaterDensity) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.WaterDensity
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Po2Warn != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.Po2Warn
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Po2Critical != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = m.Po2Critical
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Po2Deco != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = m.Po2Deco
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.SafetyStopEnabled != false {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = m.SafetyStopEnabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.BottomDepth) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = m.BottomDepth
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.BottomTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 11)
		field.Value = m.BottomTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ApneaCountdownEnabled != false {
		field := fac.CreateField(mesg.Num, 12)
		field.Value = m.ApneaCountdownEnabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ApneaCountdownTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 13)
		field.Value = m.ApneaCountdownTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.BacklightMode) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 14)
		field.Value = typeconv.ToEnum[byte](m.BacklightMode)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.BacklightBrightness != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 15)
		field.Value = m.BacklightBrightness
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint8[uint8](m.BacklightTimeout) != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 16)
		field.Value = typeconv.ToUint8[uint8](m.BacklightTimeout)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.RepeatDiveInterval != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 17)
		field.Value = m.RepeatDiveInterval
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.SafetyStopTime != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 18)
		field.Value = m.SafetyStopTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.HeartRateSourceType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 19)
		field.Value = typeconv.ToEnum[byte](m.HeartRateSourceType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.HeartRateSource != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 20)
		field.Value = m.HeartRateSource
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint16[uint16](m.TravelGas) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 21)
		field.Value = typeconv.ToUint16[uint16](m.TravelGas)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.CcrLowSetpointSwitchMode) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 22)
		field.Value = typeconv.ToEnum[byte](m.CcrLowSetpointSwitchMode)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.CcrLowSetpoint != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 23)
		field.Value = m.CcrLowSetpoint
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.CcrLowSetpointDepth != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 24)
		field.Value = m.CcrLowSetpointDepth
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.CcrHighSetpointSwitchMode) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 25)
		field.Value = typeconv.ToEnum[byte](m.CcrHighSetpointSwitchMode)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.CcrHighSetpoint != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 26)
		field.Value = m.CcrHighSetpoint
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.CcrHighSetpointDepth != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 27)
		field.Value = m.CcrHighSetpointDepth
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.GasConsumptionDisplay) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 29)
		field.Value = typeconv.ToEnum[byte](m.GasConsumptionDisplay)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.UpKeyEnabled != false {
		field := fac.CreateField(mesg.Num, 30)
		field.Value = m.UpKeyEnabled
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.DiveSounds) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 35)
		field.Value = typeconv.ToEnum[byte](m.DiveSounds)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.LastStopMultiple != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 36)
		field.Value = m.LastStopMultiple
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.NoFlyTimeMode) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 37)
		field.Value = typeconv.ToEnum[byte](m.NoFlyTimeMode)
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of DiveSettings's valid fields.
func (m *DiveSettings) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		size++
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		size++
	}
	if typeconv.ToEnum[byte](m.Model) != basetype.EnumInvalid {
		size++
	}
	if m.GfLow != basetype.Uint8Invalid {
		size++
	}
	if m.GfHigh != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.WaterType) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.WaterDensity) != basetype.Uint32Invalid {
		size++
	}
	if m.Po2Warn != basetype.Uint8Invalid {
		size++
	}
	if m.Po2Critical != basetype.Uint8Invalid {
		size++
	}
	if m.Po2Deco != basetype.Uint8Invalid {
		size++
	}
	if m.SafetyStopEnabled != false {
		size++
	}
	if typeconv.ToUint32[uint32](m.BottomDepth) != basetype.Uint32Invalid {
		size++
	}
	if m.BottomTime != basetype.Uint32Invalid {
		size++
	}
	if m.ApneaCountdownEnabled != false {
		size++
	}
	if m.ApneaCountdownTime != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.BacklightMode) != basetype.EnumInvalid {
		size++
	}
	if m.BacklightBrightness != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToUint8[uint8](m.BacklightTimeout) != basetype.Uint8Invalid {
		size++
	}
	if m.RepeatDiveInterval != basetype.Uint16Invalid {
		size++
	}
	if m.SafetyStopTime != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.HeartRateSourceType) != basetype.EnumInvalid {
		size++
	}
	if m.HeartRateSource != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToUint16[uint16](m.TravelGas) != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.CcrLowSetpointSwitchMode) != basetype.EnumInvalid {
		size++
	}
	if m.CcrLowSetpoint != basetype.Uint8Invalid {
		size++
	}
	if m.CcrLowSetpointDepth != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.CcrHighSetpointSwitchMode) != basetype.EnumInvalid {
		size++
	}
	if m.CcrHighSetpoint != basetype.Uint8Invalid {
		size++
	}
	if m.CcrHighSetpointDepth != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.GasConsumptionDisplay) != basetype.EnumInvalid {
		size++
	}
	if m.UpKeyEnabled != false {
		size++
	}
	if typeconv.ToEnum[byte](m.DiveSounds) != basetype.EnumInvalid {
		size++
	}
	if m.LastStopMultiple != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.NoFlyTimeMode) != basetype.EnumInvalid {
		size++
	}
	return size
}
