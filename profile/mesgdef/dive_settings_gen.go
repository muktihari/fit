// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.115

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"math"
)

// DiveSettings is a DiveSettings message.
type DiveSettings struct {
	Timestamp                 typedef.DateTime
	MessageIndex              typedef.MessageIndex
	Name                      string
	Model                     typedef.TissueModelType
	GfLow                     uint8 // Units: percent;
	GfHigh                    uint8 // Units: percent;
	WaterType                 typedef.WaterType
	WaterDensity              float32 // Units: kg/m^3; Fresh water is usually 1000; salt water is usually 1025
	Po2Warn                   uint8   // Scale: 100; Units: percent; Typically 1.40
	Po2Critical               uint8   // Scale: 100; Units: percent; Typically 1.60
	Po2Deco                   uint8   // Scale: 100; Units: percent;
	SafetyStopEnabled         bool
	BottomDepth               float32
	BottomTime                uint32
	ApneaCountdownEnabled     bool
	ApneaCountdownTime        uint32
	BacklightMode             typedef.DiveBacklightMode
	BacklightBrightness       uint8
	BacklightTimeout          typedef.BacklightTimeout
	RepeatDiveInterval        uint16 // Units: s; Time between surfacing and ending the activity
	SafetyStopTime            uint16 // Units: s; Time at safety stop (if enabled)
	HeartRateSourceType       typedef.SourceType
	HeartRateSource           uint8
	TravelGas                 typedef.MessageIndex           // Index of travel dive_gas message
	CcrLowSetpointSwitchMode  typedef.CcrSetpointSwitchMode  // If low PO2 should be switched to automatically
	CcrLowSetpoint            uint8                          // Scale: 100; Units: percent; Target PO2 when using low setpoint
	CcrLowSetpointDepth       uint32                         // Scale: 1000; Units: m; Depth to switch to low setpoint in automatic mode
	CcrHighSetpointSwitchMode typedef.CcrSetpointSwitchMode  // If high PO2 should be switched to automatically
	CcrHighSetpoint           uint8                          // Scale: 100; Units: percent; Target PO2 when using high setpoint
	CcrHighSetpointDepth      uint32                         // Scale: 1000; Units: m; Depth to switch to high setpoint in automatic mode
	GasConsumptionDisplay     typedef.GasConsumptionRateType // Type of gas consumption rate to display. Some values are only valid if tank volume is known.
	UpKeyEnabled              bool                           // Indicates whether the up key is enabled during dives
	DiveSounds                typedef.Tone                   // Sounds and vibration enabled or disabled in-dive
	LastStopMultiple          uint8                          // Scale: 10; Usually 1.0/1.5/2.0 representing 3/4.5/6m or 10/15/20ft
	NoFlyTimeMode             typedef.NoFlyTimeMode          // Indicates which guidelines to use for no-fly surface interval.

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewDiveSettings creates new DiveSettings struct based on given mesg. If mesg is nil or mesg.Num is not equal to DiveSettings mesg number, it will return nil.
func NewDiveSettings(mesg proto.Message) *DiveSettings {
	if mesg.Num != typedef.MesgNumDiveSettings {
		return nil
	}

	vals := [256]any{ // Mark all values as invalid, replace only when specified.
		253: basetype.Uint32Invalid,                        /* Timestamp */
		254: basetype.Uint16Invalid,                        /* MessageIndex */
		0:   basetype.StringInvalid,                        /* Name */
		1:   basetype.EnumInvalid,                          /* Model */
		2:   basetype.Uint8Invalid,                         /* GfLow */
		3:   basetype.Uint8Invalid,                         /* GfHigh */
		4:   basetype.EnumInvalid,                          /* WaterType */
		5:   math.Float32frombits(basetype.Float32Invalid), /* WaterDensity */
		6:   basetype.Uint8Invalid,                         /* Po2Warn */
		7:   basetype.Uint8Invalid,                         /* Po2Critical */
		8:   basetype.Uint8Invalid,                         /* Po2Deco */
		9:   false,                                         /* SafetyStopEnabled */
		10:  math.Float32frombits(basetype.Float32Invalid), /* BottomDepth */
		11:  basetype.Uint32Invalid,                        /* BottomTime */
		12:  false,                                         /* ApneaCountdownEnabled */
		13:  basetype.Uint32Invalid,                        /* ApneaCountdownTime */
		14:  basetype.EnumInvalid,                          /* BacklightMode */
		15:  basetype.Uint8Invalid,                         /* BacklightBrightness */
		16:  basetype.Uint8Invalid,                         /* BacklightTimeout */
		17:  basetype.Uint16Invalid,                        /* RepeatDiveInterval */
		18:  basetype.Uint16Invalid,                        /* SafetyStopTime */
		19:  basetype.EnumInvalid,                          /* HeartRateSourceType */
		20:  basetype.Uint8Invalid,                         /* HeartRateSource */
		21:  basetype.Uint16Invalid,                        /* TravelGas */
		22:  basetype.EnumInvalid,                          /* CcrLowSetpointSwitchMode */
		23:  basetype.Uint8Invalid,                         /* CcrLowSetpoint */
		24:  basetype.Uint32Invalid,                        /* CcrLowSetpointDepth */
		25:  basetype.EnumInvalid,                          /* CcrHighSetpointSwitchMode */
		26:  basetype.Uint8Invalid,                         /* CcrHighSetpoint */
		27:  basetype.Uint32Invalid,                        /* CcrHighSetpointDepth */
		29:  basetype.EnumInvalid,                          /* GasConsumptionDisplay */
		30:  false,                                         /* UpKeyEnabled */
		35:  basetype.EnumInvalid,                          /* DiveSounds */
		36:  basetype.Uint8Invalid,                         /* LastStopMultiple */
		37:  basetype.EnumInvalid,                          /* NoFlyTimeMode */
	}

	for i := range mesg.Fields {
		if mesg.Fields[i].Value == nil {
			continue // keep the invalid value
		}
		vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
	}

	return &DiveSettings{
		Timestamp:                 typeconv.ToUint32[typedef.DateTime](vals[253]),
		MessageIndex:              typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		Name:                      typeconv.ToString[string](vals[0]),
		Model:                     typeconv.ToEnum[typedef.TissueModelType](vals[1]),
		GfLow:                     typeconv.ToUint8[uint8](vals[2]),
		GfHigh:                    typeconv.ToUint8[uint8](vals[3]),
		WaterType:                 typeconv.ToEnum[typedef.WaterType](vals[4]),
		WaterDensity:              typeconv.ToFloat32[float32](vals[5]),
		Po2Warn:                   typeconv.ToUint8[uint8](vals[6]),
		Po2Critical:               typeconv.ToUint8[uint8](vals[7]),
		Po2Deco:                   typeconv.ToUint8[uint8](vals[8]),
		SafetyStopEnabled:         typeconv.ToBool[bool](vals[9]),
		BottomDepth:               typeconv.ToFloat32[float32](vals[10]),
		BottomTime:                typeconv.ToUint32[uint32](vals[11]),
		ApneaCountdownEnabled:     typeconv.ToBool[bool](vals[12]),
		ApneaCountdownTime:        typeconv.ToUint32[uint32](vals[13]),
		BacklightMode:             typeconv.ToEnum[typedef.DiveBacklightMode](vals[14]),
		BacklightBrightness:       typeconv.ToUint8[uint8](vals[15]),
		BacklightTimeout:          typeconv.ToUint8[typedef.BacklightTimeout](vals[16]),
		RepeatDiveInterval:        typeconv.ToUint16[uint16](vals[17]),
		SafetyStopTime:            typeconv.ToUint16[uint16](vals[18]),
		HeartRateSourceType:       typeconv.ToEnum[typedef.SourceType](vals[19]),
		HeartRateSource:           typeconv.ToUint8[uint8](vals[20]),
		TravelGas:                 typeconv.ToUint16[typedef.MessageIndex](vals[21]),
		CcrLowSetpointSwitchMode:  typeconv.ToEnum[typedef.CcrSetpointSwitchMode](vals[22]),
		CcrLowSetpoint:            typeconv.ToUint8[uint8](vals[23]),
		CcrLowSetpointDepth:       typeconv.ToUint32[uint32](vals[24]),
		CcrHighSetpointSwitchMode: typeconv.ToEnum[typedef.CcrSetpointSwitchMode](vals[25]),
		CcrHighSetpoint:           typeconv.ToUint8[uint8](vals[26]),
		CcrHighSetpointDepth:      typeconv.ToUint32[uint32](vals[27]),
		GasConsumptionDisplay:     typeconv.ToEnum[typedef.GasConsumptionRateType](vals[29]),
		UpKeyEnabled:              typeconv.ToBool[bool](vals[30]),
		DiveSounds:                typeconv.ToEnum[typedef.Tone](vals[35]),
		LastStopMultiple:          typeconv.ToUint8[uint8](vals[36]),
		NoFlyTimeMode:             typeconv.ToEnum[typedef.NoFlyTimeMode](vals[37]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to DiveSettings mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumDiveSettings)
func (m DiveSettings) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumDiveSettings {
		return
	}

	vals := [256]any{
		253: m.Timestamp,
		254: m.MessageIndex,
		0:   m.Name,
		1:   m.Model,
		2:   m.GfLow,
		3:   m.GfHigh,
		4:   m.WaterType,
		5:   m.WaterDensity,
		6:   m.Po2Warn,
		7:   m.Po2Critical,
		8:   m.Po2Deco,
		9:   m.SafetyStopEnabled,
		10:  m.BottomDepth,
		11:  m.BottomTime,
		12:  m.ApneaCountdownEnabled,
		13:  m.ApneaCountdownTime,
		14:  m.BacklightMode,
		15:  m.BacklightBrightness,
		16:  m.BacklightTimeout,
		17:  m.RepeatDiveInterval,
		18:  m.SafetyStopTime,
		19:  m.HeartRateSourceType,
		20:  m.HeartRateSource,
		21:  m.TravelGas,
		22:  m.CcrLowSetpointSwitchMode,
		23:  m.CcrLowSetpoint,
		24:  m.CcrLowSetpointDepth,
		25:  m.CcrHighSetpointSwitchMode,
		26:  m.CcrHighSetpoint,
		27:  m.CcrHighSetpointDepth,
		29:  m.GasConsumptionDisplay,
		30:  m.UpKeyEnabled,
		35:  m.DiveSounds,
		36:  m.LastStopMultiple,
		37:  m.NoFlyTimeMode,
	}

	for i := range mesg.Fields {
		mesg.Fields[i].Value = vals[mesg.Fields[i].Num]
	}
	mesg.DeveloperFields = m.DeveloperFields

}
