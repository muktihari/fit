// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// DiveGas is a DiveGas message.
type DiveGas struct {
	MessageIndex  typedef.MessageIndex
	HeliumContent uint8 // Units: percent;
	OxygenContent uint8 // Units: percent;
	Status        typedef.DiveGasStatus
	Mode          typedef.DiveGasMode

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewDiveGas creates new DiveGas struct based on given mesg. If mesg is nil or mesg.Num is not equal to DiveGas mesg number, it will return nil.
func NewDiveGas(mesg proto.Message) *DiveGas {
	if mesg.Num != typedef.MesgNumDiveGas {
		return nil
	}

	vals := [255]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &DiveGas{
		MessageIndex:  typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		HeliumContent: typeconv.ToUint8[uint8](vals[0]),
		OxygenContent: typeconv.ToUint8[uint8](vals[1]),
		Status:        typeconv.ToEnum[typedef.DiveGasStatus](vals[2]),
		Mode:          typeconv.ToEnum[typedef.DiveGasMode](vals[3]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts DiveGas into proto.Message.
func (m *DiveGas) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumDiveGas)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = typeconv.ToUint16[uint16](m.MessageIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.HeliumContent != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.HeliumContent
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.OxygenContent != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.OxygenContent
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Status) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = typeconv.ToEnum[byte](m.Status)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.Mode) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = typeconv.ToEnum[byte](m.Mode)
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of DiveGas's valid fields.
func (m *DiveGas) size() byte {
	var size byte
	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		size++
	}
	if m.HeliumContent != basetype.Uint8Invalid {
		size++
	}
	if m.OxygenContent != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Status) != basetype.EnumInvalid {
		size++
	}
	if typeconv.ToEnum[byte](m.Mode) != basetype.EnumInvalid {
		size++
	}
	return size
}
