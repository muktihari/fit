// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// TimestampCorrelation is a TimestampCorrelation message.
type TimestampCorrelation struct {
	Timestamp                 typedef.DateTime      // Units: s; Whole second part of UTC timestamp at the time the system timestamp was recorded.
	FractionalTimestamp       uint16                // Scale: 32768; Units: s; Fractional part of the UTC timestamp at the time the system timestamp was recorded.
	SystemTimestamp           typedef.DateTime      // Units: s; Whole second part of the system timestamp
	FractionalSystemTimestamp uint16                // Scale: 32768; Units: s; Fractional part of the system timestamp
	LocalTimestamp            typedef.LocalDateTime // Units: s; timestamp epoch expressed in local time used to convert timestamps to local time
	TimestampMs               uint16                // Units: ms; Millisecond part of the UTC timestamp at the time the system timestamp was recorded.
	SystemTimestampMs         uint16                // Units: ms; Millisecond part of the system timestamp

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewTimestampCorrelation creates new TimestampCorrelation struct based on given mesg. If mesg is nil or mesg.Num is not equal to TimestampCorrelation mesg number, it will return nil.
func NewTimestampCorrelation(mesg proto.Message) *TimestampCorrelation {
	if mesg.Num != typedef.MesgNumTimestampCorrelation {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &TimestampCorrelation{
		Timestamp:                 typeconv.ToUint32[typedef.DateTime](vals[253]),
		FractionalTimestamp:       typeconv.ToUint16[uint16](vals[0]),
		SystemTimestamp:           typeconv.ToUint32[typedef.DateTime](vals[1]),
		FractionalSystemTimestamp: typeconv.ToUint16[uint16](vals[2]),
		LocalTimestamp:            typeconv.ToUint32[typedef.LocalDateTime](vals[3]),
		TimestampMs:               typeconv.ToUint16[uint16](vals[4]),
		SystemTimestampMs:         typeconv.ToUint16[uint16](vals[5]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts TimestampCorrelation into proto.Message.
func (m *TimestampCorrelation) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumTimestampCorrelation)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.FractionalTimestamp != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.FractionalTimestamp
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.SystemTimestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = typeconv.ToUint32[uint32](m.SystemTimestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.FractionalSystemTimestamp != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.FractionalSystemTimestamp
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.LocalTimestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = typeconv.ToUint32[uint32](m.LocalTimestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.TimestampMs
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.SystemTimestampMs != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.SystemTimestampMs
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of TimestampCorrelation's valid fields.
func (m *TimestampCorrelation) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.FractionalTimestamp != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.SystemTimestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.FractionalSystemTimestamp != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.LocalTimestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		size++
	}
	if m.SystemTimestampMs != basetype.Uint16Invalid {
		size++
	}
	return size
}
