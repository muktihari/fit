// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// TimestampCorrelation is a TimestampCorrelation message.
type TimestampCorrelation struct {
	Timestamp                 time.Time // Units: s; Whole second part of UTC timestamp at the time the system timestamp was recorded.
	FractionalTimestamp       uint16    // Scale: 32768; Units: s; Fractional part of the UTC timestamp at the time the system timestamp was recorded.
	SystemTimestamp           time.Time // Units: s; Whole second part of the system timestamp
	FractionalSystemTimestamp uint16    // Scale: 32768; Units: s; Fractional part of the system timestamp
	LocalTimestamp            time.Time // Units: s; timestamp epoch expressed in local time used to convert timestamps to local time
	TimestampMs               uint16    // Units: ms; Millisecond part of the UTC timestamp at the time the system timestamp was recorded.
	SystemTimestampMs         uint16    // Units: ms; Millisecond part of the system timestamp

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewTimestampCorrelation creates new TimestampCorrelation struct based on given mesg.
// If mesg is nil, it will return TimestampCorrelation with all fields being set to its corresponding invalid value.
func NewTimestampCorrelation(mesg *proto.Message) *TimestampCorrelation {
	vals := [254]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &TimestampCorrelation{
		Timestamp:                 datetime.ToTime(vals[253]),
		FractionalTimestamp:       typeconv.ToUint16[uint16](vals[0]),
		SystemTimestamp:           datetime.ToTime(vals[1]),
		FractionalSystemTimestamp: typeconv.ToUint16[uint16](vals[2]),
		LocalTimestamp:            datetime.ToTime(vals[3]),
		TimestampMs:               typeconv.ToUint16[uint16](vals[4]),
		SystemTimestampMs:         typeconv.ToUint16[uint16](vals[5]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts TimestampCorrelation into proto.Message.
func (m *TimestampCorrelation) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumTimestampCorrelation)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = datetime.ToUint32(m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.FractionalTimestamp != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.FractionalTimestamp
		mesg.Fields = append(mesg.Fields, field)
	}
	if datetime.ToUint32(m.SystemTimestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = datetime.ToUint32(m.SystemTimestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.FractionalSystemTimestamp != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.FractionalSystemTimestamp
		mesg.Fields = append(mesg.Fields, field)
	}
	if datetime.ToUint32(m.LocalTimestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = datetime.ToUint32(m.LocalTimestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.TimestampMs
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.SystemTimestampMs != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.SystemTimestampMs
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of TimestampCorrelation's valid fields.
func (m *TimestampCorrelation) size() byte {
	var size byte
	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.FractionalTimestamp != basetype.Uint16Invalid {
		size++
	}
	if datetime.ToUint32(m.SystemTimestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.FractionalSystemTimestamp != basetype.Uint16Invalid {
		size++
	}
	if datetime.ToUint32(m.LocalTimestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		size++
	}
	if m.SystemTimestampMs != basetype.Uint16Invalid {
		size++
	}
	return size
}

// SetTimestamp sets TimestampCorrelation value.
//
// Units: s; Whole second part of UTC timestamp at the time the system timestamp was recorded.
func (m *TimestampCorrelation) SetTimestamp(v time.Time) *TimestampCorrelation {
	m.Timestamp = v
	return m
}

// SetFractionalTimestamp sets TimestampCorrelation value.
//
// Scale: 32768; Units: s; Fractional part of the UTC timestamp at the time the system timestamp was recorded.
func (m *TimestampCorrelation) SetFractionalTimestamp(v uint16) *TimestampCorrelation {
	m.FractionalTimestamp = v
	return m
}

// SetSystemTimestamp sets TimestampCorrelation value.
//
// Units: s; Whole second part of the system timestamp
func (m *TimestampCorrelation) SetSystemTimestamp(v time.Time) *TimestampCorrelation {
	m.SystemTimestamp = v
	return m
}

// SetFractionalSystemTimestamp sets TimestampCorrelation value.
//
// Scale: 32768; Units: s; Fractional part of the system timestamp
func (m *TimestampCorrelation) SetFractionalSystemTimestamp(v uint16) *TimestampCorrelation {
	m.FractionalSystemTimestamp = v
	return m
}

// SetLocalTimestamp sets TimestampCorrelation value.
//
// Units: s; timestamp epoch expressed in local time used to convert timestamps to local time
func (m *TimestampCorrelation) SetLocalTimestamp(v time.Time) *TimestampCorrelation {
	m.LocalTimestamp = v
	return m
}

// SetTimestampMs sets TimestampCorrelation value.
//
// Units: ms; Millisecond part of the UTC timestamp at the time the system timestamp was recorded.
func (m *TimestampCorrelation) SetTimestampMs(v uint16) *TimestampCorrelation {
	m.TimestampMs = v
	return m
}

// SetSystemTimestampMs sets TimestampCorrelation value.
//
// Units: ms; Millisecond part of the system timestamp
func (m *TimestampCorrelation) SetSystemTimestampMs(v uint16) *TimestampCorrelation {
	m.SystemTimestampMs = v
	return m
}

// SetDeveloperFields TimestampCorrelation's DeveloperFields.
func (m *TimestampCorrelation) SetDeveloperFields(developerFields ...proto.DeveloperField) *TimestampCorrelation {
	m.DeveloperFields = developerFields
	return m
}
