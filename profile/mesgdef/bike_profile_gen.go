// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/kit/scaleoffset"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"math"
)

// BikeProfile is a BikeProfile message.
//
// Note: The order of the fields is optimized using a memory alignment algorithm.
// Do not rely on field indices, such as when using reflection.
type BikeProfile struct {
	Name                     string
	FrontGear                []uint8 // Array: [N]; Number of teeth on each gear 0 is innermost
	RearGear                 []uint8 // Array: [N]; Number of teeth on each gear 0 is innermost
	Odometer                 uint32  // Scale: 100; Units: m
	MessageIndex             typedef.MessageIndex
	BikeSpdAntId             uint16
	BikeCadAntId             uint16
	BikeSpdcadAntId          uint16
	BikePowerAntId           uint16
	CustomWheelsize          uint16 // Scale: 1000; Units: m
	AutoWheelsize            uint16 // Scale: 1000; Units: m
	BikeWeight               uint16 // Scale: 10; Units: kg
	PowerCalFactor           uint16 // Scale: 10; Units: %
	Sport                    typedef.Sport
	SubSport                 typedef.SubSport
	AutoWheelCal             bool
	AutoPowerZero            bool
	Id                       uint8
	SpdEnabled               bool
	CadEnabled               bool
	SpdcadEnabled            bool
	PowerEnabled             bool
	CrankLength              uint8 // Scale: 2; Offset: -110; Units: mm
	Enabled                  bool
	BikeSpdAntIdTransType    uint8
	BikeCadAntIdTransType    uint8
	BikeSpdcadAntIdTransType uint8
	BikePowerAntIdTransType  uint8
	OdometerRollover         uint8 // Rollover counter that can be used to extend the odometer
	FrontGearNum             uint8 // Number of front gears
	RearGearNum              uint8 // Number of rear gears
	ShimanoDi2Enabled        bool

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewBikeProfile creates new BikeProfile struct based on given mesg.
// If mesg is nil, it will return BikeProfile with all fields being set to its corresponding invalid value.
func NewBikeProfile(mesg *proto.Message) *BikeProfile {
	vals := [255]proto.Value{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &BikeProfile{
		MessageIndex:             typedef.MessageIndex(vals[254].Uint16()),
		Name:                     vals[0].String(),
		Sport:                    typedef.Sport(vals[1].Uint8()),
		SubSport:                 typedef.SubSport(vals[2].Uint8()),
		Odometer:                 vals[3].Uint32(),
		BikeSpdAntId:             vals[4].Uint16z(),
		BikeCadAntId:             vals[5].Uint16z(),
		BikeSpdcadAntId:          vals[6].Uint16z(),
		BikePowerAntId:           vals[7].Uint16z(),
		CustomWheelsize:          vals[8].Uint16(),
		AutoWheelsize:            vals[9].Uint16(),
		BikeWeight:               vals[10].Uint16(),
		PowerCalFactor:           vals[11].Uint16(),
		AutoWheelCal:             vals[12].Bool(),
		AutoPowerZero:            vals[13].Bool(),
		Id:                       vals[14].Uint8(),
		SpdEnabled:               vals[15].Bool(),
		CadEnabled:               vals[16].Bool(),
		SpdcadEnabled:            vals[17].Bool(),
		PowerEnabled:             vals[18].Bool(),
		CrankLength:              vals[19].Uint8(),
		Enabled:                  vals[20].Bool(),
		BikeSpdAntIdTransType:    vals[21].Uint8z(),
		BikeCadAntIdTransType:    vals[22].Uint8z(),
		BikeSpdcadAntIdTransType: vals[23].Uint8z(),
		BikePowerAntIdTransType:  vals[24].Uint8z(),
		OdometerRollover:         vals[37].Uint8(),
		FrontGearNum:             vals[38].Uint8z(),
		FrontGear:                vals[39].SliceUint8(),
		RearGearNum:              vals[40].Uint8z(),
		RearGear:                 vals[41].SliceUint8(),
		ShimanoDi2Enabled:        vals[44].Bool(),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts BikeProfile into proto.Message. If options is nil, default options will be used.
func (m *BikeProfile) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	arr := pool.Get().(*[255]proto.Field)
	defer pool.Put(arr)

	fields := arr[:0] // Create slice from array with zero len.
	mesg := proto.Message{Num: typedef.MesgNumBikeProfile}

	if uint16(m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = proto.Uint16(uint16(m.MessageIndex))
		fields = append(fields, field)
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = proto.String(m.Name)
		fields = append(fields, field)
	}
	if byte(m.Sport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = proto.Uint8(byte(m.Sport))
		fields = append(fields, field)
	}
	if byte(m.SubSport) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = proto.Uint8(byte(m.SubSport))
		fields = append(fields, field)
	}
	if m.Odometer != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = proto.Uint32(m.Odometer)
		fields = append(fields, field)
	}
	if uint16(m.BikeSpdAntId) != basetype.Uint16zInvalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = proto.Uint16(m.BikeSpdAntId)
		fields = append(fields, field)
	}
	if uint16(m.BikeCadAntId) != basetype.Uint16zInvalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = proto.Uint16(m.BikeCadAntId)
		fields = append(fields, field)
	}
	if uint16(m.BikeSpdcadAntId) != basetype.Uint16zInvalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = proto.Uint16(m.BikeSpdcadAntId)
		fields = append(fields, field)
	}
	if uint16(m.BikePowerAntId) != basetype.Uint16zInvalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = proto.Uint16(m.BikePowerAntId)
		fields = append(fields, field)
	}
	if m.CustomWheelsize != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = proto.Uint16(m.CustomWheelsize)
		fields = append(fields, field)
	}
	if m.AutoWheelsize != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = proto.Uint16(m.AutoWheelsize)
		fields = append(fields, field)
	}
	if m.BikeWeight != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = proto.Uint16(m.BikeWeight)
		fields = append(fields, field)
	}
	if m.PowerCalFactor != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 11)
		field.Value = proto.Uint16(m.PowerCalFactor)
		fields = append(fields, field)
	}
	if m.AutoWheelCal != false {
		field := fac.CreateField(mesg.Num, 12)
		field.Value = proto.Bool(m.AutoWheelCal)
		fields = append(fields, field)
	}
	if m.AutoPowerZero != false {
		field := fac.CreateField(mesg.Num, 13)
		field.Value = proto.Bool(m.AutoPowerZero)
		fields = append(fields, field)
	}
	if m.Id != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 14)
		field.Value = proto.Uint8(m.Id)
		fields = append(fields, field)
	}
	if m.SpdEnabled != false {
		field := fac.CreateField(mesg.Num, 15)
		field.Value = proto.Bool(m.SpdEnabled)
		fields = append(fields, field)
	}
	if m.CadEnabled != false {
		field := fac.CreateField(mesg.Num, 16)
		field.Value = proto.Bool(m.CadEnabled)
		fields = append(fields, field)
	}
	if m.SpdcadEnabled != false {
		field := fac.CreateField(mesg.Num, 17)
		field.Value = proto.Bool(m.SpdcadEnabled)
		fields = append(fields, field)
	}
	if m.PowerEnabled != false {
		field := fac.CreateField(mesg.Num, 18)
		field.Value = proto.Bool(m.PowerEnabled)
		fields = append(fields, field)
	}
	if m.CrankLength != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 19)
		field.Value = proto.Uint8(m.CrankLength)
		fields = append(fields, field)
	}
	if m.Enabled != false {
		field := fac.CreateField(mesg.Num, 20)
		field.Value = proto.Bool(m.Enabled)
		fields = append(fields, field)
	}
	if uint8(m.BikeSpdAntIdTransType) != basetype.Uint8zInvalid {
		field := fac.CreateField(mesg.Num, 21)
		field.Value = proto.Uint8(m.BikeSpdAntIdTransType)
		fields = append(fields, field)
	}
	if uint8(m.BikeCadAntIdTransType) != basetype.Uint8zInvalid {
		field := fac.CreateField(mesg.Num, 22)
		field.Value = proto.Uint8(m.BikeCadAntIdTransType)
		fields = append(fields, field)
	}
	if uint8(m.BikeSpdcadAntIdTransType) != basetype.Uint8zInvalid {
		field := fac.CreateField(mesg.Num, 23)
		field.Value = proto.Uint8(m.BikeSpdcadAntIdTransType)
		fields = append(fields, field)
	}
	if uint8(m.BikePowerAntIdTransType) != basetype.Uint8zInvalid {
		field := fac.CreateField(mesg.Num, 24)
		field.Value = proto.Uint8(m.BikePowerAntIdTransType)
		fields = append(fields, field)
	}
	if m.OdometerRollover != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 37)
		field.Value = proto.Uint8(m.OdometerRollover)
		fields = append(fields, field)
	}
	if uint8(m.FrontGearNum) != basetype.Uint8zInvalid {
		field := fac.CreateField(mesg.Num, 38)
		field.Value = proto.Uint8(m.FrontGearNum)
		fields = append(fields, field)
	}
	if m.FrontGear != nil {
		field := fac.CreateField(mesg.Num, 39)
		field.Value = proto.SliceUint8(m.FrontGear)
		fields = append(fields, field)
	}
	if uint8(m.RearGearNum) != basetype.Uint8zInvalid {
		field := fac.CreateField(mesg.Num, 40)
		field.Value = proto.Uint8(m.RearGearNum)
		fields = append(fields, field)
	}
	if m.RearGear != nil {
		field := fac.CreateField(mesg.Num, 41)
		field.Value = proto.SliceUint8(m.RearGear)
		fields = append(fields, field)
	}
	if m.ShimanoDi2Enabled != false {
		field := fac.CreateField(mesg.Num, 44)
		field.Value = proto.Bool(m.ShimanoDi2Enabled)
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// OdometerScaled return Odometer in its scaled value.
// If Odometer value is invalid, float64 invalid value will be returned.
//
// Scale: 100; Units: m
func (m *BikeProfile) OdometerScaled() float64 {
	if m.Odometer == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return scaleoffset.Apply(m.Odometer, 100, 0)
}

// CustomWheelsizeScaled return CustomWheelsize in its scaled value.
// If CustomWheelsize value is invalid, float64 invalid value will be returned.
//
// Scale: 1000; Units: m
func (m *BikeProfile) CustomWheelsizeScaled() float64 {
	if m.CustomWheelsize == basetype.Uint16Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return scaleoffset.Apply(m.CustomWheelsize, 1000, 0)
}

// AutoWheelsizeScaled return AutoWheelsize in its scaled value.
// If AutoWheelsize value is invalid, float64 invalid value will be returned.
//
// Scale: 1000; Units: m
func (m *BikeProfile) AutoWheelsizeScaled() float64 {
	if m.AutoWheelsize == basetype.Uint16Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return scaleoffset.Apply(m.AutoWheelsize, 1000, 0)
}

// BikeWeightScaled return BikeWeight in its scaled value.
// If BikeWeight value is invalid, float64 invalid value will be returned.
//
// Scale: 10; Units: kg
func (m *BikeProfile) BikeWeightScaled() float64 {
	if m.BikeWeight == basetype.Uint16Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return scaleoffset.Apply(m.BikeWeight, 10, 0)
}

// PowerCalFactorScaled return PowerCalFactor in its scaled value.
// If PowerCalFactor value is invalid, float64 invalid value will be returned.
//
// Scale: 10; Units: %
func (m *BikeProfile) PowerCalFactorScaled() float64 {
	if m.PowerCalFactor == basetype.Uint16Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return scaleoffset.Apply(m.PowerCalFactor, 10, 0)
}

// CrankLengthScaled return CrankLength in its scaled value.
// If CrankLength value is invalid, float64 invalid value will be returned.
//
// Scale: 2; Offset: -110; Units: mm
func (m *BikeProfile) CrankLengthScaled() float64 {
	if m.CrankLength == basetype.Uint8Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return scaleoffset.Apply(m.CrankLength, 2, -110)
}

// SetMessageIndex sets MessageIndex value.
func (m *BikeProfile) SetMessageIndex(v typedef.MessageIndex) *BikeProfile {
	m.MessageIndex = v
	return m
}

// SetName sets Name value.
func (m *BikeProfile) SetName(v string) *BikeProfile {
	m.Name = v
	return m
}

// SetSport sets Sport value.
func (m *BikeProfile) SetSport(v typedef.Sport) *BikeProfile {
	m.Sport = v
	return m
}

// SetSubSport sets SubSport value.
func (m *BikeProfile) SetSubSport(v typedef.SubSport) *BikeProfile {
	m.SubSport = v
	return m
}

// SetOdometer sets Odometer value.
//
// Scale: 100; Units: m
func (m *BikeProfile) SetOdometer(v uint32) *BikeProfile {
	m.Odometer = v
	return m
}

// SetOdometerScaled is similar to SetOdometer except it accepts a scaled value.
// This method automatically converts the given value to its uint32 form, discarding any applied scale and offset.
//
// Scale: 100; Units: m
func (m *BikeProfile) SetOdometerScaled(v float64) *BikeProfile {
	m.Odometer = uint32(scaleoffset.Discard(v, 100, 0))
	return m
}

// SetBikeSpdAntId sets BikeSpdAntId value.
func (m *BikeProfile) SetBikeSpdAntId(v uint16) *BikeProfile {
	m.BikeSpdAntId = v
	return m
}

// SetBikeCadAntId sets BikeCadAntId value.
func (m *BikeProfile) SetBikeCadAntId(v uint16) *BikeProfile {
	m.BikeCadAntId = v
	return m
}

// SetBikeSpdcadAntId sets BikeSpdcadAntId value.
func (m *BikeProfile) SetBikeSpdcadAntId(v uint16) *BikeProfile {
	m.BikeSpdcadAntId = v
	return m
}

// SetBikePowerAntId sets BikePowerAntId value.
func (m *BikeProfile) SetBikePowerAntId(v uint16) *BikeProfile {
	m.BikePowerAntId = v
	return m
}

// SetCustomWheelsize sets CustomWheelsize value.
//
// Scale: 1000; Units: m
func (m *BikeProfile) SetCustomWheelsize(v uint16) *BikeProfile {
	m.CustomWheelsize = v
	return m
}

// SetCustomWheelsizeScaled is similar to SetCustomWheelsize except it accepts a scaled value.
// This method automatically converts the given value to its uint16 form, discarding any applied scale and offset.
//
// Scale: 1000; Units: m
func (m *BikeProfile) SetCustomWheelsizeScaled(v float64) *BikeProfile {
	m.CustomWheelsize = uint16(scaleoffset.Discard(v, 1000, 0))
	return m
}

// SetAutoWheelsize sets AutoWheelsize value.
//
// Scale: 1000; Units: m
func (m *BikeProfile) SetAutoWheelsize(v uint16) *BikeProfile {
	m.AutoWheelsize = v
	return m
}

// SetAutoWheelsizeScaled is similar to SetAutoWheelsize except it accepts a scaled value.
// This method automatically converts the given value to its uint16 form, discarding any applied scale and offset.
//
// Scale: 1000; Units: m
func (m *BikeProfile) SetAutoWheelsizeScaled(v float64) *BikeProfile {
	m.AutoWheelsize = uint16(scaleoffset.Discard(v, 1000, 0))
	return m
}

// SetBikeWeight sets BikeWeight value.
//
// Scale: 10; Units: kg
func (m *BikeProfile) SetBikeWeight(v uint16) *BikeProfile {
	m.BikeWeight = v
	return m
}

// SetBikeWeightScaled is similar to SetBikeWeight except it accepts a scaled value.
// This method automatically converts the given value to its uint16 form, discarding any applied scale and offset.
//
// Scale: 10; Units: kg
func (m *BikeProfile) SetBikeWeightScaled(v float64) *BikeProfile {
	m.BikeWeight = uint16(scaleoffset.Discard(v, 10, 0))
	return m
}

// SetPowerCalFactor sets PowerCalFactor value.
//
// Scale: 10; Units: %
func (m *BikeProfile) SetPowerCalFactor(v uint16) *BikeProfile {
	m.PowerCalFactor = v
	return m
}

// SetPowerCalFactorScaled is similar to SetPowerCalFactor except it accepts a scaled value.
// This method automatically converts the given value to its uint16 form, discarding any applied scale and offset.
//
// Scale: 10; Units: %
func (m *BikeProfile) SetPowerCalFactorScaled(v float64) *BikeProfile {
	m.PowerCalFactor = uint16(scaleoffset.Discard(v, 10, 0))
	return m
}

// SetAutoWheelCal sets AutoWheelCal value.
func (m *BikeProfile) SetAutoWheelCal(v bool) *BikeProfile {
	m.AutoWheelCal = v
	return m
}

// SetAutoPowerZero sets AutoPowerZero value.
func (m *BikeProfile) SetAutoPowerZero(v bool) *BikeProfile {
	m.AutoPowerZero = v
	return m
}

// SetId sets Id value.
func (m *BikeProfile) SetId(v uint8) *BikeProfile {
	m.Id = v
	return m
}

// SetSpdEnabled sets SpdEnabled value.
func (m *BikeProfile) SetSpdEnabled(v bool) *BikeProfile {
	m.SpdEnabled = v
	return m
}

// SetCadEnabled sets CadEnabled value.
func (m *BikeProfile) SetCadEnabled(v bool) *BikeProfile {
	m.CadEnabled = v
	return m
}

// SetSpdcadEnabled sets SpdcadEnabled value.
func (m *BikeProfile) SetSpdcadEnabled(v bool) *BikeProfile {
	m.SpdcadEnabled = v
	return m
}

// SetPowerEnabled sets PowerEnabled value.
func (m *BikeProfile) SetPowerEnabled(v bool) *BikeProfile {
	m.PowerEnabled = v
	return m
}

// SetCrankLength sets CrankLength value.
//
// Scale: 2; Offset: -110; Units: mm
func (m *BikeProfile) SetCrankLength(v uint8) *BikeProfile {
	m.CrankLength = v
	return m
}

// SetCrankLengthScaled is similar to SetCrankLength except it accepts a scaled value.
// This method automatically converts the given value to its uint8 form, discarding any applied scale and offset.
//
// Scale: 2; Offset: -110; Units: mm
func (m *BikeProfile) SetCrankLengthScaled(v float64) *BikeProfile {
	m.CrankLength = uint8(scaleoffset.Discard(v, 2, -110))
	return m
}

// SetEnabled sets Enabled value.
func (m *BikeProfile) SetEnabled(v bool) *BikeProfile {
	m.Enabled = v
	return m
}

// SetBikeSpdAntIdTransType sets BikeSpdAntIdTransType value.
func (m *BikeProfile) SetBikeSpdAntIdTransType(v uint8) *BikeProfile {
	m.BikeSpdAntIdTransType = v
	return m
}

// SetBikeCadAntIdTransType sets BikeCadAntIdTransType value.
func (m *BikeProfile) SetBikeCadAntIdTransType(v uint8) *BikeProfile {
	m.BikeCadAntIdTransType = v
	return m
}

// SetBikeSpdcadAntIdTransType sets BikeSpdcadAntIdTransType value.
func (m *BikeProfile) SetBikeSpdcadAntIdTransType(v uint8) *BikeProfile {
	m.BikeSpdcadAntIdTransType = v
	return m
}

// SetBikePowerAntIdTransType sets BikePowerAntIdTransType value.
func (m *BikeProfile) SetBikePowerAntIdTransType(v uint8) *BikeProfile {
	m.BikePowerAntIdTransType = v
	return m
}

// SetOdometerRollover sets OdometerRollover value.
//
// Rollover counter that can be used to extend the odometer
func (m *BikeProfile) SetOdometerRollover(v uint8) *BikeProfile {
	m.OdometerRollover = v
	return m
}

// SetFrontGearNum sets FrontGearNum value.
//
// Number of front gears
func (m *BikeProfile) SetFrontGearNum(v uint8) *BikeProfile {
	m.FrontGearNum = v
	return m
}

// SetFrontGear sets FrontGear value.
//
// Array: [N]; Number of teeth on each gear 0 is innermost
func (m *BikeProfile) SetFrontGear(v []uint8) *BikeProfile {
	m.FrontGear = v
	return m
}

// SetRearGearNum sets RearGearNum value.
//
// Number of rear gears
func (m *BikeProfile) SetRearGearNum(v uint8) *BikeProfile {
	m.RearGearNum = v
	return m
}

// SetRearGear sets RearGear value.
//
// Array: [N]; Number of teeth on each gear 0 is innermost
func (m *BikeProfile) SetRearGear(v []uint8) *BikeProfile {
	m.RearGear = v
	return m
}

// SetShimanoDi2Enabled sets ShimanoDi2Enabled value.
func (m *BikeProfile) SetShimanoDi2Enabled(v bool) *BikeProfile {
	m.ShimanoDi2Enabled = v
	return m
}

// SetDeveloperFields BikeProfile's DeveloperFields.
func (m *BikeProfile) SetDeveloperFields(developerFields ...proto.DeveloperField) *BikeProfile {
	m.DeveloperFields = developerFields
	return m
}
