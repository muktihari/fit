// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/kit/scaleoffset"
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// Jump is a Jump message.
type Jump struct {
	Timestamp     time.Time // Units: s
	Distance      float32   // Units: m
	Height        float32   // Units: m
	HangTime      float32   // Units: s
	Score         float32   // A score for a jump calculated based on hang time, rotations, and distance.
	PositionLat   int32     // Units: semicircles
	PositionLong  int32     // Units: semicircles
	EnhancedSpeed uint32    // Scale: 1000; Units: m/s
	Speed         uint16    // Scale: 1000; Units: m/s
	Rotations     uint8

	IsExpandedFields [9]bool // Used for tracking expanded fields, field.Num as index.

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewJump creates new Jump struct based on given mesg.
// If mesg is nil, it will return Jump with all fields being set to its corresponding invalid value.
func NewJump(mesg *proto.Message) *Jump {
	vals := [254]any{}
	isExpandedFields := [9]bool{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			if mesg.Fields[i].Num < byte(len(isExpandedFields)) {
				isExpandedFields[mesg.Fields[i].Num] = mesg.Fields[i].IsExpandedField
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &Jump{
		Timestamp:     datetime.ToTime(vals[253]),
		Distance:      typeconv.ToFloat32[float32](vals[0]),
		Height:        typeconv.ToFloat32[float32](vals[1]),
		HangTime:      typeconv.ToFloat32[float32](vals[3]),
		Score:         typeconv.ToFloat32[float32](vals[4]),
		PositionLat:   typeconv.ToSint32[int32](vals[5]),
		PositionLong:  typeconv.ToSint32[int32](vals[6]),
		EnhancedSpeed: typeconv.ToUint32[uint32](vals[8]),
		Speed:         typeconv.ToUint16[uint16](vals[7]),
		Rotations:     typeconv.ToUint8[uint8](vals[2]),

		IsExpandedFields: isExpandedFields,

		DeveloperFields: developerFields,
	}
}

// ToMesg converts Jump into proto.Message.
func (m *Jump) ToMesg(fac Factory) proto.Message {
	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := fac.CreateMesgOnly(typedef.MesgNumJump)

	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = datetime.ToUint32(m.Timestamp)
		fields = append(fields, field)
	}
	if typeconv.ToUint32[uint32](m.Distance) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.Distance
		fields = append(fields, field)
	}
	if typeconv.ToUint32[uint32](m.Height) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.Height
		fields = append(fields, field)
	}
	if typeconv.ToUint32[uint32](m.HangTime) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.HangTime
		fields = append(fields, field)
	}
	if typeconv.ToUint32[uint32](m.Score) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.Score
		fields = append(fields, field)
	}
	if m.PositionLat != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.PositionLat
		fields = append(fields, field)
	}
	if m.PositionLong != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.PositionLong
		fields = append(fields, field)
	}
	if m.EnhancedSpeed != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = m.EnhancedSpeed
		field.IsExpandedField = m.IsExpandedFields[8]
		fields = append(fields, field)
	}
	if m.Speed != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = m.Speed
		fields = append(fields, field)
	}
	if m.Rotations != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.Rotations
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// EnhancedSpeedScaled return EnhancedSpeed in its scaled value [Scale: 1000; Units: m/s].
//
// If EnhancedSpeed value is invalid, float64 invalid value will be returned.
func (m *Jump) EnhancedSpeedScaled() float64 {
	if m.EnhancedSpeed == basetype.Uint32Invalid {
		return basetype.Float64InvalidInFloatForm()
	}
	return scaleoffset.Apply(m.EnhancedSpeed, 1000, 0)
}

// SpeedScaled return Speed in its scaled value [Scale: 1000; Units: m/s].
//
// If Speed value is invalid, float64 invalid value will be returned.
func (m *Jump) SpeedScaled() float64 {
	if m.Speed == basetype.Uint16Invalid {
		return basetype.Float64InvalidInFloatForm()
	}
	return scaleoffset.Apply(m.Speed, 1000, 0)
}

// SetTimestamp sets Jump value.
//
// Units: s
func (m *Jump) SetTimestamp(v time.Time) *Jump {
	m.Timestamp = v
	return m
}

// SetDistance sets Jump value.
//
// Units: m
func (m *Jump) SetDistance(v float32) *Jump {
	m.Distance = v
	return m
}

// SetHeight sets Jump value.
//
// Units: m
func (m *Jump) SetHeight(v float32) *Jump {
	m.Height = v
	return m
}

// SetHangTime sets Jump value.
//
// Units: s
func (m *Jump) SetHangTime(v float32) *Jump {
	m.HangTime = v
	return m
}

// SetScore sets Jump value.
//
// A score for a jump calculated based on hang time, rotations, and distance.
func (m *Jump) SetScore(v float32) *Jump {
	m.Score = v
	return m
}

// SetPositionLat sets Jump value.
//
// Units: semicircles
func (m *Jump) SetPositionLat(v int32) *Jump {
	m.PositionLat = v
	return m
}

// SetPositionLong sets Jump value.
//
// Units: semicircles
func (m *Jump) SetPositionLong(v int32) *Jump {
	m.PositionLong = v
	return m
}

// SetEnhancedSpeed sets Jump value.
//
// Scale: 1000; Units: m/s
func (m *Jump) SetEnhancedSpeed(v uint32) *Jump {
	m.EnhancedSpeed = v
	return m
}

// SetSpeed sets Jump value.
//
// Scale: 1000; Units: m/s
func (m *Jump) SetSpeed(v uint16) *Jump {
	m.Speed = v
	return m
}

// SetRotations sets Jump value.
func (m *Jump) SetRotations(v uint8) *Jump {
	m.Rotations = v
	return m
}

// SetDeveloperFields Jump's DeveloperFields.
func (m *Jump) SetDeveloperFields(developerFields ...proto.DeveloperField) *Jump {
	m.DeveloperFields = developerFields
	return m
}
