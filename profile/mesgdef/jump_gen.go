// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Jump is a Jump message.
type Jump struct {
	Timestamp     typedef.DateTime // Units: s;
	Distance      float32          // Units: m;
	Height        float32          // Units: m;
	Rotations     uint8
	HangTime      float32 // Units: s;
	Score         float32 // A score for a jump calculated based on hang time, rotations, and distance.
	PositionLat   int32   // Units: semicircles;
	PositionLong  int32   // Units: semicircles;
	Speed         uint16  // Scale: 1000; Units: m/s;
	EnhancedSpeed uint32  // Scale: 1000; Units: m/s;

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewJump creates new Jump struct based on given mesg. If mesg is nil or mesg.Num is not equal to Jump mesg number, it will return nil.
func NewJump(mesg proto.Message) *Jump {
	if mesg.Num != typedef.MesgNumJump {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Jump{
		Timestamp:     typeconv.ToUint32[typedef.DateTime](vals[253]),
		Distance:      typeconv.ToFloat32[float32](vals[0]),
		Height:        typeconv.ToFloat32[float32](vals[1]),
		Rotations:     typeconv.ToUint8[uint8](vals[2]),
		HangTime:      typeconv.ToFloat32[float32](vals[3]),
		Score:         typeconv.ToFloat32[float32](vals[4]),
		PositionLat:   typeconv.ToSint32[int32](vals[5]),
		PositionLong:  typeconv.ToSint32[int32](vals[6]),
		Speed:         typeconv.ToUint16[uint16](vals[7]),
		EnhancedSpeed: typeconv.ToUint32[uint32](vals[8]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts Jump into proto.Message.
func (m *Jump) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumJump)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.Distance) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.Distance
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.Height) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.Height
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Rotations != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.Rotations
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.HangTime) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.HangTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.Score) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.Score
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.PositionLat != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.PositionLat
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.PositionLong != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.PositionLong
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Speed != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = m.Speed
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EnhancedSpeed != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = m.EnhancedSpeed
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of Jump's valid fields.
func (m *Jump) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.Distance) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.Height) != basetype.Uint32Invalid {
		size++
	}
	if m.Rotations != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.HangTime) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.Score) != basetype.Uint32Invalid {
		size++
	}
	if m.PositionLat != basetype.Sint32Invalid {
		size++
	}
	if m.PositionLong != basetype.Sint32Invalid {
		size++
	}
	if m.Speed != basetype.Uint16Invalid {
		size++
	}
	if m.EnhancedSpeed != basetype.Uint32Invalid {
		size++
	}
	return size
}
