// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/kit/scaleoffset"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"math"
)

// SplitSummary is a SplitSummary message.
type SplitSummary struct {
	TotalTimerTime  uint32 // Scale: 1000; Units: s
	TotalDistance   uint32 // Scale: 100; Units: m
	AvgSpeed        uint32 // Scale: 1000; Units: m/s
	MaxSpeed        uint32 // Scale: 1000; Units: m/s
	AvgVertSpeed    int32  // Scale: 1000; Units: m/s
	TotalCalories   uint32 // Units: kcal
	TotalMovingTime uint32 // Scale: 1000; Units: s
	MessageIndex    typedef.MessageIndex
	NumSplits       uint16
	TotalAscent     uint16 // Units: m
	TotalDescent    uint16 // Units: m
	SplitType       typedef.SplitType
	AvgHeartRate    uint8 // Units: bpm
	MaxHeartRate    uint8 // Units: bpm

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSplitSummary creates new SplitSummary struct based on given mesg.
// If mesg is nil, it will return SplitSummary with all fields being set to its corresponding invalid value.
func NewSplitSummary(mesg *proto.Message) *SplitSummary {
	vals := [255]proto.Value{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &SplitSummary{
		TotalTimerTime:  vals[4].Uint32(),
		TotalDistance:   vals[5].Uint32(),
		AvgSpeed:        vals[6].Uint32(),
		MaxSpeed:        vals[7].Uint32(),
		AvgVertSpeed:    vals[12].Int32(),
		TotalCalories:   vals[13].Uint32(),
		TotalMovingTime: vals[77].Uint32(),
		MessageIndex:    typedef.MessageIndex(vals[254].Uint16()),
		NumSplits:       vals[3].Uint16(),
		TotalAscent:     vals[8].Uint16(),
		TotalDescent:    vals[9].Uint16(),
		SplitType:       typedef.SplitType(vals[0].Uint8()),
		AvgHeartRate:    vals[10].Uint8(),
		MaxHeartRate:    vals[11].Uint8(),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts SplitSummary into proto.Message. If options is nil, default options will be used.
func (m *SplitSummary) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := proto.Message{Num: typedef.MesgNumSplitSummary}

	if m.TotalTimerTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = proto.Uint32(m.TotalTimerTime)
		fields = append(fields, field)
	}
	if m.TotalDistance != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = proto.Uint32(m.TotalDistance)
		fields = append(fields, field)
	}
	if m.AvgSpeed != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = proto.Uint32(m.AvgSpeed)
		fields = append(fields, field)
	}
	if m.MaxSpeed != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = proto.Uint32(m.MaxSpeed)
		fields = append(fields, field)
	}
	if m.AvgVertSpeed != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 12)
		field.Value = proto.Int32(m.AvgVertSpeed)
		fields = append(fields, field)
	}
	if m.TotalCalories != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 13)
		field.Value = proto.Uint32(m.TotalCalories)
		fields = append(fields, field)
	}
	if m.TotalMovingTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 77)
		field.Value = proto.Uint32(m.TotalMovingTime)
		fields = append(fields, field)
	}
	if uint16(m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = proto.Uint16(uint16(m.MessageIndex))
		fields = append(fields, field)
	}
	if m.NumSplits != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = proto.Uint16(m.NumSplits)
		fields = append(fields, field)
	}
	if m.TotalAscent != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = proto.Uint16(m.TotalAscent)
		fields = append(fields, field)
	}
	if m.TotalDescent != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = proto.Uint16(m.TotalDescent)
		fields = append(fields, field)
	}
	if byte(m.SplitType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = proto.Uint8(byte(m.SplitType))
		fields = append(fields, field)
	}
	if m.AvgHeartRate != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = proto.Uint8(m.AvgHeartRate)
		fields = append(fields, field)
	}
	if m.MaxHeartRate != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 11)
		field.Value = proto.Uint8(m.MaxHeartRate)
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// TotalTimerTimeScaled return TotalTimerTime in its scaled value [Scale: 1000; Units: s].
//
// If TotalTimerTime value is invalid, float64 invalid value will be returned.
func (m *SplitSummary) TotalTimerTimeScaled() float64 {
	if m.TotalTimerTime == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return scaleoffset.Apply(m.TotalTimerTime, 1000, 0)
}

// TotalDistanceScaled return TotalDistance in its scaled value [Scale: 100; Units: m].
//
// If TotalDistance value is invalid, float64 invalid value will be returned.
func (m *SplitSummary) TotalDistanceScaled() float64 {
	if m.TotalDistance == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return scaleoffset.Apply(m.TotalDistance, 100, 0)
}

// AvgSpeedScaled return AvgSpeed in its scaled value [Scale: 1000; Units: m/s].
//
// If AvgSpeed value is invalid, float64 invalid value will be returned.
func (m *SplitSummary) AvgSpeedScaled() float64 {
	if m.AvgSpeed == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return scaleoffset.Apply(m.AvgSpeed, 1000, 0)
}

// MaxSpeedScaled return MaxSpeed in its scaled value [Scale: 1000; Units: m/s].
//
// If MaxSpeed value is invalid, float64 invalid value will be returned.
func (m *SplitSummary) MaxSpeedScaled() float64 {
	if m.MaxSpeed == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return scaleoffset.Apply(m.MaxSpeed, 1000, 0)
}

// AvgVertSpeedScaled return AvgVertSpeed in its scaled value [Scale: 1000; Units: m/s].
//
// If AvgVertSpeed value is invalid, float64 invalid value will be returned.
func (m *SplitSummary) AvgVertSpeedScaled() float64 {
	if m.AvgVertSpeed == basetype.Sint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return scaleoffset.Apply(m.AvgVertSpeed, 1000, 0)
}

// TotalMovingTimeScaled return TotalMovingTime in its scaled value [Scale: 1000; Units: s].
//
// If TotalMovingTime value is invalid, float64 invalid value will be returned.
func (m *SplitSummary) TotalMovingTimeScaled() float64 {
	if m.TotalMovingTime == basetype.Uint32Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return scaleoffset.Apply(m.TotalMovingTime, 1000, 0)
}

// SetTotalTimerTime sets SplitSummary value.
//
// Scale: 1000; Units: s
func (m *SplitSummary) SetTotalTimerTime(v uint32) *SplitSummary {
	m.TotalTimerTime = v
	return m
}

// SetTotalDistance sets SplitSummary value.
//
// Scale: 100; Units: m
func (m *SplitSummary) SetTotalDistance(v uint32) *SplitSummary {
	m.TotalDistance = v
	return m
}

// SetAvgSpeed sets SplitSummary value.
//
// Scale: 1000; Units: m/s
func (m *SplitSummary) SetAvgSpeed(v uint32) *SplitSummary {
	m.AvgSpeed = v
	return m
}

// SetMaxSpeed sets SplitSummary value.
//
// Scale: 1000; Units: m/s
func (m *SplitSummary) SetMaxSpeed(v uint32) *SplitSummary {
	m.MaxSpeed = v
	return m
}

// SetAvgVertSpeed sets SplitSummary value.
//
// Scale: 1000; Units: m/s
func (m *SplitSummary) SetAvgVertSpeed(v int32) *SplitSummary {
	m.AvgVertSpeed = v
	return m
}

// SetTotalCalories sets SplitSummary value.
//
// Units: kcal
func (m *SplitSummary) SetTotalCalories(v uint32) *SplitSummary {
	m.TotalCalories = v
	return m
}

// SetTotalMovingTime sets SplitSummary value.
//
// Scale: 1000; Units: s
func (m *SplitSummary) SetTotalMovingTime(v uint32) *SplitSummary {
	m.TotalMovingTime = v
	return m
}

// SetMessageIndex sets SplitSummary value.
func (m *SplitSummary) SetMessageIndex(v typedef.MessageIndex) *SplitSummary {
	m.MessageIndex = v
	return m
}

// SetNumSplits sets SplitSummary value.
func (m *SplitSummary) SetNumSplits(v uint16) *SplitSummary {
	m.NumSplits = v
	return m
}

// SetTotalAscent sets SplitSummary value.
//
// Units: m
func (m *SplitSummary) SetTotalAscent(v uint16) *SplitSummary {
	m.TotalAscent = v
	return m
}

// SetTotalDescent sets SplitSummary value.
//
// Units: m
func (m *SplitSummary) SetTotalDescent(v uint16) *SplitSummary {
	m.TotalDescent = v
	return m
}

// SetSplitType sets SplitSummary value.
func (m *SplitSummary) SetSplitType(v typedef.SplitType) *SplitSummary {
	m.SplitType = v
	return m
}

// SetAvgHeartRate sets SplitSummary value.
//
// Units: bpm
func (m *SplitSummary) SetAvgHeartRate(v uint8) *SplitSummary {
	m.AvgHeartRate = v
	return m
}

// SetMaxHeartRate sets SplitSummary value.
//
// Units: bpm
func (m *SplitSummary) SetMaxHeartRate(v uint8) *SplitSummary {
	m.MaxHeartRate = v
	return m
}

// SetDeveloperFields SplitSummary's DeveloperFields.
func (m *SplitSummary) SetDeveloperFields(developerFields ...proto.DeveloperField) *SplitSummary {
	m.DeveloperFields = developerFields
	return m
}
