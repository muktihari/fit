// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// SplitSummary is a SplitSummary message.
type SplitSummary struct {
	MessageIndex    typedef.MessageIndex
	SplitType       typedef.SplitType
	NumSplits       uint16
	TotalTimerTime  uint32 // Scale: 1000; Units: s;
	TotalDistance   uint32 // Scale: 100; Units: m;
	AvgSpeed        uint32 // Scale: 1000; Units: m/s;
	MaxSpeed        uint32 // Scale: 1000; Units: m/s;
	TotalAscent     uint16 // Units: m;
	TotalDescent    uint16 // Units: m;
	AvgHeartRate    uint8  // Units: bpm;
	MaxHeartRate    uint8  // Units: bpm;
	AvgVertSpeed    int32  // Scale: 1000; Units: m/s;
	TotalCalories   uint32 // Units: kcal;
	TotalMovingTime uint32 // Scale: 1000; Units: s;

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSplitSummary creates new SplitSummary struct based on given mesg. If mesg is nil or mesg.Num is not equal to SplitSummary mesg number, it will return nil.
func NewSplitSummary(mesg proto.Message) *SplitSummary {
	if mesg.Num != typedef.MesgNumSplitSummary {
		return nil
	}

	vals := [256]any{ // Mark all values as invalid, replace only when specified.
		254: basetype.Uint16Invalid, /* MessageIndex */
		0:   basetype.EnumInvalid,   /* SplitType */
		3:   basetype.Uint16Invalid, /* NumSplits */
		4:   basetype.Uint32Invalid, /* TotalTimerTime */
		5:   basetype.Uint32Invalid, /* TotalDistance */
		6:   basetype.Uint32Invalid, /* AvgSpeed */
		7:   basetype.Uint32Invalid, /* MaxSpeed */
		8:   basetype.Uint16Invalid, /* TotalAscent */
		9:   basetype.Uint16Invalid, /* TotalDescent */
		10:  basetype.Uint8Invalid,  /* AvgHeartRate */
		11:  basetype.Uint8Invalid,  /* MaxHeartRate */
		12:  basetype.Sint32Invalid, /* AvgVertSpeed */
		13:  basetype.Uint32Invalid, /* TotalCalories */
		77:  basetype.Uint32Invalid, /* TotalMovingTime */
	}

	for i := range mesg.Fields {
		if mesg.Fields[i].Value == nil {
			continue // keep the invalid value
		}
		vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
	}

	return &SplitSummary{
		MessageIndex:    typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		SplitType:       typeconv.ToEnum[typedef.SplitType](vals[0]),
		NumSplits:       typeconv.ToUint16[uint16](vals[3]),
		TotalTimerTime:  typeconv.ToUint32[uint32](vals[4]),
		TotalDistance:   typeconv.ToUint32[uint32](vals[5]),
		AvgSpeed:        typeconv.ToUint32[uint32](vals[6]),
		MaxSpeed:        typeconv.ToUint32[uint32](vals[7]),
		TotalAscent:     typeconv.ToUint16[uint16](vals[8]),
		TotalDescent:    typeconv.ToUint16[uint16](vals[9]),
		AvgHeartRate:    typeconv.ToUint8[uint8](vals[10]),
		MaxHeartRate:    typeconv.ToUint8[uint8](vals[11]),
		AvgVertSpeed:    typeconv.ToSint32[int32](vals[12]),
		TotalCalories:   typeconv.ToUint32[uint32](vals[13]),
		TotalMovingTime: typeconv.ToUint32[uint32](vals[77]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to SplitSummary mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumSplitSummary)
func (m SplitSummary) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumSplitSummary {
		return
	}

	vals := [256]any{
		254: m.MessageIndex,
		0:   m.SplitType,
		3:   m.NumSplits,
		4:   m.TotalTimerTime,
		5:   m.TotalDistance,
		6:   m.AvgSpeed,
		7:   m.MaxSpeed,
		8:   m.TotalAscent,
		9:   m.TotalDescent,
		10:  m.AvgHeartRate,
		11:  m.MaxHeartRate,
		12:  m.AvgVertSpeed,
		13:  m.TotalCalories,
		77:  m.TotalMovingTime,
	}

	for i := range mesg.Fields {
		mesg.Fields[i].Value = vals[mesg.Fields[i].Num]
	}
	mesg.DeveloperFields = m.DeveloperFields

}
