// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.115

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// MemoGlob is a MemoGlob message.
type MemoGlob struct {
	PartIndex   uint32               // Sequence number of memo blocks
	Memo        []byte               // Array: [N]; Deprecated. Use data field.
	MesgNum     typedef.MesgNum      // Message Number of the parent message
	ParentIndex typedef.MessageIndex // Index of mesg that this glob is associated with.
	FieldNum    uint8                // Field within the parent that this glob is associated with
	Data        []uint8              // Array: [N]; Block of utf8 bytes. Note, mutltibyte characters may be split across adjoining memo_glob messages.

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewMemoGlob creates new MemoGlob struct based on given mesg. If mesg is nil or mesg.Num is not equal to MemoGlob mesg number, it will return nil.
func NewMemoGlob(mesg proto.Message) *MemoGlob {
	if mesg.Num != typedef.MesgNumMemoGlob {
		return nil
	}

	vals := [256]any{ // Mark all values as invalid, replace only when specified.
		250: basetype.Uint32Invalid, /* PartIndex */
		0:   nil,                    /* Memo */
		1:   basetype.Uint16Invalid, /* MesgNum */
		2:   basetype.Uint16Invalid, /* ParentIndex */
		3:   basetype.Uint8Invalid,  /* FieldNum */
		4:   nil,                    /* Data */
	}

	for i := range mesg.Fields {
		if mesg.Fields[i].Value == nil {
			continue // keep the invalid value
		}
		vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
	}

	return &MemoGlob{
		PartIndex:   typeconv.ToUint32[uint32](vals[250]),
		Memo:        typeconv.ToSliceByte[byte](vals[0]),
		MesgNum:     typeconv.ToUint16[typedef.MesgNum](vals[1]),
		ParentIndex: typeconv.ToUint16[typedef.MessageIndex](vals[2]),
		FieldNum:    typeconv.ToUint8[uint8](vals[3]),
		Data:        typeconv.ToSliceUint8z[uint8](vals[4]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to MemoGlob mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumMemoGlob)
func (m MemoGlob) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumMemoGlob {
		return
	}

	vals := [256]any{
		250: m.PartIndex,
		0:   m.Memo,
		1:   m.MesgNum,
		2:   m.ParentIndex,
		3:   m.FieldNum,
		4:   m.Data,
	}

	for i := range mesg.Fields {
		mesg.Fields[i].Value = vals[mesg.Fields[i].Num]
	}
	mesg.DeveloperFields = m.DeveloperFields

}
