// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// CadenceZone is a CadenceZone message.
type CadenceZone struct {
	MessageIndex typedef.MessageIndex
	HighValue    uint8 // Units: rpm;
	Name         string

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewCadenceZone creates new CadenceZone struct based on given mesg.
// If mesg is nil, it will return CadenceZone with all fields being set to its corresponding invalid value.
func NewCadenceZone(mesg *proto.Message) *CadenceZone {
	vals := [255]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &CadenceZone{
		MessageIndex: typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		HighValue:    typeconv.ToUint8[uint8](vals[0]),
		Name:         typeconv.ToString[string](vals[1]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts CadenceZone into proto.Message.
func (m *CadenceZone) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumCadenceZone)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = typeconv.ToUint16[uint16](m.MessageIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.HighValue != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.HighValue
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.Name
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of CadenceZone's valid fields.
func (m *CadenceZone) size() byte {
	var size byte
	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		size++
	}
	if m.HighValue != basetype.Uint8Invalid {
		size++
	}
	if m.Name != basetype.StringInvalid && m.Name != "" {
		size++
	}
	return size
}

// SetMessageIndex sets CadenceZone value.
func (m *CadenceZone) SetMessageIndex(v typedef.MessageIndex) *CadenceZone {
	m.MessageIndex = v
	return m
}

// SetHighValue sets CadenceZone value.
//
// Units: rpm;
func (m *CadenceZone) SetHighValue(v uint8) *CadenceZone {
	m.HighValue = v
	return m
}

// SetName sets CadenceZone value.
func (m *CadenceZone) SetName(v string) *CadenceZone {
	m.Name = v
	return m
}

// SetDeveloperFields CadenceZone's DeveloperFields.
func (m *CadenceZone) SetDeveloperFields(developerFields ...proto.DeveloperField) *CadenceZone {
	m.DeveloperFields = developerFields
	return m
}
