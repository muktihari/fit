// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Split is a Split message.
type Split struct {
	MessageIndex      typedef.MessageIndex
	SplitType         typedef.SplitType
	TotalElapsedTime  uint32 // Scale: 1000; Units: s;
	TotalTimerTime    uint32 // Scale: 1000; Units: s;
	TotalDistance     uint32 // Scale: 100; Units: m;
	AvgSpeed          uint32 // Scale: 1000; Units: m/s;
	StartTime         typedef.DateTime
	TotalAscent       uint16 // Units: m;
	TotalDescent      uint16 // Units: m;
	StartPositionLat  int32  // Units: semicircles;
	StartPositionLong int32  // Units: semicircles;
	EndPositionLat    int32  // Units: semicircles;
	EndPositionLong   int32  // Units: semicircles;
	MaxSpeed          uint32 // Scale: 1000; Units: m/s;
	AvgVertSpeed      int32  // Scale: 1000; Units: m/s;
	EndTime           typedef.DateTime
	TotalCalories     uint32 // Units: kcal;
	StartElevation    uint32 // Scale: 5; Offset: 500; Units: m;
	TotalMovingTime   uint32 // Scale: 1000; Units: s;

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSplit creates new Split struct based on given mesg. If mesg is nil or mesg.Num is not equal to Split mesg number, it will return nil.
func NewSplit(mesg proto.Message) *Split {
	if mesg.Num != typedef.MesgNumSplit {
		return nil
	}

	vals := [255]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Split{
		MessageIndex:      typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		SplitType:         typeconv.ToEnum[typedef.SplitType](vals[0]),
		TotalElapsedTime:  typeconv.ToUint32[uint32](vals[1]),
		TotalTimerTime:    typeconv.ToUint32[uint32](vals[2]),
		TotalDistance:     typeconv.ToUint32[uint32](vals[3]),
		AvgSpeed:          typeconv.ToUint32[uint32](vals[4]),
		StartTime:         typeconv.ToUint32[typedef.DateTime](vals[9]),
		TotalAscent:       typeconv.ToUint16[uint16](vals[13]),
		TotalDescent:      typeconv.ToUint16[uint16](vals[14]),
		StartPositionLat:  typeconv.ToSint32[int32](vals[21]),
		StartPositionLong: typeconv.ToSint32[int32](vals[22]),
		EndPositionLat:    typeconv.ToSint32[int32](vals[23]),
		EndPositionLong:   typeconv.ToSint32[int32](vals[24]),
		MaxSpeed:          typeconv.ToUint32[uint32](vals[25]),
		AvgVertSpeed:      typeconv.ToSint32[int32](vals[26]),
		EndTime:           typeconv.ToUint32[typedef.DateTime](vals[27]),
		TotalCalories:     typeconv.ToUint32[uint32](vals[28]),
		StartElevation:    typeconv.ToUint32[uint32](vals[74]),
		TotalMovingTime:   typeconv.ToUint32[uint32](vals[110]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts Split into proto.Message.
func (m *Split) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumSplit)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = typeconv.ToUint16[uint16](m.MessageIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.SplitType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = typeconv.ToEnum[byte](m.SplitType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalElapsedTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.TotalElapsedTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalTimerTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.TotalTimerTime
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalDistance != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.TotalDistance
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgSpeed != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.AvgSpeed
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.StartTime) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = typeconv.ToUint32[uint32](m.StartTime)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalAscent != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 13)
		field.Value = m.TotalAscent
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalDescent != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 14)
		field.Value = m.TotalDescent
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.StartPositionLat != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 21)
		field.Value = m.StartPositionLat
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.StartPositionLong != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 22)
		field.Value = m.StartPositionLong
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EndPositionLat != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 23)
		field.Value = m.EndPositionLat
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EndPositionLong != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 24)
		field.Value = m.EndPositionLong
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxSpeed != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 25)
		field.Value = m.MaxSpeed
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.AvgVertSpeed != basetype.Sint32Invalid {
		field := fac.CreateField(mesg.Num, 26)
		field.Value = m.AvgVertSpeed
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.EndTime) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 27)
		field.Value = typeconv.ToUint32[uint32](m.EndTime)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalCalories != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 28)
		field.Value = m.TotalCalories
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.StartElevation != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 74)
		field.Value = m.StartElevation
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TotalMovingTime != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 110)
		field.Value = m.TotalMovingTime
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of Split's valid fields.
func (m *Split) size() byte {
	var size byte
	if typeconv.ToUint16[uint16](m.MessageIndex) != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.SplitType) != basetype.EnumInvalid {
		size++
	}
	if m.TotalElapsedTime != basetype.Uint32Invalid {
		size++
	}
	if m.TotalTimerTime != basetype.Uint32Invalid {
		size++
	}
	if m.TotalDistance != basetype.Uint32Invalid {
		size++
	}
	if m.AvgSpeed != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.StartTime) != basetype.Uint32Invalid {
		size++
	}
	if m.TotalAscent != basetype.Uint16Invalid {
		size++
	}
	if m.TotalDescent != basetype.Uint16Invalid {
		size++
	}
	if m.StartPositionLat != basetype.Sint32Invalid {
		size++
	}
	if m.StartPositionLong != basetype.Sint32Invalid {
		size++
	}
	if m.EndPositionLat != basetype.Sint32Invalid {
		size++
	}
	if m.EndPositionLong != basetype.Sint32Invalid {
		size++
	}
	if m.MaxSpeed != basetype.Uint32Invalid {
		size++
	}
	if m.AvgVertSpeed != basetype.Sint32Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.EndTime) != basetype.Uint32Invalid {
		size++
	}
	if m.TotalCalories != basetype.Uint32Invalid {
		size++
	}
	if m.StartElevation != basetype.Uint32Invalid {
		size++
	}
	if m.TotalMovingTime != basetype.Uint32Invalid {
		size++
	}
	return size
}
