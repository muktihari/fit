// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Split is a Split message.
type Split struct {
	MessageIndex      typedef.MessageIndex
	SplitType         typedef.SplitType
	TotalElapsedTime  uint32 // Scale: 1000; Units: s;
	TotalTimerTime    uint32 // Scale: 1000; Units: s;
	TotalDistance     uint32 // Scale: 100; Units: m;
	AvgSpeed          uint32 // Scale: 1000; Units: m/s;
	StartTime         typedef.DateTime
	TotalAscent       uint16 // Units: m;
	TotalDescent      uint16 // Units: m;
	StartPositionLat  int32  // Units: semicircles;
	StartPositionLong int32  // Units: semicircles;
	EndPositionLat    int32  // Units: semicircles;
	EndPositionLong   int32  // Units: semicircles;
	MaxSpeed          uint32 // Scale: 1000; Units: m/s;
	AvgVertSpeed      int32  // Scale: 1000; Units: m/s;
	EndTime           typedef.DateTime
	TotalCalories     uint32 // Units: kcal;
	StartElevation    uint32 // Scale: 5; Offset: 500; Units: m;
	TotalMovingTime   uint32 // Scale: 1000; Units: s;

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewSplit creates new Split struct based on given mesg. If mesg is nil or mesg.Num is not equal to Split mesg number, it will return nil.
func NewSplit(mesg proto.Message) *Split {
	if mesg.Num != typedef.MesgNumSplit {
		return nil
	}

	vals := [...]any{ // nil value will be converted to its corresponding invalid value by typeconv.
		254: nil, /* MessageIndex */
		0:   nil, /* SplitType */
		1:   nil, /* TotalElapsedTime */
		2:   nil, /* TotalTimerTime */
		3:   nil, /* TotalDistance */
		4:   nil, /* AvgSpeed */
		9:   nil, /* StartTime */
		13:  nil, /* TotalAscent */
		14:  nil, /* TotalDescent */
		21:  nil, /* StartPositionLat */
		22:  nil, /* StartPositionLong */
		23:  nil, /* EndPositionLat */
		24:  nil, /* EndPositionLong */
		25:  nil, /* MaxSpeed */
		26:  nil, /* AvgVertSpeed */
		27:  nil, /* EndTime */
		28:  nil, /* TotalCalories */
		74:  nil, /* StartElevation */
		110: nil, /* TotalMovingTime */
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Split{
		MessageIndex:      typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		SplitType:         typeconv.ToEnum[typedef.SplitType](vals[0]),
		TotalElapsedTime:  typeconv.ToUint32[uint32](vals[1]),
		TotalTimerTime:    typeconv.ToUint32[uint32](vals[2]),
		TotalDistance:     typeconv.ToUint32[uint32](vals[3]),
		AvgSpeed:          typeconv.ToUint32[uint32](vals[4]),
		StartTime:         typeconv.ToUint32[typedef.DateTime](vals[9]),
		TotalAscent:       typeconv.ToUint16[uint16](vals[13]),
		TotalDescent:      typeconv.ToUint16[uint16](vals[14]),
		StartPositionLat:  typeconv.ToSint32[int32](vals[21]),
		StartPositionLong: typeconv.ToSint32[int32](vals[22]),
		EndPositionLat:    typeconv.ToSint32[int32](vals[23]),
		EndPositionLong:   typeconv.ToSint32[int32](vals[24]),
		MaxSpeed:          typeconv.ToUint32[uint32](vals[25]),
		AvgVertSpeed:      typeconv.ToSint32[int32](vals[26]),
		EndTime:           typeconv.ToUint32[typedef.DateTime](vals[27]),
		TotalCalories:     typeconv.ToUint32[uint32](vals[28]),
		StartElevation:    typeconv.ToUint32[uint32](vals[74]),
		TotalMovingTime:   typeconv.ToUint32[uint32](vals[110]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to Split mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumSplit)
func (m Split) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumSplit {
		return
	}

	vals := [...]any{
		254: m.MessageIndex,
		0:   m.SplitType,
		1:   m.TotalElapsedTime,
		2:   m.TotalTimerTime,
		3:   m.TotalDistance,
		4:   m.AvgSpeed,
		9:   m.StartTime,
		13:  m.TotalAscent,
		14:  m.TotalDescent,
		21:  m.StartPositionLat,
		22:  m.StartPositionLong,
		23:  m.EndPositionLat,
		24:  m.EndPositionLong,
		25:  m.MaxSpeed,
		26:  m.AvgVertSpeed,
		27:  m.EndTime,
		28:  m.TotalCalories,
		74:  m.StartElevation,
		110: m.TotalMovingTime,
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		field.Value = vals[field.Num]
	}

	mesg.DeveloperFields = m.DeveloperFields
}
