// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.115

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// VideoClip is a VideoClip message.
type VideoClip struct {
	ClipNumber       uint16
	StartTimestamp   typedef.DateTime
	StartTimestampMs uint16
	EndTimestamp     typedef.DateTime
	EndTimestampMs   uint16
	ClipStart        uint32 // Units: ms; Start of clip in video time
	ClipEnd          uint32 // Units: ms; End of clip in video time

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewVideoClip creates new VideoClip struct based on given mesg. If mesg is nil or mesg.Num is not equal to VideoClip mesg number, it will return nil.
func NewVideoClip(mesg proto.Message) *VideoClip {
	if mesg.Num != typedef.MesgNumVideoClip {
		return nil
	}

	vals := [256]any{ // Mark all values as invalid, replace only when specified.
		0: basetype.Uint16Invalid, /* ClipNumber */
		1: basetype.Uint32Invalid, /* StartTimestamp */
		2: basetype.Uint16Invalid, /* StartTimestampMs */
		3: basetype.Uint32Invalid, /* EndTimestamp */
		4: basetype.Uint16Invalid, /* EndTimestampMs */
		6: basetype.Uint32Invalid, /* ClipStart */
		7: basetype.Uint32Invalid, /* ClipEnd */
	}

	for i := range mesg.Fields {
		if mesg.Fields[i].Value == nil {
			continue // keep the invalid value
		}
		vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
	}

	return &VideoClip{
		ClipNumber:       typeconv.ToUint16[uint16](vals[0]),
		StartTimestamp:   typeconv.ToUint32[typedef.DateTime](vals[1]),
		StartTimestampMs: typeconv.ToUint16[uint16](vals[2]),
		EndTimestamp:     typeconv.ToUint32[typedef.DateTime](vals[3]),
		EndTimestampMs:   typeconv.ToUint16[uint16](vals[4]),
		ClipStart:        typeconv.ToUint32[uint32](vals[6]),
		ClipEnd:          typeconv.ToUint32[uint32](vals[7]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to VideoClip mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumVideoClip)
func (m VideoClip) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumVideoClip {
		return
	}

	vals := [256]any{
		0: m.ClipNumber,
		1: m.StartTimestamp,
		2: m.StartTimestampMs,
		3: m.EndTimestamp,
		4: m.EndTimestampMs,
		6: m.ClipStart,
		7: m.ClipEnd,
	}

	for i := range mesg.Fields {
		mesg.Fields[i].Value = vals[mesg.Fields[i].Num]
	}
	mesg.DeveloperFields = m.DeveloperFields

}
