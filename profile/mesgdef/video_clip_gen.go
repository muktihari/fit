// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// VideoClip is a VideoClip message.
type VideoClip struct {
	ClipNumber       uint16
	StartTimestamp   typedef.DateTime
	StartTimestampMs uint16
	EndTimestamp     typedef.DateTime
	EndTimestampMs   uint16
	ClipStart        uint32 // Units: ms; Start of clip in video time
	ClipEnd          uint32 // Units: ms; End of clip in video time

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewVideoClip creates new VideoClip struct based on given mesg. If mesg is nil or mesg.Num is not equal to VideoClip mesg number, it will return nil.
func NewVideoClip(mesg proto.Message) *VideoClip {
	if mesg.Num != typedef.MesgNumVideoClip {
		return nil
	}

	vals := [8]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &VideoClip{
		ClipNumber:       typeconv.ToUint16[uint16](vals[0]),
		StartTimestamp:   typeconv.ToUint32[typedef.DateTime](vals[1]),
		StartTimestampMs: typeconv.ToUint16[uint16](vals[2]),
		EndTimestamp:     typeconv.ToUint32[typedef.DateTime](vals[3]),
		EndTimestampMs:   typeconv.ToUint16[uint16](vals[4]),
		ClipStart:        typeconv.ToUint32[uint32](vals[6]),
		ClipEnd:          typeconv.ToUint32[uint32](vals[7]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts VideoClip into proto.Message.
func (m *VideoClip) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumVideoClip)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if m.ClipNumber != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.ClipNumber
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.StartTimestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = typeconv.ToUint32[uint32](m.StartTimestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.StartTimestampMs != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.StartTimestampMs
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint32[uint32](m.EndTimestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = typeconv.ToUint32[uint32](m.EndTimestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.EndTimestampMs != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.EndTimestampMs
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ClipStart != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.ClipStart
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ClipEnd != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = m.ClipEnd
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of VideoClip's valid fields.
func (m *VideoClip) size() byte {
	var size byte
	if m.ClipNumber != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.StartTimestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.StartTimestampMs != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint32[uint32](m.EndTimestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.EndTimestampMs != basetype.Uint16Invalid {
		size++
	}
	if m.ClipStart != basetype.Uint32Invalid {
		size++
	}
	if m.ClipEnd != basetype.Uint32Invalid {
		size++
	}
	return size
}
