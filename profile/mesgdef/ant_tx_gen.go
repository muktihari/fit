// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/kit/scaleoffset"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"math"
	"time"
)

// AntTx is a AntTx message.
type AntTx struct {
	Timestamp           time.Time // Units: s
	MesgData            []byte    // Array: [N]
	Data                []byte    // Array: [N]
	FractionalTimestamp uint16    // Scale: 32768; Units: s
	MesgId              byte
	ChannelNumber       uint8

	IsExpandedFields [5]bool // Used for tracking expanded fields, field.Num as index.

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewAntTx creates new AntTx struct based on given mesg.
// If mesg is nil, it will return AntTx with all fields being set to its corresponding invalid value.
func NewAntTx(mesg *proto.Message) *AntTx {
	vals := [254]proto.Value{}
	isExpandedFields := [5]bool{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			if mesg.Fields[i].Num < byte(len(isExpandedFields)) {
				isExpandedFields[mesg.Fields[i].Num] = mesg.Fields[i].IsExpandedField
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &AntTx{
		Timestamp:           datetime.ToTime(vals[253].Uint32()),
		MesgData:            vals[2].SliceUint8(),
		Data:                vals[4].SliceUint8(),
		FractionalTimestamp: vals[0].Uint16(),
		MesgId:              vals[1].Uint8(),
		ChannelNumber:       vals[3].Uint8(),

		IsExpandedFields: isExpandedFields,

		DeveloperFields: developerFields,
	}
}

// ToMesg converts AntTx into proto.Message. If options is nil, default options will be used.
func (m *AntTx) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := proto.Message{Num: typedef.MesgNumAntTx}

	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = proto.Uint32(datetime.ToUint32(m.Timestamp))
		fields = append(fields, field)
	}
	if m.MesgData != nil {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = proto.SliceUint8(m.MesgData)
		fields = append(fields, field)
	}
	if m.Data != nil && ((m.IsExpandedFields[4] && options.IncludeExpandedFields) || !m.IsExpandedFields[4]) {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = proto.SliceUint8(m.Data)
		field.IsExpandedField = m.IsExpandedFields[4]
		fields = append(fields, field)
	}
	if m.FractionalTimestamp != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = proto.Uint16(m.FractionalTimestamp)
		fields = append(fields, field)
	}
	if m.MesgId != basetype.ByteInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = proto.Uint8(m.MesgId)
		fields = append(fields, field)
	}
	if m.ChannelNumber != basetype.Uint8Invalid && ((m.IsExpandedFields[3] && options.IncludeExpandedFields) || !m.IsExpandedFields[3]) {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = proto.Uint8(m.ChannelNumber)
		field.IsExpandedField = m.IsExpandedFields[3]
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// FractionalTimestampScaled return FractionalTimestamp in its scaled value [Scale: 32768; Units: s].
//
// If FractionalTimestamp value is invalid, float64 invalid value will be returned.
func (m *AntTx) FractionalTimestampScaled() float64 {
	if m.FractionalTimestamp == basetype.Uint16Invalid {
		return math.Float64frombits(basetype.Float64Invalid)
	}
	return scaleoffset.Apply(m.FractionalTimestamp, 32768, 0)
}

// SetTimestamp sets AntTx value.
//
// Units: s
func (m *AntTx) SetTimestamp(v time.Time) *AntTx {
	m.Timestamp = v
	return m
}

// SetMesgData sets AntTx value.
//
// Array: [N]
func (m *AntTx) SetMesgData(v []byte) *AntTx {
	m.MesgData = v
	return m
}

// SetData sets AntTx value.
//
// Array: [N]
func (m *AntTx) SetData(v []byte) *AntTx {
	m.Data = v
	return m
}

// SetFractionalTimestamp sets AntTx value.
//
// Scale: 32768; Units: s
func (m *AntTx) SetFractionalTimestamp(v uint16) *AntTx {
	m.FractionalTimestamp = v
	return m
}

// SetMesgId sets AntTx value.
func (m *AntTx) SetMesgId(v byte) *AntTx {
	m.MesgId = v
	return m
}

// SetChannelNumber sets AntTx value.
func (m *AntTx) SetChannelNumber(v uint8) *AntTx {
	m.ChannelNumber = v
	return m
}

// SetDeveloperFields AntTx's DeveloperFields.
func (m *AntTx) SetDeveloperFields(developerFields ...proto.DeveloperField) *AntTx {
	m.DeveloperFields = developerFields
	return m
}
