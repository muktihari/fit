// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/factory"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// WatchfaceSettings is a WatchfaceSettings message.
type WatchfaceSettings struct {
	MessageIndex typedef.MessageIndex
	Mode         typedef.WatchfaceMode
	Layout       byte

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewWatchfaceSettings creates new WatchfaceSettings struct based on given mesg.
// If mesg is nil, it will return WatchfaceSettings with all fields being set to its corresponding invalid value.
func NewWatchfaceSettings(mesg *proto.Message) *WatchfaceSettings {
	vals := [255]proto.Value{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &WatchfaceSettings{
		MessageIndex: typedef.MessageIndex(vals[254].Uint16()),
		Mode:         typedef.WatchfaceMode(vals[0].Uint8()),
		Layout:       vals[1].Uint8(),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts WatchfaceSettings into proto.Message. If options is nil, default options will be used.
func (m *WatchfaceSettings) ToMesg(options *Options) proto.Message {
	if options == nil {
		options = defaultOptions
	} else if options.Factory == nil {
		options.Factory = factory.StandardFactory()
	}

	fac := options.Factory

	fieldsArray := fieldsPool.Get().(*[256]proto.Field)
	defer fieldsPool.Put(fieldsArray)

	fields := (*fieldsArray)[:0] // Create slice from array with zero len.
	mesg := proto.Message{Num: typedef.MesgNumWatchfaceSettings}

	if uint16(m.MessageIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 254)
		field.Value = proto.Uint16(uint16(m.MessageIndex))
		fields = append(fields, field)
	}
	if byte(m.Mode) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = proto.Uint8(byte(m.Mode))
		fields = append(fields, field)
	}
	if m.Layout != basetype.ByteInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = proto.Uint8(m.Layout)
		fields = append(fields, field)
	}

	mesg.Fields = make([]proto.Field, len(fields))
	copy(mesg.Fields, fields)

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// SetMessageIndex sets WatchfaceSettings value.
func (m *WatchfaceSettings) SetMessageIndex(v typedef.MessageIndex) *WatchfaceSettings {
	m.MessageIndex = v
	return m
}

// SetMode sets WatchfaceSettings value.
func (m *WatchfaceSettings) SetMode(v typedef.WatchfaceMode) *WatchfaceSettings {
	m.Mode = v
	return m
}

// SetLayout sets WatchfaceSettings value.
func (m *WatchfaceSettings) SetLayout(v byte) *WatchfaceSettings {
	m.Layout = v
	return m
}

// SetDeveloperFields WatchfaceSettings's DeveloperFields.
func (m *WatchfaceSettings) SetDeveloperFields(developerFields ...proto.DeveloperField) *WatchfaceSettings {
	m.DeveloperFields = developerFields
	return m
}
