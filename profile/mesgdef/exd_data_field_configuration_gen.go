// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// ExdDataFieldConfiguration is a ExdDataFieldConfiguration message.
type ExdDataFieldConfiguration struct {
	ScreenIndex  uint8
	ConceptField byte
	FieldId      uint8
	ConceptCount uint8
	DisplayType  typedef.ExdDisplayType
	Title        []string // Array: [32];

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewExdDataFieldConfiguration creates new ExdDataFieldConfiguration struct based on given mesg. If mesg is nil or mesg.Num is not equal to ExdDataFieldConfiguration mesg number, it will return nil.
func NewExdDataFieldConfiguration(mesg proto.Message) *ExdDataFieldConfiguration {
	if mesg.Num != typedef.MesgNumExdDataFieldConfiguration {
		return nil
	}

	vals := [6]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &ExdDataFieldConfiguration{
		ScreenIndex:  typeconv.ToUint8[uint8](vals[0]),
		ConceptField: typeconv.ToByte[byte](vals[1]),
		FieldId:      typeconv.ToUint8[uint8](vals[2]),
		ConceptCount: typeconv.ToUint8[uint8](vals[3]),
		DisplayType:  typeconv.ToEnum[typedef.ExdDisplayType](vals[4]),
		Title:        typeconv.ToSliceString[string](vals[5]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts ExdDataFieldConfiguration into proto.Message.
func (m *ExdDataFieldConfiguration) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumExdDataFieldConfiguration)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if m.ScreenIndex != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.ScreenIndex
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ConceptField != basetype.ByteInvalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.ConceptField
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.FieldId != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.FieldId
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ConceptCount != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.ConceptCount
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.DisplayType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = typeconv.ToEnum[byte](m.DisplayType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.Title != nil {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.Title
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of ExdDataFieldConfiguration's valid fields.
func (m *ExdDataFieldConfiguration) size() byte {
	var size byte
	if m.ScreenIndex != basetype.Uint8Invalid {
		size++
	}
	if m.ConceptField != basetype.ByteInvalid {
		size++
	}
	if m.FieldId != basetype.Uint8Invalid {
		size++
	}
	if m.ConceptCount != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.DisplayType) != basetype.EnumInvalid {
		size++
	}
	if m.Title != nil {
		size++
	}
	return size
}
