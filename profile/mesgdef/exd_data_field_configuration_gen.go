// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// ExdDataFieldConfiguration is a ExdDataFieldConfiguration message.
type ExdDataFieldConfiguration struct {
	ScreenIndex  uint8
	ConceptField byte
	FieldId      uint8
	ConceptCount uint8
	DisplayType  typedef.ExdDisplayType
	Title        string

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewExdDataFieldConfiguration creates new ExdDataFieldConfiguration struct based on given mesg. If mesg is nil or mesg.Num is not equal to ExdDataFieldConfiguration mesg number, it will return nil.
func NewExdDataFieldConfiguration(mesg proto.Message) *ExdDataFieldConfiguration {
	if mesg.Num != typedef.MesgNumExdDataFieldConfiguration {
		return nil
	}

	vals := [256]any{ // Mark all values as invalid, replace only when specified.
		0: basetype.Uint8Invalid, /* ScreenIndex */
		1: basetype.ByteInvalid,  /* ConceptField */
		2: basetype.Uint8Invalid, /* FieldId */
		3: basetype.Uint8Invalid, /* ConceptCount */
		4: basetype.EnumInvalid,  /* DisplayType */
		5: nil,                   /* Title */
	}

	for i := range mesg.Fields {
		if mesg.Fields[i].Value == nil {
			continue // keep the invalid value
		}
		vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
	}

	return &ExdDataFieldConfiguration{
		ScreenIndex:  typeconv.ToUint8[uint8](vals[0]),
		ConceptField: typeconv.ToByte[byte](vals[1]),
		FieldId:      typeconv.ToUint8[uint8](vals[2]),
		ConceptCount: typeconv.ToUint8[uint8](vals[3]),
		DisplayType:  typeconv.ToEnum[typedef.ExdDisplayType](vals[4]),
		Title:        typeconv.ToString[string](vals[5]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to ExdDataFieldConfiguration mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumExdDataFieldConfiguration)
func (m ExdDataFieldConfiguration) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumExdDataFieldConfiguration {
		return
	}

	vals := [256]any{
		0: m.ScreenIndex,
		1: m.ConceptField,
		2: m.FieldId,
		3: m.ConceptCount,
		4: m.DisplayType,
		5: m.Title,
	}

	for i := range mesg.Fields {
		mesg.Fields[i].Value = vals[mesg.Fields[i].Num]
	}
	mesg.DeveloperFields = m.DeveloperFields

}
