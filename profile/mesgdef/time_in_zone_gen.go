// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// TimeInZone is a TimeInZone message.
type TimeInZone struct {
	Timestamp                typedef.DateTime // Units: s;
	ReferenceMesg            typedef.MesgNum
	ReferenceIndex           typedef.MessageIndex
	TimeInHrZone             []uint32 // Scale: 1000; Array: [N]; Units: s;
	TimeInSpeedZone          []uint32 // Scale: 1000; Array: [N]; Units: s;
	TimeInCadenceZone        []uint32 // Scale: 1000; Array: [N]; Units: s;
	TimeInPowerZone          []uint32 // Scale: 1000; Array: [N]; Units: s;
	HrZoneHighBoundary       []uint8  // Array: [N]; Units: bpm;
	SpeedZoneHighBoundary    []uint16 // Scale: 1000; Array: [N]; Units: m/s;
	CadenceZoneHighBondary   []uint8  // Array: [N]; Units: rpm;
	PowerZoneHighBoundary    []uint16 // Array: [N]; Units: watts;
	HrCalcType               typedef.HrZoneCalc
	MaxHeartRate             uint8
	RestingHeartRate         uint8
	ThresholdHeartRate       uint8
	PwrCalcType              typedef.PwrZoneCalc
	FunctionalThresholdPower uint16

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewTimeInZone creates new TimeInZone struct based on given mesg. If mesg is nil or mesg.Num is not equal to TimeInZone mesg number, it will return nil.
func NewTimeInZone(mesg proto.Message) *TimeInZone {
	if mesg.Num != typedef.MesgNumTimeInZone {
		return nil
	}

	vals := [254]any{}
	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &TimeInZone{
		Timestamp:                typeconv.ToUint32[typedef.DateTime](vals[253]),
		ReferenceMesg:            typeconv.ToUint16[typedef.MesgNum](vals[0]),
		ReferenceIndex:           typeconv.ToUint16[typedef.MessageIndex](vals[1]),
		TimeInHrZone:             typeconv.ToSliceUint32[uint32](vals[2]),
		TimeInSpeedZone:          typeconv.ToSliceUint32[uint32](vals[3]),
		TimeInCadenceZone:        typeconv.ToSliceUint32[uint32](vals[4]),
		TimeInPowerZone:          typeconv.ToSliceUint32[uint32](vals[5]),
		HrZoneHighBoundary:       typeconv.ToSliceUint8[uint8](vals[6]),
		SpeedZoneHighBoundary:    typeconv.ToSliceUint16[uint16](vals[7]),
		CadenceZoneHighBondary:   typeconv.ToSliceUint8[uint8](vals[8]),
		PowerZoneHighBoundary:    typeconv.ToSliceUint16[uint16](vals[9]),
		HrCalcType:               typeconv.ToEnum[typedef.HrZoneCalc](vals[10]),
		MaxHeartRate:             typeconv.ToUint8[uint8](vals[11]),
		RestingHeartRate:         typeconv.ToUint8[uint8](vals[12]),
		ThresholdHeartRate:       typeconv.ToUint8[uint8](vals[13]),
		PwrCalcType:              typeconv.ToEnum[typedef.PwrZoneCalc](vals[14]),
		FunctionalThresholdPower: typeconv.ToUint16[uint16](vals[15]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// ToMesg converts TimeInZone into proto.Message.
func (m *TimeInZone) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumTimeInZone)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = typeconv.ToUint32[uint32](m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint16[uint16](m.ReferenceMesg) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = typeconv.ToUint16[uint16](m.ReferenceMesg)
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToUint16[uint16](m.ReferenceIndex) != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = typeconv.ToUint16[uint16](m.ReferenceIndex)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimeInHrZone != nil {
		field := fac.CreateField(mesg.Num, 2)
		field.Value = m.TimeInHrZone
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimeInSpeedZone != nil {
		field := fac.CreateField(mesg.Num, 3)
		field.Value = m.TimeInSpeedZone
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimeInCadenceZone != nil {
		field := fac.CreateField(mesg.Num, 4)
		field.Value = m.TimeInCadenceZone
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimeInPowerZone != nil {
		field := fac.CreateField(mesg.Num, 5)
		field.Value = m.TimeInPowerZone
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.HrZoneHighBoundary != nil {
		field := fac.CreateField(mesg.Num, 6)
		field.Value = m.HrZoneHighBoundary
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.SpeedZoneHighBoundary != nil {
		field := fac.CreateField(mesg.Num, 7)
		field.Value = m.SpeedZoneHighBoundary
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.CadenceZoneHighBondary != nil {
		field := fac.CreateField(mesg.Num, 8)
		field.Value = m.CadenceZoneHighBondary
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.PowerZoneHighBoundary != nil {
		field := fac.CreateField(mesg.Num, 9)
		field.Value = m.PowerZoneHighBoundary
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.HrCalcType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 10)
		field.Value = typeconv.ToEnum[byte](m.HrCalcType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.MaxHeartRate != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 11)
		field.Value = m.MaxHeartRate
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.RestingHeartRate != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 12)
		field.Value = m.RestingHeartRate
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.ThresholdHeartRate != basetype.Uint8Invalid {
		field := fac.CreateField(mesg.Num, 13)
		field.Value = m.ThresholdHeartRate
		mesg.Fields = append(mesg.Fields, field)
	}
	if typeconv.ToEnum[byte](m.PwrCalcType) != basetype.EnumInvalid {
		field := fac.CreateField(mesg.Num, 14)
		field.Value = typeconv.ToEnum[byte](m.PwrCalcType)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.FunctionalThresholdPower != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 15)
		field.Value = m.FunctionalThresholdPower
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of TimeInZone's valid fields.
func (m *TimeInZone) size() byte {
	var size byte
	if typeconv.ToUint32[uint32](m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if typeconv.ToUint16[uint16](m.ReferenceMesg) != basetype.Uint16Invalid {
		size++
	}
	if typeconv.ToUint16[uint16](m.ReferenceIndex) != basetype.Uint16Invalid {
		size++
	}
	if m.TimeInHrZone != nil {
		size++
	}
	if m.TimeInSpeedZone != nil {
		size++
	}
	if m.TimeInCadenceZone != nil {
		size++
	}
	if m.TimeInPowerZone != nil {
		size++
	}
	if m.HrZoneHighBoundary != nil {
		size++
	}
	if m.SpeedZoneHighBoundary != nil {
		size++
	}
	if m.CadenceZoneHighBondary != nil {
		size++
	}
	if m.PowerZoneHighBoundary != nil {
		size++
	}
	if typeconv.ToEnum[byte](m.HrCalcType) != basetype.EnumInvalid {
		size++
	}
	if m.MaxHeartRate != basetype.Uint8Invalid {
		size++
	}
	if m.RestingHeartRate != basetype.Uint8Invalid {
		size++
	}
	if m.ThresholdHeartRate != basetype.Uint8Invalid {
		size++
	}
	if typeconv.ToEnum[byte](m.PwrCalcType) != basetype.EnumInvalid {
		size++
	}
	if m.FunctionalThresholdPower != basetype.Uint16Invalid {
		size++
	}
	return size
}
