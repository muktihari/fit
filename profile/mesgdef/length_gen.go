// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
)

// Length is a Length message.
type Length struct {
	MessageIndex               typedef.MessageIndex
	Timestamp                  typedef.DateTime
	Event                      typedef.Event
	EventType                  typedef.EventType
	StartTime                  typedef.DateTime
	TotalElapsedTime           uint32             // Scale: 1000; Units: s;
	TotalTimerTime             uint32             // Scale: 1000; Units: s;
	TotalStrokes               uint16             // Units: strokes;
	AvgSpeed                   uint16             // Scale: 1000; Units: m/s;
	SwimStroke                 typedef.SwimStroke // Units: swim_stroke;
	AvgSwimmingCadence         uint8              // Units: strokes/min;
	EventGroup                 uint8
	TotalCalories              uint16 // Units: kcal;
	LengthType                 typedef.LengthType
	PlayerScore                uint16
	OpponentScore              uint16
	StrokeCount                []uint16 // Array: [N]; Units: counts; stroke_type enum used as the index
	ZoneCount                  []uint16 // Array: [N]; Units: counts; zone number used as the index
	EnhancedAvgRespirationRate uint16   // Scale: 100; Units: Breaths/min;
	EnhancedMaxRespirationRate uint16   // Scale: 100; Units: Breaths/min;
	AvgRespirationRate         uint8
	MaxRespirationRate         uint8

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewLength creates new Length struct based on given mesg. If mesg is nil or mesg.Num is not equal to Length mesg number, it will return nil.
func NewLength(mesg proto.Message) *Length {
	if mesg.Num != typedef.MesgNumLength {
		return nil
	}

	vals := [...]any{ // nil value will be converted to its corresponding invalid value by typeconv.
		254: nil, /* MessageIndex */
		253: nil, /* Timestamp */
		0:   nil, /* Event */
		1:   nil, /* EventType */
		2:   nil, /* StartTime */
		3:   nil, /* TotalElapsedTime */
		4:   nil, /* TotalTimerTime */
		5:   nil, /* TotalStrokes */
		6:   nil, /* AvgSpeed */
		7:   nil, /* SwimStroke */
		9:   nil, /* AvgSwimmingCadence */
		10:  nil, /* EventGroup */
		11:  nil, /* TotalCalories */
		12:  nil, /* LengthType */
		18:  nil, /* PlayerScore */
		19:  nil, /* OpponentScore */
		20:  nil, /* StrokeCount */
		21:  nil, /* ZoneCount */
		22:  nil, /* EnhancedAvgRespirationRate */
		23:  nil, /* EnhancedMaxRespirationRate */
		24:  nil, /* AvgRespirationRate */
		25:  nil, /* MaxRespirationRate */
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		vals[field.Num] = field.Value
	}

	return &Length{
		MessageIndex:               typeconv.ToUint16[typedef.MessageIndex](vals[254]),
		Timestamp:                  typeconv.ToUint32[typedef.DateTime](vals[253]),
		Event:                      typeconv.ToEnum[typedef.Event](vals[0]),
		EventType:                  typeconv.ToEnum[typedef.EventType](vals[1]),
		StartTime:                  typeconv.ToUint32[typedef.DateTime](vals[2]),
		TotalElapsedTime:           typeconv.ToUint32[uint32](vals[3]),
		TotalTimerTime:             typeconv.ToUint32[uint32](vals[4]),
		TotalStrokes:               typeconv.ToUint16[uint16](vals[5]),
		AvgSpeed:                   typeconv.ToUint16[uint16](vals[6]),
		SwimStroke:                 typeconv.ToEnum[typedef.SwimStroke](vals[7]),
		AvgSwimmingCadence:         typeconv.ToUint8[uint8](vals[9]),
		EventGroup:                 typeconv.ToUint8[uint8](vals[10]),
		TotalCalories:              typeconv.ToUint16[uint16](vals[11]),
		LengthType:                 typeconv.ToEnum[typedef.LengthType](vals[12]),
		PlayerScore:                typeconv.ToUint16[uint16](vals[18]),
		OpponentScore:              typeconv.ToUint16[uint16](vals[19]),
		StrokeCount:                typeconv.ToSliceUint16[uint16](vals[20]),
		ZoneCount:                  typeconv.ToSliceUint16[uint16](vals[21]),
		EnhancedAvgRespirationRate: typeconv.ToUint16[uint16](vals[22]),
		EnhancedMaxRespirationRate: typeconv.ToUint16[uint16](vals[23]),
		AvgRespirationRate:         typeconv.ToUint8[uint8](vals[24]),
		MaxRespirationRate:         typeconv.ToUint8[uint8](vals[25]),

		DeveloperFields: mesg.DeveloperFields,
	}
}

// PutMessage puts fields's value into mesg. If mesg is nil or mesg.Num is not equal to Length mesg number, it will return nil.
// It is the caller responsibility to provide the appropriate mesg, it's recommended to create mesg using factory:
//
//	factory.CreateMesg(typedef.MesgNumLength)
func (m *Length) PutMessage(mesg *proto.Message) {
	if mesg == nil {
		return
	}

	if mesg.Num != typedef.MesgNumLength {
		return
	}

	vals := [...]any{
		254: typeconv.ToUint16[uint16](m.MessageIndex),
		253: typeconv.ToUint32[uint32](m.Timestamp),
		0:   typeconv.ToEnum[byte](m.Event),
		1:   typeconv.ToEnum[byte](m.EventType),
		2:   typeconv.ToUint32[uint32](m.StartTime),
		3:   m.TotalElapsedTime,
		4:   m.TotalTimerTime,
		5:   m.TotalStrokes,
		6:   m.AvgSpeed,
		7:   typeconv.ToEnum[byte](m.SwimStroke),
		9:   m.AvgSwimmingCadence,
		10:  m.EventGroup,
		11:  m.TotalCalories,
		12:  typeconv.ToEnum[byte](m.LengthType),
		18:  m.PlayerScore,
		19:  m.OpponentScore,
		20:  m.StrokeCount,
		21:  m.ZoneCount,
		22:  m.EnhancedAvgRespirationRate,
		23:  m.EnhancedMaxRespirationRate,
		24:  m.AvgRespirationRate,
		25:  m.MaxRespirationRate,
	}

	for i := range mesg.Fields {
		field := &mesg.Fields[i]
		if field.Num >= byte(len(vals)) {
			continue
		}
		field.Value = vals[field.Num]
	}

	mesg.DeveloperFields = m.DeveloperFields
}
