// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mesgdef

import (
	"github.com/muktihari/fit/kit/datetime"
	"github.com/muktihari/fit/kit/typeconv"
	"github.com/muktihari/fit/profile/basetype"
	"github.com/muktihari/fit/profile/typedef"
	"github.com/muktihari/fit/proto"
	"time"
)

// VideoFrame is a VideoFrame message.
type VideoFrame struct {
	Timestamp   time.Time // Units: s; Whole second part of the timestamp
	TimestampMs uint16    // Units: ms; Millisecond part of the timestamp.
	FrameNumber uint32    // Number of the frame that the timestamp and timestamp_ms correlate to

	// Developer Fields are dynamic, can't be mapped as struct's fields.
	// [Added since protocol version 2.0]
	DeveloperFields []proto.DeveloperField
}

// NewVideoFrame creates new VideoFrame struct based on given mesg.
// If mesg is nil, it will return VideoFrame with all fields being set to its corresponding invalid value.
func NewVideoFrame(mesg *proto.Message) *VideoFrame {
	vals := [254]any{}

	var developerFields []proto.DeveloperField
	if mesg != nil {
		for i := range mesg.Fields {
			if mesg.Fields[i].Num >= byte(len(vals)) {
				continue
			}
			vals[mesg.Fields[i].Num] = mesg.Fields[i].Value
		}
		developerFields = mesg.DeveloperFields
	}

	return &VideoFrame{
		Timestamp:   datetime.ToTime(vals[253]),
		TimestampMs: typeconv.ToUint16[uint16](vals[0]),
		FrameNumber: typeconv.ToUint32[uint32](vals[1]),

		DeveloperFields: developerFields,
	}
}

// ToMesg converts VideoFrame into proto.Message.
func (m *VideoFrame) ToMesg(fac Factory) proto.Message {
	mesg := fac.CreateMesgOnly(typedef.MesgNumVideoFrame)
	mesg.Fields = make([]proto.Field, 0, m.size())

	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 253)
		field.Value = datetime.ToUint32(m.Timestamp)
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		field := fac.CreateField(mesg.Num, 0)
		field.Value = m.TimestampMs
		mesg.Fields = append(mesg.Fields, field)
	}
	if m.FrameNumber != basetype.Uint32Invalid {
		field := fac.CreateField(mesg.Num, 1)
		field.Value = m.FrameNumber
		mesg.Fields = append(mesg.Fields, field)
	}

	mesg.DeveloperFields = m.DeveloperFields

	return mesg
}

// size returns size of VideoFrame's valid fields.
func (m *VideoFrame) size() byte {
	var size byte
	if datetime.ToUint32(m.Timestamp) != basetype.Uint32Invalid {
		size++
	}
	if m.TimestampMs != basetype.Uint16Invalid {
		size++
	}
	if m.FrameNumber != basetype.Uint32Invalid {
		size++
	}
	return size
}

// SetTimestamp sets VideoFrame value.
//
// Units: s; Whole second part of the timestamp
func (m *VideoFrame) SetTimestamp(v time.Time) *VideoFrame {
	m.Timestamp = v
	return m
}

// SetTimestampMs sets VideoFrame value.
//
// Units: ms; Millisecond part of the timestamp.
func (m *VideoFrame) SetTimestampMs(v uint16) *VideoFrame {
	m.TimestampMs = v
	return m
}

// SetFrameNumber sets VideoFrame value.
//
// Number of the frame that the timestamp and timestamp_ms correlate to
func (m *VideoFrame) SetFrameNumber(v uint32) *VideoFrame {
	m.FrameNumber = v
	return m
}

// SetDeveloperFields VideoFrame's DeveloperFields.
func (m *VideoFrame) SetDeveloperFields(developerFields ...proto.DeveloperField) *VideoFrame {
	m.DeveloperFields = developerFields
	return m
}
