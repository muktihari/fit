// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.
// SDK Version: 21.126

// Copyright 2023 The Fit SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package fieldnum contains untyped constants for greater flexibility, intended to simplify code typing when creating messages and fields
// using the factory and reduce human error.
//
// This should not be confused with typed constants in typedef. The value of these untyped constants remains the same as declared in typedef.
// The only difference is that untyped constants can take on many forms (byte, int, types.DateTime, types.File, etc.),
//
// For more information about Go constants, visit: https://go.dev/blog/constants.
package fieldnum

const (
	AccelerometerDataAccelX                           = 2   // [Type: Uint16, Base: uint16, Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	AccelerometerDataAccelY                           = 3   // [Type: Uint16, Base: uint16, Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	AccelerometerDataAccelZ                           = 4   // [Type: Uint16, Base: uint16, Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	AccelerometerDataCalibratedAccelX                 = 5   // [Type: Float32, Base: float32, Units: g]; Calibrated accel reading
	AccelerometerDataCalibratedAccelY                 = 6   // [Type: Float32, Base: float32, Units: g]; Calibrated accel reading
	AccelerometerDataCalibratedAccelZ                 = 7   // [Type: Float32, Base: float32, Units: g]; Calibrated accel reading
	AccelerometerDataCompressedCalibratedAccelX       = 8   // [Type: Sint16, Base: sint16, Units: mG]; Calibrated accel reading
	AccelerometerDataCompressedCalibratedAccelY       = 9   // [Type: Sint16, Base: sint16, Units: mG]; Calibrated accel reading
	AccelerometerDataCompressedCalibratedAccelZ       = 10  // [Type: Sint16, Base: sint16, Units: mG]; Calibrated accel reading
	AccelerometerDataSampleTimeOffset                 = 1   // [Type: Uint16, Base: uint16, Units: ms]; Each time in the array describes the time at which the accelerometer sample with the corrosponding index was taken. Limited to 30 samples in each message. The samples may span across seconds. Array size must match the number of samples in accel_x and accel_y and accel_z
	AccelerometerDataTimestamp                        = 253 // [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp
	AccelerometerDataTimestampMs                      = 0   // [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the timestamp.
	ActivityEvent                                     = 3   // [Type: Event, Base: enum];
	ActivityEventGroup                                = 6   // [Type: Uint8, Base: uint8];
	ActivityEventType                                 = 4   // [Type: EventType, Base: enum];
	ActivityLocalTimestamp                            = 5   // [Type: LocalDateTime, Base: uint32]; timestamp epoch expressed in local time, used to convert activity timestamps to local time
	ActivityNumSessions                               = 1   // [Type: Uint16, Base: uint16];
	ActivityTimestamp                                 = 253 // [Type: DateTime, Base: uint32];
	ActivityTotalTimerTime                            = 0   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Exclude pauses
	ActivityType                                      = 2   // [Type: Activity, Base: enum];
	AntChannelIdChannelNumber                         = 0   // [Type: Uint8, Base: uint8];
	AntChannelIdDeviceIndex                           = 4   // [Type: DeviceIndex, Base: uint8];
	AntChannelIdDeviceNumber                          = 2   // [Type: Uint16z, Base: uint16z];
	AntChannelIdDeviceType                            = 1   // [Type: Uint8z, Base: uint8z];
	AntChannelIdTransmissionType                      = 3   // [Type: Uint8z, Base: uint8z];
	AntRxChannelNumber                                = 3   // [Type: Uint8, Base: uint8];
	AntRxData                                         = 4   // [Type: Byte, Base: byte];
	AntRxFractionalTimestamp                          = 0   // [Type: Uint16, Base: uint16, Scale: 32768, Offset: 0, Units: s];
	AntRxMesgData                                     = 2   // [Type: Byte, Base: byte];
	AntRxMesgId                                       = 1   // [Type: Byte, Base: byte];
	AntRxTimestamp                                    = 253 // [Type: DateTime, Base: uint32, Units: s];
	AntTxChannelNumber                                = 3   // [Type: Uint8, Base: uint8];
	AntTxData                                         = 4   // [Type: Byte, Base: byte];
	AntTxFractionalTimestamp                          = 0   // [Type: Uint16, Base: uint16, Scale: 32768, Offset: 0, Units: s];
	AntTxMesgData                                     = 2   // [Type: Byte, Base: byte];
	AntTxMesgId                                       = 1   // [Type: Byte, Base: byte];
	AntTxTimestamp                                    = 253 // [Type: DateTime, Base: uint32, Units: s];
	AviationAttitudeAccelLateral                      = 4   // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: m/s^2]; Range -78.4 to +78.4 (-8 Gs to 8 Gs)
	AviationAttitudeAccelNormal                       = 5   // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: m/s^2]; Range -78.4 to +78.4 (-8 Gs to 8 Gs)
	AviationAttitudeAttitudeStageComplete             = 8   // [Type: Uint8, Base: uint8, Units: %]; The percent complete of the current attitude stage. Set to 0 for attitude stages 0, 1 and 2 and to 100 for attitude stage 3 by AHRS modules that do not support it. Range - 100
	AviationAttitudePitch                             = 2   // [Type: Sint16, Base: sint16, Scale: 10430.38, Offset: 0, Units: radians]; Range -PI/2 to +PI/2
	AviationAttitudeRoll                              = 3   // [Type: Sint16, Base: sint16, Scale: 10430.38, Offset: 0, Units: radians]; Range -PI to +PI
	AviationAttitudeStage                             = 7   // [Type: AttitudeStage, Base: enum];
	AviationAttitudeSystemTime                        = 1   // [Type: Uint32, Base: uint32, Units: ms]; System time associated with sample expressed in ms.
	AviationAttitudeTimestamp                         = 253 // [Type: DateTime, Base: uint32, Units: s]; Timestamp message was output
	AviationAttitudeTimestampMs                       = 0   // [Type: Uint16, Base: uint16, Units: ms]; Fractional part of timestamp, added to timestamp
	AviationAttitudeTrack                             = 9   // [Type: Uint16, Base: uint16, Scale: 10430.38, Offset: 0, Units: radians]; Track Angle/Heading Range 0 - 2pi
	AviationAttitudeTurnRate                          = 6   // [Type: Sint16, Base: sint16, Scale: 1024, Offset: 0, Units: radians/second]; Range -8.727 to +8.727 (-500 degs/sec to +500 degs/sec)
	AviationAttitudeValidity                          = 10  // [Type: AttitudeValidity, Base: uint16];
	BarometerDataBaroPres                             = 2   // [Type: Uint32, Base: uint32, Units: Pa]; These are the raw ADC reading. The samples may span across seconds. A conversion will need to be done on this data once read.
	BarometerDataSampleTimeOffset                     = 1   // [Type: Uint16, Base: uint16, Units: ms]; Each time in the array describes the time at which the barometer sample with the corrosponding index was taken. The samples may span across seconds. Array size must match the number of samples in baro_cal
	BarometerDataTimestamp                            = 253 // [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp
	BarometerDataTimestampMs                          = 0   // [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the timestamp.
	BeatIntervalsTime                                 = 1   // [Type: Uint16, Base: uint16, Units: ms]; Array of millisecond times between beats
	BeatIntervalsTimestamp                            = 253 // [Type: DateTime, Base: uint32];
	BeatIntervalsTimestampMs                          = 0   // [Type: Uint16, Base: uint16, Units: ms]; Milliseconds past date_time
	BikeProfileAutoPowerZero                          = 13  // [Type: Bool, Base: bool];
	BikeProfileAutoWheelCal                           = 12  // [Type: Bool, Base: bool];
	BikeProfileAutoWheelsize                          = 9   // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m];
	BikeProfileBikeCadAntId                           = 5   // [Type: Uint16z, Base: uint16z];
	BikeProfileBikeCadAntIdTransType                  = 22  // [Type: Uint8z, Base: uint8z];
	BikeProfileBikePowerAntId                         = 7   // [Type: Uint16z, Base: uint16z];
	BikeProfileBikePowerAntIdTransType                = 24  // [Type: Uint8z, Base: uint8z];
	BikeProfileBikeSpdAntId                           = 4   // [Type: Uint16z, Base: uint16z];
	BikeProfileBikeSpdAntIdTransType                  = 21  // [Type: Uint8z, Base: uint8z];
	BikeProfileBikeSpdcadAntId                        = 6   // [Type: Uint16z, Base: uint16z];
	BikeProfileBikeSpdcadAntIdTransType               = 23  // [Type: Uint8z, Base: uint8z];
	BikeProfileBikeWeight                             = 10  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: kg];
	BikeProfileCadEnabled                             = 16  // [Type: Bool, Base: bool];
	BikeProfileCrankLength                            = 19  // [Type: Uint8, Base: uint8, Scale: 2, Offset: -110, Units: mm];
	BikeProfileCustomWheelsize                        = 8   // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m];
	BikeProfileEnabled                                = 20  // [Type: Bool, Base: bool];
	BikeProfileFrontGear                              = 39  // [Type: Uint8z, Base: uint8z]; Number of teeth on each gear 0 is innermost
	BikeProfileFrontGearNum                           = 38  // [Type: Uint8z, Base: uint8z]; Number of front gears
	BikeProfileId                                     = 14  // [Type: Uint8, Base: uint8];
	BikeProfileMessageIndex                           = 254 // [Type: MessageIndex, Base: uint16];
	BikeProfileName                                   = 0   // [Type: String, Base: string];
	BikeProfileOdometer                               = 3   // [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	BikeProfileOdometerRollover                       = 37  // [Type: Uint8, Base: uint8]; Rollover counter that can be used to extend the odometer
	BikeProfilePowerCalFactor                         = 11  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %];
	BikeProfilePowerEnabled                           = 18  // [Type: Bool, Base: bool];
	BikeProfileRearGear                               = 41  // [Type: Uint8z, Base: uint8z]; Number of teeth on each gear 0 is innermost
	BikeProfileRearGearNum                            = 40  // [Type: Uint8z, Base: uint8z]; Number of rear gears
	BikeProfileShimanoDi2Enabled                      = 44  // [Type: Bool, Base: bool];
	BikeProfileSpdEnabled                             = 15  // [Type: Bool, Base: bool];
	BikeProfileSpdcadEnabled                          = 17  // [Type: Bool, Base: bool];
	BikeProfileSport                                  = 1   // [Type: Sport, Base: enum];
	BikeProfileSubSport                               = 2   // [Type: SubSport, Base: enum];
	BloodPressureDiastolicPressure                    = 1   // [Type: Uint16, Base: uint16, Units: mmHg];
	BloodPressureHeartRate                            = 6   // [Type: Uint8, Base: uint8, Units: bpm];
	BloodPressureHeartRateType                        = 7   // [Type: HrType, Base: enum];
	BloodPressureMap3SampleMean                       = 3   // [Type: Uint16, Base: uint16, Units: mmHg];
	BloodPressureMapEveningValues                     = 5   // [Type: Uint16, Base: uint16, Units: mmHg];
	BloodPressureMapMorningValues                     = 4   // [Type: Uint16, Base: uint16, Units: mmHg];
	BloodPressureMeanArterialPressure                 = 2   // [Type: Uint16, Base: uint16, Units: mmHg];
	BloodPressureStatus                               = 8   // [Type: BpStatus, Base: enum];
	BloodPressureSystolicPressure                     = 0   // [Type: Uint16, Base: uint16, Units: mmHg];
	BloodPressureTimestamp                            = 253 // [Type: DateTime, Base: uint32, Units: s];
	BloodPressureUserProfileIndex                     = 9   // [Type: MessageIndex, Base: uint16]; Associates this blood pressure message to a user. This corresponds to the index of the user profile message in the blood pressure file.
	CadenceZoneHighValue                              = 0   // [Type: Uint8, Base: uint8, Units: rpm];
	CadenceZoneMessageIndex                           = 254 // [Type: MessageIndex, Base: uint16];
	CadenceZoneName                                   = 1   // [Type: String, Base: string];
	CameraEventCameraEventType                        = 1   // [Type: CameraEventType, Base: enum];
	CameraEventCameraFileUuid                         = 2   // [Type: String, Base: string];
	CameraEventCameraOrientation                      = 3   // [Type: CameraOrientationType, Base: enum];
	CameraEventTimestamp                              = 253 // [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp.
	CameraEventTimestampMs                            = 0   // [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the timestamp.
	CapabilitiesConnectivitySupported                 = 23  // [Type: ConnectivityCapabilities, Base: uint32z];
	CapabilitiesLanguages                             = 0   // [Type: Uint8z, Base: uint8z]; Use language_bits_x types where x is index of array.
	CapabilitiesSports                                = 1   // [Type: SportBits0, Base: uint8z]; Use sport_bits_x types where x is index of array.
	CapabilitiesWorkoutsSupported                     = 21  // [Type: WorkoutCapabilities, Base: uint32z];
	ClimbProClimbCategory                             = 4   // [Type: Uint8, Base: uint8];
	ClimbProClimbNumber                               = 3   // [Type: Uint16, Base: uint16];
	ClimbProClimbProEvent                             = 2   // [Type: ClimbProEvent, Base: enum];
	ClimbProCurrentDist                               = 5   // [Type: Float32, Base: float32, Units: m];
	ClimbProPositionLat                               = 0   // [Type: Sint32, Base: sint32, Units: semicircles];
	ClimbProPositionLong                              = 1   // [Type: Sint32, Base: sint32, Units: semicircles];
	ClimbProTimestamp                                 = 253 // [Type: DateTime, Base: uint32, Units: s];
	ConnectivityAntEnabled                            = 2   // [Type: Bool, Base: bool]; Use ANT for connectivity features
	ConnectivityAutoActivityUploadEnabled             = 7   // [Type: Bool, Base: bool];
	ConnectivityBluetoothEnabled                      = 0   // [Type: Bool, Base: bool]; Use Bluetooth for connectivity features
	ConnectivityBluetoothLeEnabled                    = 1   // [Type: Bool, Base: bool]; Use Bluetooth Low Energy for connectivity features
	ConnectivityCourseDownloadEnabled                 = 8   // [Type: Bool, Base: bool];
	ConnectivityGpsEphemerisDownloadEnabled           = 10  // [Type: Bool, Base: bool];
	ConnectivityGrouptrackEnabled                     = 12  // [Type: Bool, Base: bool];
	ConnectivityIncidentDetectionEnabled              = 11  // [Type: Bool, Base: bool];
	ConnectivityLiveTrackingEnabled                   = 4   // [Type: Bool, Base: bool];
	ConnectivityName                                  = 3   // [Type: String, Base: string];
	ConnectivityWeatherAlertsEnabled                  = 6   // [Type: Bool, Base: bool];
	ConnectivityWeatherConditionsEnabled              = 5   // [Type: Bool, Base: bool];
	ConnectivityWorkoutDownloadEnabled                = 9   // [Type: Bool, Base: bool];
	CourseCapabilities                                = 6   // [Type: CourseCapabilities, Base: uint32z];
	CourseName                                        = 5   // [Type: String, Base: string];
	CoursePointDistance                               = 4   // [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	CoursePointFavorite                               = 8   // [Type: Bool, Base: bool];
	CoursePointMessageIndex                           = 254 // [Type: MessageIndex, Base: uint16];
	CoursePointName                                   = 6   // [Type: String, Base: string];
	CoursePointPositionLat                            = 2   // [Type: Sint32, Base: sint32, Units: semicircles];
	CoursePointPositionLong                           = 3   // [Type: Sint32, Base: sint32, Units: semicircles];
	CoursePointTimestamp                              = 1   // [Type: DateTime, Base: uint32];
	CoursePointType                                   = 5   // [Type: CoursePoint, Base: enum];
	CourseSport                                       = 4   // [Type: Sport, Base: enum];
	CourseSubSport                                    = 7   // [Type: SubSport, Base: enum];
	DeveloperDataIdApplicationId                      = 1   // [Type: Byte, Base: byte];
	DeveloperDataIdApplicationVersion                 = 4   // [Type: Uint32, Base: uint32];
	DeveloperDataIdDeveloperDataIndex                 = 3   // [Type: Uint8, Base: uint8];
	DeveloperDataIdDeveloperId                        = 0   // [Type: Byte, Base: byte];
	DeveloperDataIdManufacturerId                     = 2   // [Type: Manufacturer, Base: uint16];
	DeviceAuxBatteryInfoBatteryIdentifier             = 3   // [Type: Uint8, Base: uint8];
	DeviceAuxBatteryInfoBatteryStatus                 = 2   // [Type: BatteryStatus, Base: uint8];
	DeviceAuxBatteryInfoBatteryVoltage                = 1   // [Type: Uint16, Base: uint16, Scale: 256, Offset: 0, Units: V];
	DeviceAuxBatteryInfoDeviceIndex                   = 0   // [Type: DeviceIndex, Base: uint8];
	DeviceAuxBatteryInfoTimestamp                     = 253 // [Type: DateTime, Base: uint32];
	DeviceInfoAntDeviceNumber                         = 21  // [Type: Uint16z, Base: uint16z];
	DeviceInfoAntNetwork                              = 22  // [Type: AntNetwork, Base: enum];
	DeviceInfoAntTransmissionType                     = 20  // [Type: Uint8z, Base: uint8z];
	DeviceInfoBatteryLevel                            = 32  // [Type: Uint8, Base: uint8, Units: %];
	DeviceInfoBatteryStatus                           = 11  // [Type: BatteryStatus, Base: uint8];
	DeviceInfoBatteryVoltage                          = 10  // [Type: Uint16, Base: uint16, Scale: 256, Offset: 0, Units: V];
	DeviceInfoCumOperatingTime                        = 7   // [Type: Uint32, Base: uint32, Units: s]; Reset by new battery or charge.
	DeviceInfoDescriptor                              = 19  // [Type: String, Base: string]; Used to describe the sensor or location
	DeviceInfoDeviceIndex                             = 0   // [Type: DeviceIndex, Base: uint8];
	DeviceInfoDeviceType                              = 1   // [Type: Uint8, Base: uint8];
	DeviceInfoHardwareVersion                         = 6   // [Type: Uint8, Base: uint8];
	DeviceInfoManufacturer                            = 2   // [Type: Manufacturer, Base: uint16];
	DeviceInfoProduct                                 = 4   // [Type: Uint16, Base: uint16];
	DeviceInfoProductName                             = 27  // [Type: String, Base: string]; Optional free form string to indicate the devices name or model
	DeviceInfoSensorPosition                          = 18  // [Type: BodyLocation, Base: enum]; Indicates the location of the sensor
	DeviceInfoSerialNumber                            = 3   // [Type: Uint32z, Base: uint32z];
	DeviceInfoSoftwareVersion                         = 5   // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0];
	DeviceInfoSourceType                              = 25  // [Type: SourceType, Base: enum];
	DeviceInfoTimestamp                               = 253 // [Type: DateTime, Base: uint32, Units: s];
	DeviceSettingsActiveTimeZone                      = 0   // [Type: Uint8, Base: uint8]; Index into time zone arrays.
	DeviceSettingsActivityTrackerEnabled              = 36  // [Type: Bool, Base: bool]; Enabled state of the activity tracker functionality
	DeviceSettingsAutoActivityDetect                  = 90  // [Type: AutoActivityDetect, Base: uint32]; Allows setting specific activities auto-activity detect enabled/disabled settings
	DeviceSettingsAutoSyncFrequency                   = 89  // [Type: AutoSyncFrequency, Base: enum]; Helps to conserve battery by changing modes
	DeviceSettingsAutosyncMinSteps                    = 58  // [Type: Uint16, Base: uint16, Units: steps]; Minimum steps before an autosync can occur
	DeviceSettingsAutosyncMinTime                     = 59  // [Type: Uint16, Base: uint16, Units: minutes]; Minimum minutes before an autosync can occur
	DeviceSettingsBacklightMode                       = 12  // [Type: BacklightMode, Base: enum]; Mode for backlight
	DeviceSettingsBleAutoUploadEnabled                = 86  // [Type: Bool, Base: bool]; Automatically upload using BLE
	DeviceSettingsClockTime                           = 39  // [Type: DateTime, Base: uint32]; UTC timestamp used to set the devices clock and date
	DeviceSettingsDateMode                            = 47  // [Type: DateMode, Base: enum]; Display mode for the date
	DeviceSettingsDefaultPage                         = 57  // [Type: Uint16, Base: uint16]; Bitfield to indicate one page as default for each supported loop
	DeviceSettingsDisplayOrientation                  = 55  // [Type: DisplayOrientation, Base: enum];
	DeviceSettingsLactateThresholdAutodetectEnabled   = 80  // [Type: Bool, Base: bool]; Enable auto-detect setting for the lactate threshold feature.
	DeviceSettingsMountingSide                        = 56  // [Type: Side, Base: enum];
	DeviceSettingsMoveAlertEnabled                    = 46  // [Type: Bool, Base: bool]; Enabled state of the move alert
	DeviceSettingsNumberOfScreens                     = 94  // [Type: Uint8, Base: uint8]; Number of screens configured to display
	DeviceSettingsPagesEnabled                        = 40  // [Type: Uint16, Base: uint16]; Bitfield to configure enabled screens for each supported loop
	DeviceSettingsSmartNotificationDisplayOrientation = 95  // [Type: DisplayOrientation, Base: enum]; Smart Notification display orientation
	DeviceSettingsTapInterface                        = 134 // [Type: Switch, Base: enum];
	DeviceSettingsTapSensitivity                      = 174 // [Type: TapSensitivity, Base: enum]; Used to hold the tap threshold setting
	DeviceSettingsTimeMode                            = 4   // [Type: TimeMode, Base: enum]; Display mode for the time
	DeviceSettingsTimeOffset                          = 2   // [Type: Uint32, Base: uint32, Units: s]; Offset from system time.
	DeviceSettingsTimeZoneOffset                      = 5   // [Type: Sint8, Base: sint8, Scale: 4, Offset: 0, Units: hr]; timezone offset in 1/4 hour increments
	DeviceSettingsUtcOffset                           = 1   // [Type: Uint32, Base: uint32]; Offset from system time. Required to convert timestamp from system time to UTC.
	DiveAlarmAlarmType                                = 3   // [Type: DiveAlarmType, Base: enum]; Alarm type setting
	DiveAlarmDepth                                    = 0   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; Depth setting (m) for depth type alarms
	DiveAlarmDiveTypes                                = 5   // [Type: SubSport, Base: enum]; Dive types the alarm will trigger on
	DiveAlarmEnabled                                  = 2   // [Type: Bool, Base: bool]; Enablement flag
	DiveAlarmId                                       = 6   // [Type: Uint32, Base: uint32]; Alarm ID
	DiveAlarmMessageIndex                             = 254 // [Type: MessageIndex, Base: uint16]; Index of the alarm
	DiveAlarmPopupEnabled                             = 7   // [Type: Bool, Base: bool]; Show a visible pop-up for this alarm
	DiveAlarmRepeating                                = 10  // [Type: Bool, Base: bool]; Repeat alarm each time threshold is crossed?
	DiveAlarmSound                                    = 4   // [Type: Tone, Base: enum]; Tone and Vibe setting for the alarm
	DiveAlarmSpeed                                    = 11  // [Type: Sint32, Base: sint32, Scale: 1000, Offset: 0, Units: mps]; Ascent/descent rate (mps) setting for speed type alarms
	DiveAlarmTime                                     = 1   // [Type: Sint32, Base: sint32, Units: s]; Time setting (s) for time type alarms
	DiveAlarmTriggerOnAscent                          = 9   // [Type: Bool, Base: bool]; Trigger the alarm on ascent
	DiveAlarmTriggerOnDescent                         = 8   // [Type: Bool, Base: bool]; Trigger the alarm on descent
	DiveApneaAlarmAlarmType                           = 3   // [Type: DiveAlarmType, Base: enum]; Alarm type setting
	DiveApneaAlarmDepth                               = 0   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; Depth setting (m) for depth type alarms
	DiveApneaAlarmDiveTypes                           = 5   // [Type: SubSport, Base: enum]; Dive types the alarm will trigger on
	DiveApneaAlarmEnabled                             = 2   // [Type: Bool, Base: bool]; Enablement flag
	DiveApneaAlarmId                                  = 6   // [Type: Uint32, Base: uint32]; Alarm ID
	DiveApneaAlarmMessageIndex                        = 254 // [Type: MessageIndex, Base: uint16]; Index of the alarm
	DiveApneaAlarmPopupEnabled                        = 7   // [Type: Bool, Base: bool]; Show a visible pop-up for this alarm
	DiveApneaAlarmRepeating                           = 10  // [Type: Bool, Base: bool]; Repeat alarm each time threshold is crossed?
	DiveApneaAlarmSound                               = 4   // [Type: Tone, Base: enum]; Tone and Vibe setting for the alarm.
	DiveApneaAlarmSpeed                               = 11  // [Type: Sint32, Base: sint32, Scale: 1000, Offset: 0, Units: mps]; Ascent/descent rate (mps) setting for speed type alarms
	DiveApneaAlarmTime                                = 1   // [Type: Sint32, Base: sint32, Units: s]; Time setting (s) for time type alarms
	DiveApneaAlarmTriggerOnAscent                     = 9   // [Type: Bool, Base: bool]; Trigger the alarm on ascent
	DiveApneaAlarmTriggerOnDescent                    = 8   // [Type: Bool, Base: bool]; Trigger the alarm on descent
	DiveGasHeliumContent                              = 0   // [Type: Uint8, Base: uint8, Units: percent];
	DiveGasMessageIndex                               = 254 // [Type: MessageIndex, Base: uint16];
	DiveGasMode                                       = 3   // [Type: DiveGasMode, Base: enum];
	DiveGasOxygenContent                              = 1   // [Type: Uint8, Base: uint8, Units: percent];
	DiveGasStatus                                     = 2   // [Type: DiveGasStatus, Base: enum];
	DiveSettingsApneaCountdownEnabled                 = 12  // [Type: Bool, Base: bool];
	DiveSettingsApneaCountdownTime                    = 13  // [Type: Uint32, Base: uint32];
	DiveSettingsBacklightBrightness                   = 15  // [Type: Uint8, Base: uint8];
	DiveSettingsBacklightMode                         = 14  // [Type: DiveBacklightMode, Base: enum];
	DiveSettingsBacklightTimeout                      = 16  // [Type: BacklightTimeout, Base: uint8];
	DiveSettingsBottomDepth                           = 10  // [Type: Float32, Base: float32];
	DiveSettingsBottomTime                            = 11  // [Type: Uint32, Base: uint32];
	DiveSettingsCcrHighSetpoint                       = 26  // [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: percent]; Target PO2 when using high setpoint
	DiveSettingsCcrHighSetpointDepth                  = 27  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; Depth to switch to high setpoint in automatic mode
	DiveSettingsCcrHighSetpointSwitchMode             = 25  // [Type: CcrSetpointSwitchMode, Base: enum]; If high PO2 should be switched to automatically
	DiveSettingsCcrLowSetpoint                        = 23  // [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: percent]; Target PO2 when using low setpoint
	DiveSettingsCcrLowSetpointDepth                   = 24  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; Depth to switch to low setpoint in automatic mode
	DiveSettingsCcrLowSetpointSwitchMode              = 22  // [Type: CcrSetpointSwitchMode, Base: enum]; If low PO2 should be switched to automatically
	DiveSettingsDiveSounds                            = 35  // [Type: Tone, Base: enum]; Sounds and vibration enabled or disabled in-dive
	DiveSettingsGasConsumptionDisplay                 = 29  // [Type: GasConsumptionRateType, Base: enum]; Type of gas consumption rate to display. Some values are only valid if tank volume is known.
	DiveSettingsGfHigh                                = 3   // [Type: Uint8, Base: uint8, Units: percent];
	DiveSettingsGfLow                                 = 2   // [Type: Uint8, Base: uint8, Units: percent];
	DiveSettingsHeartRateSource                       = 20  // [Type: Uint8, Base: uint8];
	DiveSettingsHeartRateSourceType                   = 19  // [Type: SourceType, Base: enum];
	DiveSettingsLastStopMultiple                      = 36  // [Type: Uint8, Base: uint8, Scale: 10, Offset: 0]; Usually 1.0/1.5/2.0 representing 3/4.5/6m or 10/15/20ft
	DiveSettingsMessageIndex                          = 254 // [Type: MessageIndex, Base: uint16];
	DiveSettingsModel                                 = 1   // [Type: TissueModelType, Base: enum];
	DiveSettingsName                                  = 0   // [Type: String, Base: string];
	DiveSettingsNoFlyTimeMode                         = 37  // [Type: NoFlyTimeMode, Base: enum]; Indicates which guidelines to use for no-fly surface interval.
	DiveSettingsPo2Critical                           = 7   // [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: percent]; Typically 1.60
	DiveSettingsPo2Deco                               = 8   // [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: percent];
	DiveSettingsPo2Warn                               = 6   // [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: percent]; Typically 1.40
	DiveSettingsRepeatDiveInterval                    = 17  // [Type: Uint16, Base: uint16, Units: s]; Time between surfacing and ending the activity
	DiveSettingsSafetyStopEnabled                     = 9   // [Type: Bool, Base: bool];
	DiveSettingsSafetyStopTime                        = 18  // [Type: Uint16, Base: uint16, Units: s]; Time at safety stop (if enabled)
	DiveSettingsTimestamp                             = 253 // [Type: DateTime, Base: uint32];
	DiveSettingsTravelGas                             = 21  // [Type: MessageIndex, Base: uint16]; Index of travel dive_gas message
	DiveSettingsUpKeyEnabled                          = 30  // [Type: Bool, Base: bool]; Indicates whether the up key is enabled during dives
	DiveSettingsWaterDensity                          = 5   // [Type: Float32, Base: float32, Units: kg/m^3]; Fresh water is usually 1000; salt water is usually 1025
	DiveSettingsWaterType                             = 4   // [Type: WaterType, Base: enum];
	DiveSummaryAscentTime                             = 16  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Time after leaving bottom until reaching surface
	DiveSummaryAvgAscentRate                          = 17  // [Type: Sint32, Base: sint32, Scale: 1000, Offset: 0, Units: m/s]; Average ascent rate, not including descents or stops
	DiveSummaryAvgDepth                               = 2   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	DiveSummaryAvgDescentRate                         = 22  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s]; Average descent rate, not including ascents or stops
	DiveSummaryAvgPressureSac                         = 12  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: bar/min]; Average pressure-based surface air consumption
	DiveSummaryAvgRmv                                 = 14  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: L/min]; Average respiratory minute volume
	DiveSummaryAvgVolumeSac                           = 13  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: L/min]; Average volumetric surface air consumption
	DiveSummaryBottomTime                             = 11  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	DiveSummaryDescentTime                            = 15  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Time to reach deepest level stop
	DiveSummaryDiveNumber                             = 10  // [Type: Uint32, Base: uint32];
	DiveSummaryEndCns                                 = 6   // [Type: Uint8, Base: uint8, Units: percent];
	DiveSummaryEndN2                                  = 8   // [Type: Uint16, Base: uint16, Units: percent];
	DiveSummaryHangTime                               = 25  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Time spent neither ascending nor descending
	DiveSummaryMaxAscentRate                          = 23  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s]; Maximum ascent rate
	DiveSummaryMaxDepth                               = 3   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	DiveSummaryMaxDescentRate                         = 24  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s]; Maximum descent rate
	DiveSummaryO2Toxicity                             = 9   // [Type: Uint16, Base: uint16, Units: OTUs];
	DiveSummaryReferenceIndex                         = 1   // [Type: MessageIndex, Base: uint16];
	DiveSummaryReferenceMesg                          = 0   // [Type: MesgNum, Base: uint16];
	DiveSummaryStartCns                               = 5   // [Type: Uint8, Base: uint8, Units: percent];
	DiveSummaryStartN2                                = 7   // [Type: Uint16, Base: uint16, Units: percent];
	DiveSummarySurfaceInterval                        = 4   // [Type: Uint32, Base: uint32, Units: s]; Time since end of last dive
	DiveSummaryTimestamp                              = 253 // [Type: DateTime, Base: uint32, Units: s];
	EventActivityType                                 = 14  // [Type: ActivityType, Base: enum]; Activity Type associated with an auto_activity_detect event
	EventData                                         = 3   // [Type: Uint32, Base: uint32];
	EventData16                                       = 2   // [Type: Uint16, Base: uint16];
	EventDeviceIndex                                  = 13  // [Type: DeviceIndex, Base: uint8];
	EventEvent                                        = 0   // [Type: Event, Base: enum];
	EventEventGroup                                   = 4   // [Type: Uint8, Base: uint8];
	EventEventType                                    = 1   // [Type: EventType, Base: enum];
	EventFrontGear                                    = 10  // [Type: Uint8z, Base: uint8z]; Do not populate directly. Autogenerated by decoder for gear_change subfield components. Number of front teeth.
	EventFrontGearNum                                 = 9   // [Type: Uint8z, Base: uint8z]; Do not populate directly. Autogenerated by decoder for gear_change subfield components. Front gear number. 1 is innermost.
	EventOpponentScore                                = 8   // [Type: Uint16, Base: uint16]; Do not populate directly. Autogenerated by decoder for sport_point subfield components
	EventRadarThreatAvgApproachSpeed                  = 23  // [Type: Uint8, Base: uint8, Scale: 10, Offset: 0, Units: m/s]; Do not populate directly. Autogenerated by decoder for radar_threat_alert subfield components
	EventRadarThreatCount                             = 22  // [Type: Uint8, Base: uint8]; Do not populate directly. Autogenerated by decoder for threat_alert subfield components.
	EventRadarThreatLevelMax                          = 21  // [Type: RadarThreatLevelType, Base: enum]; Do not populate directly. Autogenerated by decoder for threat_alert subfield components.
	EventRadarThreatMaxApproachSpeed                  = 24  // [Type: Uint8, Base: uint8, Scale: 10, Offset: 0, Units: m/s]; Do not populate directly. Autogenerated by decoder for radar_threat_alert subfield components
	EventRearGear                                     = 12  // [Type: Uint8z, Base: uint8z]; Do not populate directly. Autogenerated by decoder for gear_change subfield components. Number of rear teeth.
	EventRearGearNum                                  = 11  // [Type: Uint8z, Base: uint8z]; Do not populate directly. Autogenerated by decoder for gear_change subfield components. Rear gear number. 1 is innermost.
	EventScore                                        = 7   // [Type: Uint16, Base: uint16]; Do not populate directly. Autogenerated by decoder for sport_point subfield components
	EventStartTimestamp                               = 15  // [Type: DateTime, Base: uint32, Units: s]; Timestamp of when the event started
	EventTimestamp                                    = 253 // [Type: DateTime, Base: uint32, Units: s];
	ExdDataConceptConfigurationConceptField           = 1   // [Type: Byte, Base: byte];
	ExdDataConceptConfigurationConceptIndex           = 3   // [Type: Uint8, Base: uint8];
	ExdDataConceptConfigurationConceptKey             = 5   // [Type: Uint8, Base: uint8];
	ExdDataConceptConfigurationDataPage               = 4   // [Type: Uint8, Base: uint8];
	ExdDataConceptConfigurationDataUnits              = 8   // [Type: ExdDataUnits, Base: enum];
	ExdDataConceptConfigurationDescriptor             = 10  // [Type: ExdDescriptors, Base: enum];
	ExdDataConceptConfigurationFieldId                = 2   // [Type: Uint8, Base: uint8];
	ExdDataConceptConfigurationIsSigned               = 11  // [Type: Bool, Base: bool];
	ExdDataConceptConfigurationQualifier              = 9   // [Type: ExdQualifiers, Base: enum];
	ExdDataConceptConfigurationScaling                = 6   // [Type: Uint8, Base: uint8];
	ExdDataConceptConfigurationScreenIndex            = 0   // [Type: Uint8, Base: uint8];
	ExdDataFieldConfigurationConceptCount             = 3   // [Type: Uint8, Base: uint8];
	ExdDataFieldConfigurationConceptField             = 1   // [Type: Byte, Base: byte];
	ExdDataFieldConfigurationDisplayType              = 4   // [Type: ExdDisplayType, Base: enum];
	ExdDataFieldConfigurationFieldId                  = 2   // [Type: Uint8, Base: uint8];
	ExdDataFieldConfigurationScreenIndex              = 0   // [Type: Uint8, Base: uint8];
	ExdDataFieldConfigurationTitle                    = 5   // [Type: String, Base: string];
	ExdScreenConfigurationFieldCount                  = 1   // [Type: Uint8, Base: uint8]; number of fields in screen
	ExdScreenConfigurationLayout                      = 2   // [Type: ExdLayout, Base: enum];
	ExdScreenConfigurationScreenEnabled               = 3   // [Type: Bool, Base: bool];
	ExdScreenConfigurationScreenIndex                 = 0   // [Type: Uint8, Base: uint8];
	ExerciseTitleExerciseCategory                     = 0   // [Type: ExerciseCategory, Base: uint16];
	ExerciseTitleExerciseName                         = 1   // [Type: Uint16, Base: uint16];
	ExerciseTitleMessageIndex                         = 254 // [Type: MessageIndex, Base: uint16];
	ExerciseTitleWktStepName                          = 2   // [Type: String, Base: string];
	FieldCapabilitiesCount                            = 3   // [Type: Uint16, Base: uint16];
	FieldCapabilitiesFieldNum                         = 2   // [Type: Uint8, Base: uint8];
	FieldCapabilitiesFile                             = 0   // [Type: File, Base: enum];
	FieldCapabilitiesMesgNum                          = 1   // [Type: MesgNum, Base: uint16];
	FieldCapabilitiesMessageIndex                     = 254 // [Type: MessageIndex, Base: uint16];
	FieldDescriptionAccumulate                        = 10  // [Type: String, Base: string];
	FieldDescriptionArray                             = 4   // [Type: Uint8, Base: uint8];
	FieldDescriptionBits                              = 9   // [Type: String, Base: string];
	FieldDescriptionComponents                        = 5   // [Type: String, Base: string];
	FieldDescriptionDeveloperDataIndex                = 0   // [Type: Uint8, Base: uint8];
	FieldDescriptionFieldDefinitionNumber             = 1   // [Type: Uint8, Base: uint8];
	FieldDescriptionFieldName                         = 3   // [Type: String, Base: string];
	FieldDescriptionFitBaseTypeId                     = 2   // [Type: FitBaseType, Base: uint8];
	FieldDescriptionFitBaseUnitId                     = 13  // [Type: FitBaseUnit, Base: uint16];
	FieldDescriptionNativeFieldNum                    = 15  // [Type: Uint8, Base: uint8];
	FieldDescriptionNativeMesgNum                     = 14  // [Type: MesgNum, Base: uint16];
	FieldDescriptionOffset                            = 7   // [Type: Sint8, Base: sint8];
	FieldDescriptionScale                             = 6   // [Type: Uint8, Base: uint8];
	FieldDescriptionUnits                             = 8   // [Type: String, Base: string];
	FileCapabilitiesDirectory                         = 2   // [Type: String, Base: string];
	FileCapabilitiesFlags                             = 1   // [Type: FileFlags, Base: uint8z];
	FileCapabilitiesMaxCount                          = 3   // [Type: Uint16, Base: uint16];
	FileCapabilitiesMaxSize                           = 4   // [Type: Uint32, Base: uint32, Units: bytes];
	FileCapabilitiesMessageIndex                      = 254 // [Type: MessageIndex, Base: uint16];
	FileCapabilitiesType                              = 0   // [Type: File, Base: enum];
	FileCreatorHardwareVersion                        = 1   // [Type: Uint8, Base: uint8];
	FileCreatorSoftwareVersion                        = 0   // [Type: Uint16, Base: uint16];
	FileIdManufacturer                                = 1   // [Type: Manufacturer, Base: uint16];
	FileIdNumber                                      = 5   // [Type: Uint16, Base: uint16]; Only set for files that are not created/erased.
	FileIdProduct                                     = 2   // [Type: Uint16, Base: uint16];
	FileIdProductName                                 = 8   // [Type: String, Base: string]; Optional free form string to indicate the devices name or model
	FileIdSerialNumber                                = 3   // [Type: Uint32z, Base: uint32z];
	FileIdTimeCreated                                 = 4   // [Type: DateTime, Base: uint32]; Only set for files that are can be created/erased.
	FileIdType                                        = 0   // [Type: File, Base: enum];
	GoalEnabled                                       = 10  // [Type: Bool, Base: bool];
	GoalEndDate                                       = 3   // [Type: DateTime, Base: uint32];
	GoalMessageIndex                                  = 254 // [Type: MessageIndex, Base: uint16];
	GoalRecurrence                                    = 8   // [Type: GoalRecurrence, Base: enum];
	GoalRecurrenceValue                               = 9   // [Type: Uint16, Base: uint16];
	GoalRepeat                                        = 6   // [Type: Bool, Base: bool];
	GoalSource                                        = 11  // [Type: GoalSource, Base: enum];
	GoalSport                                         = 0   // [Type: Sport, Base: enum];
	GoalStartDate                                     = 2   // [Type: DateTime, Base: uint32];
	GoalSubSport                                      = 1   // [Type: SubSport, Base: enum];
	GoalTargetValue                                   = 7   // [Type: Uint32, Base: uint32];
	GoalType                                          = 4   // [Type: Goal, Base: enum];
	GoalValue                                         = 5   // [Type: Uint32, Base: uint32];
	GpsMetadataEnhancedAltitude                       = 3   // [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	GpsMetadataEnhancedSpeed                          = 4   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	GpsMetadataHeading                                = 5   // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: degrees];
	GpsMetadataPositionLat                            = 1   // [Type: Sint32, Base: sint32, Units: semicircles];
	GpsMetadataPositionLong                           = 2   // [Type: Sint32, Base: sint32, Units: semicircles];
	GpsMetadataTimestamp                              = 253 // [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp.
	GpsMetadataTimestampMs                            = 0   // [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the timestamp.
	GpsMetadataUtcTimestamp                           = 6   // [Type: DateTime, Base: uint32, Units: s]; Used to correlate UTC to system time if the timestamp of the message is in system time. This UTC time is derived from the GPS data.
	GpsMetadataVelocity                               = 7   // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: m/s]; velocity[0] is lon velocity. Velocity[1] is lat velocity. Velocity[2] is altitude velocity.
	GyroscopeDataCalibratedGyroX                      = 5   // [Type: Float32, Base: float32, Units: deg/s]; Calibrated gyro reading
	GyroscopeDataCalibratedGyroY                      = 6   // [Type: Float32, Base: float32, Units: deg/s]; Calibrated gyro reading
	GyroscopeDataCalibratedGyroZ                      = 7   // [Type: Float32, Base: float32, Units: deg/s]; Calibrated gyro reading
	GyroscopeDataGyroX                                = 2   // [Type: Uint16, Base: uint16, Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	GyroscopeDataGyroY                                = 3   // [Type: Uint16, Base: uint16, Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	GyroscopeDataGyroZ                                = 4   // [Type: Uint16, Base: uint16, Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	GyroscopeDataSampleTimeOffset                     = 1   // [Type: Uint16, Base: uint16, Units: ms]; Each time in the array describes the time at which the gyro sample with the corrosponding index was taken. Limited to 30 samples in each message. The samples may span across seconds. Array size must match the number of samples in gyro_x and gyro_y and gyro_z
	GyroscopeDataTimestamp                            = 253 // [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp
	GyroscopeDataTimestampMs                          = 0   // [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the timestamp.
	HrEventTimestamp                                  = 9   // [Type: Uint32, Base: uint32, Scale: 1024, Offset: 0, Units: s];
	HrEventTimestamp12                                = 10  // [Type: Byte, Base: byte, Scale: 1024, Offset: 0, Units: s];
	HrFilteredBpm                                     = 6   // [Type: Uint8, Base: uint8, Units: bpm];
	HrFractionalTimestamp                             = 0   // [Type: Uint16, Base: uint16, Scale: 32768, Offset: 0, Units: s];
	HrTime256                                         = 1   // [Type: Uint8, Base: uint8, Scale: 256, Offset: 0, Units: s];
	HrTimestamp                                       = 253 // [Type: DateTime, Base: uint32];
	HrZoneHighBpm                                     = 1   // [Type: Uint8, Base: uint8, Units: bpm];
	HrZoneMessageIndex                                = 254 // [Type: MessageIndex, Base: uint16];
	HrZoneName                                        = 2   // [Type: String, Base: string];
	HrmProfileEnabled                                 = 0   // [Type: Bool, Base: bool];
	HrmProfileHrmAntId                                = 1   // [Type: Uint16z, Base: uint16z];
	HrmProfileHrmAntIdTransType                       = 3   // [Type: Uint8z, Base: uint8z];
	HrmProfileLogHrv                                  = 2   // [Type: Bool, Base: bool];
	HrmProfileMessageIndex                            = 254 // [Type: MessageIndex, Base: uint16];
	HrvStatusSummaryBaselineBalancedLower             = 4   // [Type: Uint16, Base: uint16, Scale: 128, Offset: 0, Units: ms]; 3 week baseline, lower boundary of balanced HRV status
	HrvStatusSummaryBaselineBalancedUpper             = 5   // [Type: Uint16, Base: uint16, Scale: 128, Offset: 0, Units: ms]; 3 week baseline, upper boundary of balanced HRV status
	HrvStatusSummaryBaselineLowUpper                  = 3   // [Type: Uint16, Base: uint16, Scale: 128, Offset: 0, Units: ms]; 3 week baseline, upper boundary of low HRV status
	HrvStatusSummaryLastNight5MinHigh                 = 2   // [Type: Uint16, Base: uint16, Scale: 128, Offset: 0, Units: ms]; 5 minute high RMSSD value over sleep
	HrvStatusSummaryLastNightAverage                  = 1   // [Type: Uint16, Base: uint16, Scale: 128, Offset: 0, Units: ms]; Last night RMSSD average over sleep
	HrvStatusSummaryStatus                            = 6   // [Type: HrvStatus, Base: enum];
	HrvStatusSummaryTimestamp                         = 253 // [Type: DateTime, Base: uint32];
	HrvStatusSummaryWeeklyAverage                     = 0   // [Type: Uint16, Base: uint16, Scale: 128, Offset: 0, Units: ms]; 7 day RMSSD average over sleep
	HrvTime                                           = 0   // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: s]; Time between beats
	HrvValueTimestamp                                 = 253 // [Type: DateTime, Base: uint32];
	HrvValueValue                                     = 0   // [Type: Uint16, Base: uint16, Scale: 128, Offset: 0, Units: ms]; 5 minute RMSSD
	JumpDistance                                      = 0   // [Type: Float32, Base: float32, Units: m];
	JumpEnhancedSpeed                                 = 8   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	JumpHangTime                                      = 3   // [Type: Float32, Base: float32, Units: s];
	JumpHeight                                        = 1   // [Type: Float32, Base: float32, Units: m];
	JumpPositionLat                                   = 5   // [Type: Sint32, Base: sint32, Units: semicircles];
	JumpPositionLong                                  = 6   // [Type: Sint32, Base: sint32, Units: semicircles];
	JumpRotations                                     = 2   // [Type: Uint8, Base: uint8];
	JumpScore                                         = 4   // [Type: Float32, Base: float32]; A score for a jump calculated based on hang time, rotations, and distance.
	JumpSpeed                                         = 7   // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	JumpTimestamp                                     = 253 // [Type: DateTime, Base: uint32, Units: s];
	LapAvgAltitude                                    = 42  // [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	LapAvgCadence                                     = 17  // [Type: Uint8, Base: uint8, Units: rpm]; total_cycles / total_timer_time if non_zero_avg_cadence otherwise total_cycles / total_elapsed_time
	LapAvgCadencePosition                             = 108 // [Type: Uint8, Base: uint8, Units: rpm]; Average cadence by position. Data value indexes defined by rider_position_type.
	LapAvgCombinedPedalSmoothness                     = 95  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	LapAvgCoreTemperature                             = 158 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: C];
	LapAvgDepth                                       = 122 // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	LapAvgFlow                                        = 154 // [Type: Float32, Base: float32, Units: Flow]; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	LapAvgFractionalCadence                           = 80  // [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: rpm]; fractional part of the avg_cadence
	LapAvgGrade                                       = 45  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	LapAvgGrit                                        = 153 // [Type: Float32, Base: float32, Units: kGrit]; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	LapAvgHeartRate                                   = 15  // [Type: Uint8, Base: uint8, Units: bpm];
	LapAvgLeftPco                                     = 100 // [Type: Sint8, Base: sint8, Units: mm]; Average left platform center offset
	LapAvgLeftPedalSmoothness                         = 93  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	LapAvgLeftPowerPhase                              = 102 // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Average left power phase angles. Data value indexes defined by power_phase_type.
	LapAvgLeftPowerPhasePeak                          = 103 // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Average left power phase peak angles. Data value indexes defined by power_phase_type.
	LapAvgLeftTorqueEffectiveness                     = 91  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	LapAvgLevMotorPower                               = 115 // [Type: Uint16, Base: uint16, Units: watts]; lev average motor power during lap
	LapAvgNegGrade                                    = 47  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	LapAvgNegVerticalSpeed                            = 54  // [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	LapAvgPosGrade                                    = 46  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	LapAvgPosVerticalSpeed                            = 53  // [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	LapAvgPower                                       = 19  // [Type: Uint16, Base: uint16, Units: watts]; total_power / total_timer_time if non_zero_avg_power otherwise total_power / total_elapsed_time
	LapAvgPowerPosition                               = 106 // [Type: Uint16, Base: uint16, Units: watts]; Average power by position. Data value indexes defined by rider_position_type.
	LapAvgRespirationRate                             = 147 // [Type: Uint8, Base: uint8];
	LapAvgRightPco                                    = 101 // [Type: Sint8, Base: sint8, Units: mm]; Average right platform center offset
	LapAvgRightPedalSmoothness                        = 94  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	LapAvgRightPowerPhase                             = 104 // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Average right power phase angles. Data value indexes defined by power_phase_type.
	LapAvgRightPowerPhasePeak                         = 105 // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Average right power phase peak angles. Data value indexes defined by power_phase_type.
	LapAvgRightTorqueEffectiveness                    = 92  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	LapAvgSaturatedHemoglobinPercent                  = 87  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %]; Avg percentage of hemoglobin saturated with oxygen
	LapAvgSpeed                                       = 13  // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	LapAvgStanceTime                                  = 79  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: ms];
	LapAvgStanceTimeBalance                           = 119 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	LapAvgStanceTimePercent                           = 78  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	LapAvgStepLength                                  = 120 // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: mm];
	LapAvgStrokeDistance                              = 37  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m];
	LapAvgTemperature                                 = 50  // [Type: Sint8, Base: sint8, Units: C];
	LapAvgTotalHemoglobinConc                         = 84  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: g/dL]; Avg saturated and unsaturated hemoglobin
	LapAvgVam                                         = 121 // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	LapAvgVerticalOscillation                         = 77  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: mm];
	LapAvgVerticalRatio                               = 118 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	LapEndPositionLat                                 = 5   // [Type: Sint32, Base: sint32, Units: semicircles];
	LapEndPositionLong                                = 6   // [Type: Sint32, Base: sint32, Units: semicircles];
	LapEnhancedAvgAltitude                            = 112 // [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	LapEnhancedAvgRespirationRate                     = 136 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: Breaths/min];
	LapEnhancedAvgSpeed                               = 110 // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	LapEnhancedMaxAltitude                            = 114 // [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	LapEnhancedMaxRespirationRate                     = 137 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: Breaths/min];
	LapEnhancedMaxSpeed                               = 111 // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	LapEnhancedMinAltitude                            = 113 // [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	LapEvent                                          = 0   // [Type: Event, Base: enum];
	LapEventGroup                                     = 26  // [Type: Uint8, Base: uint8];
	LapEventType                                      = 1   // [Type: EventType, Base: enum];
	LapFirstLengthIndex                               = 35  // [Type: Uint16, Base: uint16];
	LapGpsAccuracy                                    = 44  // [Type: Uint8, Base: uint8, Units: m];
	LapIntensity                                      = 23  // [Type: Intensity, Base: enum];
	LapJumpCount                                      = 151 // [Type: Uint16, Base: uint16];
	LapLapTrigger                                     = 24  // [Type: LapTrigger, Base: enum];
	LapLeftRightBalance                               = 34  // [Type: LeftRightBalance100, Base: uint16];
	LapLevBatteryConsumption                          = 117 // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent]; lev battery consumption during lap
	LapMaxAltitude                                    = 43  // [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	LapMaxCadence                                     = 18  // [Type: Uint8, Base: uint8, Units: rpm];
	LapMaxCadencePosition                             = 109 // [Type: Uint8, Base: uint8, Units: rpm]; Maximum cadence by position. Data value indexes defined by rider_position_type.
	LapMaxCoreTemperature                             = 160 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: C];
	LapMaxDepth                                       = 123 // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	LapMaxFractionalCadence                           = 81  // [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: rpm]; fractional part of the max_cadence
	LapMaxHeartRate                                   = 16  // [Type: Uint8, Base: uint8, Units: bpm];
	LapMaxLevMotorPower                               = 116 // [Type: Uint16, Base: uint16, Units: watts]; lev maximum motor power during lap
	LapMaxNegGrade                                    = 49  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	LapMaxNegVerticalSpeed                            = 56  // [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	LapMaxPosGrade                                    = 48  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	LapMaxPosVerticalSpeed                            = 55  // [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	LapMaxPower                                       = 20  // [Type: Uint16, Base: uint16, Units: watts];
	LapMaxPowerPosition                               = 107 // [Type: Uint16, Base: uint16, Units: watts]; Maximum power by position. Data value indexes defined by rider_position_type.
	LapMaxRespirationRate                             = 148 // [Type: Uint8, Base: uint8];
	LapMaxSaturatedHemoglobinPercent                  = 89  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %]; Max percentage of hemoglobin saturated with oxygen
	LapMaxSpeed                                       = 14  // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	LapMaxTemperature                                 = 51  // [Type: Sint8, Base: sint8, Units: C];
	LapMaxTotalHemoglobinConc                         = 86  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: g/dL]; Max saturated and unsaturated hemoglobin
	LapMessageIndex                                   = 254 // [Type: MessageIndex, Base: uint16];
	LapMinAltitude                                    = 62  // [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	LapMinCoreTemperature                             = 159 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: C];
	LapMinHeartRate                                   = 63  // [Type: Uint8, Base: uint8, Units: bpm];
	LapMinSaturatedHemoglobinPercent                  = 88  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %]; Min percentage of hemoglobin saturated with oxygen
	LapMinTemperature                                 = 124 // [Type: Sint8, Base: sint8, Units: C];
	LapMinTotalHemoglobinConc                         = 85  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: g/dL]; Min saturated and unsaturated hemoglobin
	LapNormalizedPower                                = 33  // [Type: Uint16, Base: uint16, Units: watts];
	LapNumActiveLengths                               = 40  // [Type: Uint16, Base: uint16, Units: lengths]; # of active lengths of swim pool
	LapNumLengths                                     = 32  // [Type: Uint16, Base: uint16, Units: lengths]; # of lengths of swim pool
	LapOpponentScore                                  = 74  // [Type: Uint16, Base: uint16];
	LapPlayerScore                                    = 83  // [Type: Uint16, Base: uint16];
	LapRepetitionNum                                  = 61  // [Type: Uint16, Base: uint16];
	LapSport                                          = 25  // [Type: Sport, Base: enum];
	LapStandCount                                     = 99  // [Type: Uint16, Base: uint16]; Number of transitions to the standing state
	LapStartPositionLat                               = 3   // [Type: Sint32, Base: sint32, Units: semicircles];
	LapStartPositionLong                              = 4   // [Type: Sint32, Base: sint32, Units: semicircles];
	LapStartTime                                      = 2   // [Type: DateTime, Base: uint32];
	LapStrokeCount                                    = 75  // [Type: Uint16, Base: uint16, Units: counts]; stroke_type enum used as the index
	LapSubSport                                       = 39  // [Type: SubSport, Base: enum];
	LapSwimStroke                                     = 38  // [Type: SwimStroke, Base: enum];
	LapTimeInCadenceZone                              = 59  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	LapTimeInHrZone                                   = 57  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	LapTimeInPowerZone                                = 60  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	LapTimeInSpeedZone                                = 58  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	LapTimeStanding                                   = 98  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Total time spent in the standing position
	LapTimestamp                                      = 253 // [Type: DateTime, Base: uint32, Units: s]; Lap end time.
	LapTotalAscent                                    = 21  // [Type: Uint16, Base: uint16, Units: m];
	LapTotalCalories                                  = 11  // [Type: Uint16, Base: uint16, Units: kcal];
	LapTotalCycles                                    = 10  // [Type: Uint32, Base: uint32, Units: cycles];
	LapTotalDescent                                   = 22  // [Type: Uint16, Base: uint16, Units: m];
	LapTotalDistance                                  = 9   // [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	LapTotalElapsedTime                               = 7   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Time (includes pauses)
	LapTotalFatCalories                               = 12  // [Type: Uint16, Base: uint16, Units: kcal]; If New Leaf
	LapTotalFlow                                      = 150 // [Type: Float32, Base: float32, Units: Flow]; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	LapTotalFractionalAscent                          = 156 // [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m]; fractional part of total_ascent
	LapTotalFractionalCycles                          = 82  // [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: cycles]; fractional part of the total_cycles
	LapTotalFractionalDescent                         = 157 // [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m]; fractional part of total_descent
	LapTotalGrit                                      = 149 // [Type: Float32, Base: float32, Units: kGrit]; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	LapTotalMovingTime                                = 52  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	LapTotalTimerTime                                 = 8   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Timer Time (excludes pauses)
	LapTotalWork                                      = 41  // [Type: Uint32, Base: uint32, Units: J];
	LapWktStepIndex                                   = 71  // [Type: MessageIndex, Base: uint16];
	LapZoneCount                                      = 76  // [Type: Uint16, Base: uint16, Units: counts]; zone number used as the index
	LengthAvgRespirationRate                          = 24  // [Type: Uint8, Base: uint8];
	LengthAvgSpeed                                    = 6   // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	LengthAvgSwimmingCadence                          = 9   // [Type: Uint8, Base: uint8, Units: strokes/min];
	LengthEnhancedAvgRespirationRate                  = 22  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: Breaths/min];
	LengthEnhancedMaxRespirationRate                  = 23  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: Breaths/min];
	LengthEvent                                       = 0   // [Type: Event, Base: enum];
	LengthEventGroup                                  = 10  // [Type: Uint8, Base: uint8];
	LengthEventType                                   = 1   // [Type: EventType, Base: enum];
	LengthLengthType                                  = 12  // [Type: LengthType, Base: enum];
	LengthMaxRespirationRate                          = 25  // [Type: Uint8, Base: uint8];
	LengthMessageIndex                                = 254 // [Type: MessageIndex, Base: uint16];
	LengthOpponentScore                               = 19  // [Type: Uint16, Base: uint16];
	LengthPlayerScore                                 = 18  // [Type: Uint16, Base: uint16];
	LengthStartTime                                   = 2   // [Type: DateTime, Base: uint32];
	LengthStrokeCount                                 = 20  // [Type: Uint16, Base: uint16, Units: counts]; stroke_type enum used as the index
	LengthSwimStroke                                  = 7   // [Type: SwimStroke, Base: enum, Units: swim_stroke];
	LengthTimestamp                                   = 253 // [Type: DateTime, Base: uint32];
	LengthTotalCalories                               = 11  // [Type: Uint16, Base: uint16, Units: kcal];
	LengthTotalElapsedTime                            = 3   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	LengthTotalStrokes                                = 5   // [Type: Uint16, Base: uint16, Units: strokes];
	LengthTotalTimerTime                              = 4   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	LengthZoneCount                                   = 21  // [Type: Uint16, Base: uint16, Units: counts]; zone number used as the index
	MagnetometerDataCalibratedMagX                    = 5   // [Type: Float32, Base: float32, Units: G]; Calibrated Magnetometer reading
	MagnetometerDataCalibratedMagY                    = 6   // [Type: Float32, Base: float32, Units: G]; Calibrated Magnetometer reading
	MagnetometerDataCalibratedMagZ                    = 7   // [Type: Float32, Base: float32, Units: G]; Calibrated Magnetometer reading
	MagnetometerDataMagX                              = 2   // [Type: Uint16, Base: uint16, Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	MagnetometerDataMagY                              = 3   // [Type: Uint16, Base: uint16, Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	MagnetometerDataMagZ                              = 4   // [Type: Uint16, Base: uint16, Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	MagnetometerDataSampleTimeOffset                  = 1   // [Type: Uint16, Base: uint16, Units: ms]; Each time in the array describes the time at which the compass sample with the corrosponding index was taken. Limited to 30 samples in each message. The samples may span across seconds. Array size must match the number of samples in cmps_x and cmps_y and cmps_z
	MagnetometerDataTimestamp                         = 253 // [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp
	MagnetometerDataTimestampMs                       = 0   // [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the timestamp.
	MaxMetDataCalibratedData                          = 9   // [Type: Bool, Base: bool]; Indicates if calibrated data was used in the calculation
	MaxMetDataHrSource                                = 12  // [Type: MaxMetHeartRateSource, Base: enum]; Indicates if the estimate was obtained using a chest strap or wrist heart rate
	MaxMetDataMaxMetCategory                          = 8   // [Type: MaxMetCategory, Base: enum];
	MaxMetDataSpeedSource                             = 13  // [Type: MaxMetSpeedSource, Base: enum]; Indidcates if the estimate was obtained using onboard GPS or connected GPS
	MaxMetDataSport                                   = 5   // [Type: Sport, Base: enum];
	MaxMetDataSubSport                                = 6   // [Type: SubSport, Base: enum];
	MaxMetDataUpdateTime                              = 0   // [Type: DateTime, Base: uint32]; Time maxMET and vo2 were calculated
	MaxMetDataVo2Max                                  = 2   // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: mL/kg/min];
	MemoGlobData                                      = 4   // [Type: Uint8z, Base: uint8z]; Block of utf8 bytes. Note, mutltibyte characters may be split across adjoining memo_glob messages.
	MemoGlobFieldNum                                  = 3   // [Type: Uint8, Base: uint8]; Field within the parent that this glob is associated with
	MemoGlobMemo                                      = 0   // [Type: Byte, Base: byte]; Deprecated. Use data field.
	MemoGlobMesgNum                                   = 1   // [Type: MesgNum, Base: uint16]; Message Number of the parent message
	MemoGlobParentIndex                               = 2   // [Type: MessageIndex, Base: uint16]; Index of mesg that this glob is associated with.
	MemoGlobPartIndex                                 = 250 // [Type: Uint32, Base: uint32]; Sequence number of memo blocks
	MesgCapabilitiesCount                             = 3   // [Type: Uint16, Base: uint16];
	MesgCapabilitiesCountType                         = 2   // [Type: MesgCount, Base: enum];
	MesgCapabilitiesFile                              = 0   // [Type: File, Base: enum];
	MesgCapabilitiesMesgNum                           = 1   // [Type: MesgNum, Base: uint16];
	MesgCapabilitiesMessageIndex                      = 254 // [Type: MessageIndex, Base: uint16];
	MetZoneCalories                                   = 2   // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: kcal / min];
	MetZoneFatCalories                                = 3   // [Type: Uint8, Base: uint8, Scale: 10, Offset: 0, Units: kcal / min];
	MetZoneHighBpm                                    = 1   // [Type: Uint8, Base: uint8];
	MetZoneMessageIndex                               = 254 // [Type: MessageIndex, Base: uint16];
	MonitoringActiveCalories                          = 19  // [Type: Uint16, Base: uint16, Units: kcal];
	MonitoringActiveTime                              = 4   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	MonitoringActiveTime16                            = 10  // [Type: Uint16, Base: uint16, Units: s];
	MonitoringActivityLevel                           = 7   // [Type: ActivityLevel, Base: enum];
	MonitoringActivitySubtype                         = 6   // [Type: ActivitySubtype, Base: enum];
	MonitoringActivityTime                            = 16  // [Type: Uint16, Base: uint16, Units: minutes]; Indexed using minute_activity_level enum
	MonitoringActivityType                            = 5   // [Type: ActivityType, Base: enum];
	MonitoringAscent                                  = 31  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m];
	MonitoringCalories                                = 1   // [Type: Uint16, Base: uint16, Units: kcal]; Accumulated total calories. Maintained by MonitoringReader for each activity_type. See SDK documentation
	MonitoringCurrentActivityTypeIntensity            = 24  // [Type: Byte, Base: byte]; Indicates single type / intensity for duration since last monitoring message.
	MonitoringCycles                                  = 3   // [Type: Uint32, Base: uint32, Scale: 2, Offset: 0, Units: cycles]; Accumulated cycles. Maintained by MonitoringReader for each activity_type. See SDK documentation.
	MonitoringCycles16                                = 9   // [Type: Uint16, Base: uint16, Units: 2 * cycles (steps)];
	MonitoringDescent                                 = 32  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m];
	MonitoringDeviceIndex                             = 0   // [Type: DeviceIndex, Base: uint8]; Associates this data to device_info message. Not required for file with single device (sensor).
	MonitoringDistance                                = 2   // [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m]; Accumulated distance. Maintained by MonitoringReader for each activity_type. See SDK documentation.
	MonitoringDistance16                              = 8   // [Type: Uint16, Base: uint16, Units: 100 * m];
	MonitoringDuration                                = 30  // [Type: Uint32, Base: uint32, Units: s];
	MonitoringDurationMin                             = 29  // [Type: Uint16, Base: uint16, Units: min];
	MonitoringHeartRate                               = 27  // [Type: Uint8, Base: uint8, Units: bpm];
	MonitoringHrDataCurrentDayRestingHeartRate        = 1   // [Type: Uint8, Base: uint8, Units: bpm]; RHR for today only. (Feeds into 7-day average)
	MonitoringHrDataRestingHeartRate                  = 0   // [Type: Uint8, Base: uint8, Units: bpm]; 7-day rolling average
	MonitoringHrDataTimestamp                         = 253 // [Type: DateTime, Base: uint32, Units: s]; Must align to logging interval, for example, time must be 00:00:00 for daily log.
	MonitoringInfoActivityType                        = 1   // [Type: ActivityType, Base: enum];
	MonitoringInfoCyclesToCalories                    = 4   // [Type: Uint16, Base: uint16, Scale: 5000, Offset: 0, Units: kcal/cycle]; Indexed by activity_type
	MonitoringInfoCyclesToDistance                    = 3   // [Type: Uint16, Base: uint16, Scale: 5000, Offset: 0, Units: m/cycle]; Indexed by activity_type
	MonitoringInfoLocalTimestamp                      = 0   // [Type: LocalDateTime, Base: uint32, Units: s]; Use to convert activity timestamps to local time if device does not support time zone and daylight savings time correction.
	MonitoringInfoRestingMetabolicRate                = 5   // [Type: Uint16, Base: uint16, Units: kcal / day];
	MonitoringInfoTimestamp                           = 253 // [Type: DateTime, Base: uint32, Units: s];
	MonitoringIntensity                               = 28  // [Type: Uint8, Base: uint8, Scale: 10, Offset: 0];
	MonitoringLocalTimestamp                          = 11  // [Type: LocalDateTime, Base: uint32]; Must align to logging interval, for example, time must be 00:00:00 for daily log.
	MonitoringModerateActivityMinutes                 = 33  // [Type: Uint16, Base: uint16, Units: minutes];
	MonitoringTemperature                             = 12  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: C]; Avg temperature during the logging interval ended at timestamp
	MonitoringTemperatureMax                          = 15  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: C]; Max temperature during the logging interval ended at timestamp
	MonitoringTemperatureMin                          = 14  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: C]; Min temperature during the logging interval ended at timestamp
	MonitoringTimestamp                               = 253 // [Type: DateTime, Base: uint32, Units: s]; Must align to logging interval, for example, time must be 00:00:00 for daily log.
	MonitoringTimestamp16                             = 26  // [Type: Uint16, Base: uint16, Units: s];
	MonitoringTimestampMin8                           = 25  // [Type: Uint8, Base: uint8, Units: min];
	MonitoringVigorousActivityMinutes                 = 34  // [Type: Uint16, Base: uint16, Units: minutes];
	NmeaSentenceSentence                              = 1   // [Type: String, Base: string]; NMEA sentence
	NmeaSentenceTimestamp                             = 253 // [Type: DateTime, Base: uint32, Units: s]; Timestamp message was output
	NmeaSentenceTimestampMs                           = 0   // [Type: Uint16, Base: uint16, Units: ms]; Fractional part of timestamp, added to timestamp
	ObdiiDataPid                                      = 2   // [Type: Byte, Base: byte]; Parameter ID
	ObdiiDataPidDataSize                              = 4   // [Type: Uint8, Base: uint8]; Optional, data size of PID[i]. If not specified refer to SAE J1979.
	ObdiiDataRawData                                  = 3   // [Type: Byte, Base: byte]; Raw parameter data
	ObdiiDataStartTimestamp                           = 6   // [Type: DateTime, Base: uint32]; Timestamp of first sample recorded in the message. Used with time_offset to generate time of each sample
	ObdiiDataStartTimestampMs                         = 7   // [Type: Uint16, Base: uint16, Units: ms]; Fractional part of start_timestamp
	ObdiiDataSystemTime                               = 5   // [Type: Uint32, Base: uint32]; System time associated with sample expressed in ms, can be used instead of time_offset. There will be a system_time value for each raw_data element. For multibyte pids the system_time is repeated.
	ObdiiDataTimeOffset                               = 1   // [Type: Uint16, Base: uint16, Units: ms]; Offset of PID reading [i] from start_timestamp+start_timestamp_ms. Readings may span accross seconds.
	ObdiiDataTimestamp                                = 253 // [Type: DateTime, Base: uint32, Units: s]; Timestamp message was output
	ObdiiDataTimestampMs                              = 0   // [Type: Uint16, Base: uint16, Units: ms]; Fractional part of timestamp, added to timestamp
	OhrSettingsEnabled                                = 0   // [Type: Switch, Base: enum];
	OhrSettingsTimestamp                              = 253 // [Type: DateTime, Base: uint32, Units: s];
	OneDSensorCalibrationCalibrationDivisor           = 2   // [Type: Uint32, Base: uint32, Units: counts]; Calibration factor divisor
	OneDSensorCalibrationCalibrationFactor            = 1   // [Type: Uint32, Base: uint32]; Calibration factor used to convert from raw ADC value to degrees, g, etc.
	OneDSensorCalibrationLevelShift                   = 3   // [Type: Uint32, Base: uint32]; Level shift value used to shift the ADC value back into range
	OneDSensorCalibrationOffsetCal                    = 4   // [Type: Sint32, Base: sint32]; Internal Calibration factor
	OneDSensorCalibrationSensorType                   = 0   // [Type: SensorType, Base: enum]; Indicates which sensor the calibration is for
	OneDSensorCalibrationTimestamp                    = 253 // [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp
	PowerZoneHighValue                                = 1   // [Type: Uint16, Base: uint16, Units: watts];
	PowerZoneMessageIndex                             = 254 // [Type: MessageIndex, Base: uint16];
	PowerZoneName                                     = 2   // [Type: String, Base: string];
	RecordAbsolutePressure                            = 91  // [Type: Uint32, Base: uint32, Units: Pa]; Includes atmospheric pressure
	RecordAccumulatedPower                            = 29  // [Type: Uint32, Base: uint32, Units: watts];
	RecordActivityType                                = 42  // [Type: ActivityType, Base: enum];
	RecordAirTimeRemaining                            = 123 // [Type: Uint32, Base: uint32, Units: s];
	RecordAltitude                                    = 2   // [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	RecordAscentRate                                  = 127 // [Type: Sint32, Base: sint32, Scale: 1000, Offset: 0, Units: m/s];
	RecordBallSpeed                                   = 51  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m/s];
	RecordBatterySoc                                  = 81  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent]; lev battery state of charge
	RecordCadence                                     = 4   // [Type: Uint8, Base: uint8, Units: rpm];
	RecordCadence256                                  = 52  // [Type: Uint16, Base: uint16, Scale: 256, Offset: 0, Units: rpm]; Log cadence and fractional cadence for backwards compatability
	RecordCalories                                    = 33  // [Type: Uint16, Base: uint16, Units: kcal];
	RecordCnsLoad                                     = 97  // [Type: Uint8, Base: uint8, Units: percent];
	RecordCombinedPedalSmoothness                     = 47  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	RecordCompressedAccumulatedPower                  = 28  // [Type: Uint16, Base: uint16, Units: watts];
	RecordCompressedSpeedDistance                     = 8   // [Type: Byte, Base: byte, Scale: 100, Offset: 0, Units: m/s,m];
	RecordCoreTemperature                             = 139 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: C];
	RecordCurrentStress                               = 116 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0]; Current Stress value
	RecordCycleLength                                 = 12  // [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m];
	RecordCycleLength16                               = 87  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m]; Supports larger cycle sizes needed for paddlesports. Max cycle size: 655.35
	RecordCycles                                      = 18  // [Type: Uint8, Base: uint8, Units: cycles];
	RecordDepth                                       = 92  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	RecordDeviceIndex                                 = 62  // [Type: DeviceIndex, Base: uint8];
	RecordDistance                                    = 5   // [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	RecordEbikeAssistLevelPercent                     = 120 // [Type: Uint8, Base: uint8, Units: percent];
	RecordEbikeAssistMode                             = 119 // [Type: Uint8, Base: uint8, Units: depends on sensor];
	RecordEbikeBatteryLevel                           = 118 // [Type: Uint8, Base: uint8, Units: percent];
	RecordEbikeTravelRange                            = 117 // [Type: Uint16, Base: uint16, Units: km];
	RecordEnhancedAltitude                            = 78  // [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	RecordEnhancedRespirationRate                     = 108 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: Breaths/min];
	RecordEnhancedSpeed                               = 73  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	RecordFlow                                        = 115 // [Type: Float32, Base: float32]; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	RecordFractionalCadence                           = 53  // [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: rpm];
	RecordGpsAccuracy                                 = 31  // [Type: Uint8, Base: uint8, Units: m];
	RecordGrade                                       = 9   // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	RecordGrit                                        = 114 // [Type: Float32, Base: float32]; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	RecordHeartRate                                   = 3   // [Type: Uint8, Base: uint8, Units: bpm];
	RecordLeftPco                                     = 67  // [Type: Sint8, Base: sint8, Units: mm]; Left platform center offset
	RecordLeftPedalSmoothness                         = 45  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	RecordLeftPowerPhase                              = 69  // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Left power phase angles. Data value indexes defined by power_phase_type.
	RecordLeftPowerPhasePeak                          = 70  // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Left power phase peak angles. Data value indexes defined by power_phase_type.
	RecordLeftRightBalance                            = 30  // [Type: LeftRightBalance, Base: uint8];
	RecordLeftTorqueEffectiveness                     = 43  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	RecordMotorPower                                  = 82  // [Type: Uint16, Base: uint16, Units: watts]; lev motor power
	RecordN2Load                                      = 98  // [Type: Uint16, Base: uint16, Units: percent];
	RecordNdlTime                                     = 96  // [Type: Uint32, Base: uint32, Units: s];
	RecordNextStopDepth                               = 93  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	RecordNextStopTime                                = 94  // [Type: Uint32, Base: uint32, Units: s];
	RecordPo2                                         = 129 // [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: percent]; Current partial pressure of oxygen
	RecordPositionLat                                 = 0   // [Type: Sint32, Base: sint32, Units: semicircles];
	RecordPositionLong                                = 1   // [Type: Sint32, Base: sint32, Units: semicircles];
	RecordPower                                       = 7   // [Type: Uint16, Base: uint16, Units: watts];
	RecordPressureSac                                 = 124 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: bar/min]; Pressure-based surface air consumption
	RecordResistance                                  = 10  // [Type: Uint8, Base: uint8]; Relative. 0 is none 254 is Max.
	RecordRespirationRate                             = 99  // [Type: Uint8, Base: uint8, Units: s];
	RecordRightPco                                    = 68  // [Type: Sint8, Base: sint8, Units: mm]; Right platform center offset
	RecordRightPedalSmoothness                        = 46  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	RecordRightPowerPhase                             = 71  // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Right power phase angles. Data value indexes defined by power_phase_type.
	RecordRightPowerPhasePeak                         = 72  // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Right power phase peak angles. Data value indexes defined by power_phase_type.
	RecordRightTorqueEffectiveness                    = 44  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	RecordRmv                                         = 126 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: L/min]; Respiratory minute volume
	RecordSaturatedHemoglobinPercent                  = 57  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %]; Percentage of hemoglobin saturated with oxygen
	RecordSaturatedHemoglobinPercentMax               = 59  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %]; Max percentage of hemoglobin saturated with oxygen
	RecordSaturatedHemoglobinPercentMin               = 58  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %]; Min percentage of hemoglobin saturated with oxygen
	RecordSpeed                                       = 6   // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	RecordSpeed1S                                     = 17  // [Type: Uint8, Base: uint8, Scale: 16, Offset: 0, Units: m/s]; Speed at 1s intervals. Timestamp field indicates time of last array element.
	RecordStanceTime                                  = 41  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: ms];
	RecordStanceTimeBalance                           = 84  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	RecordStanceTimePercent                           = 40  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	RecordStepLength                                  = 85  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: mm];
	RecordStrokeType                                  = 49  // [Type: StrokeType, Base: enum];
	RecordTemperature                                 = 13  // [Type: Sint8, Base: sint8, Units: C];
	RecordTime128                                     = 48  // [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: s];
	RecordTimeFromCourse                              = 11  // [Type: Sint32, Base: sint32, Scale: 1000, Offset: 0, Units: s];
	RecordTimeToSurface                               = 95  // [Type: Uint32, Base: uint32, Units: s];
	RecordTimestamp                                   = 253 // [Type: DateTime, Base: uint32, Units: s];
	RecordTotalCycles                                 = 19  // [Type: Uint32, Base: uint32, Units: cycles];
	RecordTotalHemoglobinConc                         = 54  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: g/dL]; Total saturated and unsaturated hemoglobin
	RecordTotalHemoglobinConcMax                      = 56  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: g/dL]; Max saturated and unsaturated hemoglobin
	RecordTotalHemoglobinConcMin                      = 55  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: g/dL]; Min saturated and unsaturated hemoglobin
	RecordVerticalOscillation                         = 39  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: mm];
	RecordVerticalRatio                               = 83  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	RecordVerticalSpeed                               = 32  // [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	RecordVolumeSac                                   = 125 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: L/min]; Volumetric surface air consumption
	RecordZone                                        = 50  // [Type: Uint8, Base: uint8];
	RespirationRateRespirationRate                    = 0   // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: breaths/min]; Breaths * 100 /min, -300 indicates invalid, -200 indicates large motion, -100 indicates off wrist
	RespirationRateTimestamp                          = 253 // [Type: DateTime, Base: uint32];
	ScheduleCompleted                                 = 4   // [Type: Bool, Base: bool]; TRUE if this activity has been started
	ScheduleManufacturer                              = 0   // [Type: Manufacturer, Base: uint16]; Corresponds to file_id of scheduled workout / course.
	ScheduleProduct                                   = 1   // [Type: Uint16, Base: uint16]; Corresponds to file_id of scheduled workout / course.
	ScheduleScheduledTime                             = 6   // [Type: LocalDateTime, Base: uint32];
	ScheduleSerialNumber                              = 2   // [Type: Uint32z, Base: uint32z]; Corresponds to file_id of scheduled workout / course.
	ScheduleTimeCreated                               = 3   // [Type: DateTime, Base: uint32]; Corresponds to file_id of scheduled workout / course.
	ScheduleType                                      = 5   // [Type: Schedule, Base: enum];
	SdmProfileEnabled                                 = 0   // [Type: Bool, Base: bool];
	SdmProfileMessageIndex                            = 254 // [Type: MessageIndex, Base: uint16];
	SdmProfileOdometer                                = 3   // [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	SdmProfileOdometerRollover                        = 7   // [Type: Uint8, Base: uint8]; Rollover counter that can be used to extend the odometer
	SdmProfileSdmAntId                                = 1   // [Type: Uint16z, Base: uint16z];
	SdmProfileSdmAntIdTransType                       = 5   // [Type: Uint8z, Base: uint8z];
	SdmProfileSdmCalFactor                            = 2   // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %];
	SdmProfileSpeedSource                             = 4   // [Type: Bool, Base: bool]; Use footpod for speed source instead of GPS
	SegmentFileDefaultRaceLeader                      = 11  // [Type: Uint8, Base: uint8]; Index for the Leader Board entry selected as the default race participant
	SegmentFileEnabled                                = 3   // [Type: Bool, Base: bool]; Enabled state of the segment file
	SegmentFileFileUuid                               = 1   // [Type: String, Base: string]; UUID of the segment file
	SegmentFileLeaderActivityId                       = 9   // [Type: Uint32, Base: uint32]; Activity ID of each leader in the segment file
	SegmentFileLeaderActivityIdString                 = 10  // [Type: String, Base: string]; String version of the activity ID of each leader in the segment file. 21 characters long for each ID, express in decimal
	SegmentFileLeaderGroupPrimaryKey                  = 8   // [Type: Uint32, Base: uint32]; Group primary key of each leader in the segment file
	SegmentFileLeaderType                             = 7   // [Type: SegmentLeaderboardType, Base: enum]; Leader type of each leader in the segment file
	SegmentFileMessageIndex                           = 254 // [Type: MessageIndex, Base: uint16];
	SegmentFileUserProfilePrimaryKey                  = 4   // [Type: Uint32, Base: uint32]; Primary key of the user that created the segment file
	SegmentIdDefaultRaceLeader                        = 6   // [Type: Uint8, Base: uint8]; Index for the Leader Board entry selected as the default race participant
	SegmentIdDeleteStatus                             = 7   // [Type: SegmentDeleteStatus, Base: enum]; Indicates if any segments should be deleted
	SegmentIdDeviceId                                 = 5   // [Type: Uint32, Base: uint32]; ID of the device that created the segment
	SegmentIdEnabled                                  = 3   // [Type: Bool, Base: bool]; Segment enabled for evaluation
	SegmentIdName                                     = 0   // [Type: String, Base: string]; Friendly name assigned to segment
	SegmentIdSelectionType                            = 8   // [Type: SegmentSelectionType, Base: enum]; Indicates how the segment was selected to be sent to the device
	SegmentIdSport                                    = 2   // [Type: Sport, Base: enum]; Sport associated with the segment
	SegmentIdUserProfilePrimaryKey                    = 4   // [Type: Uint32, Base: uint32]; Primary key of the user that created the segment
	SegmentIdUuid                                     = 1   // [Type: String, Base: string]; UUID of the segment
	SegmentLapActiveTime                              = 56  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SegmentLapAvgAltitude                             = 34  // [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	SegmentLapAvgCadence                              = 17  // [Type: Uint8, Base: uint8, Units: rpm]; total_cycles / total_timer_time if non_zero_avg_cadence otherwise total_cycles / total_elapsed_time
	SegmentLapAvgCadencePosition                      = 81  // [Type: Uint8, Base: uint8, Units: rpm]; Average cadence by position. Data value indexes defined by rider_position_type.
	SegmentLapAvgCombinedPedalSmoothness              = 63  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SegmentLapAvgFlow                                 = 87  // [Type: Float32, Base: float32, Units: Flow]; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	SegmentLapAvgFractionalCadence                    = 66  // [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: rpm]; fractional part of the avg_cadence
	SegmentLapAvgGrade                                = 37  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SegmentLapAvgGrit                                 = 86  // [Type: Float32, Base: float32, Units: kGrit]; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	SegmentLapAvgHeartRate                            = 15  // [Type: Uint8, Base: uint8, Units: bpm];
	SegmentLapAvgLeftPco                              = 73  // [Type: Sint8, Base: sint8, Units: mm]; Average left platform center offset
	SegmentLapAvgLeftPedalSmoothness                  = 61  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SegmentLapAvgLeftPowerPhase                       = 75  // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Average left power phase angles. Data value indexes defined by power_phase_type.
	SegmentLapAvgLeftPowerPhasePeak                   = 76  // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Average left power phase peak angles. Data value indexes defined by power_phase_type.
	SegmentLapAvgLeftTorqueEffectiveness              = 59  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SegmentLapAvgNegGrade                             = 39  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SegmentLapAvgNegVerticalSpeed                     = 46  // [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SegmentLapAvgPosGrade                             = 38  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SegmentLapAvgPosVerticalSpeed                     = 45  // [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SegmentLapAvgPower                                = 19  // [Type: Uint16, Base: uint16, Units: watts]; total_power / total_timer_time if non_zero_avg_power otherwise total_power / total_elapsed_time
	SegmentLapAvgPowerPosition                        = 79  // [Type: Uint16, Base: uint16, Units: watts]; Average power by position. Data value indexes defined by rider_position_type.
	SegmentLapAvgRightPco                             = 74  // [Type: Sint8, Base: sint8, Units: mm]; Average right platform center offset
	SegmentLapAvgRightPedalSmoothness                 = 62  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SegmentLapAvgRightPowerPhase                      = 77  // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Average right power phase angles. Data value indexes defined by power_phase_type.
	SegmentLapAvgRightPowerPhasePeak                  = 78  // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Average right power phase peak angles. Data value indexes defined by power_phase_type.
	SegmentLapAvgRightTorqueEffectiveness             = 60  // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SegmentLapAvgSpeed                                = 13  // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	SegmentLapAvgTemperature                          = 42  // [Type: Sint8, Base: sint8, Units: C];
	SegmentLapEndPositionLat                          = 5   // [Type: Sint32, Base: sint32, Units: semicircles];
	SegmentLapEndPositionLong                         = 6   // [Type: Sint32, Base: sint32, Units: semicircles];
	SegmentLapEnhancedAvgAltitude                     = 91  // [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	SegmentLapEnhancedMaxAltitude                     = 92  // [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	SegmentLapEnhancedMinAltitude                     = 93  // [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	SegmentLapEvent                                   = 0   // [Type: Event, Base: enum];
	SegmentLapEventGroup                              = 24  // [Type: Uint8, Base: uint8];
	SegmentLapEventType                               = 1   // [Type: EventType, Base: enum];
	SegmentLapFrontGearShiftCount                     = 69  // [Type: Uint16, Base: uint16];
	SegmentLapGpsAccuracy                             = 36  // [Type: Uint8, Base: uint8, Units: m];
	SegmentLapLeftRightBalance                        = 31  // [Type: LeftRightBalance100, Base: uint16];
	SegmentLapManufacturer                            = 83  // [Type: Manufacturer, Base: uint16]; Manufacturer that produced the segment
	SegmentLapMaxAltitude                             = 35  // [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	SegmentLapMaxCadence                              = 18  // [Type: Uint8, Base: uint8, Units: rpm];
	SegmentLapMaxCadencePosition                      = 82  // [Type: Uint8, Base: uint8, Units: rpm]; Maximum cadence by position. Data value indexes defined by rider_position_type.
	SegmentLapMaxFractionalCadence                    = 67  // [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: rpm]; fractional part of the max_cadence
	SegmentLapMaxHeartRate                            = 16  // [Type: Uint8, Base: uint8, Units: bpm];
	SegmentLapMaxNegGrade                             = 41  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SegmentLapMaxNegVerticalSpeed                     = 48  // [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SegmentLapMaxPosGrade                             = 40  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SegmentLapMaxPosVerticalSpeed                     = 47  // [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SegmentLapMaxPower                                = 20  // [Type: Uint16, Base: uint16, Units: watts];
	SegmentLapMaxPowerPosition                        = 80  // [Type: Uint16, Base: uint16, Units: watts]; Maximum power by position. Data value indexes defined by rider_position_type.
	SegmentLapMaxSpeed                                = 14  // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	SegmentLapMaxTemperature                          = 43  // [Type: Sint8, Base: sint8, Units: C];
	SegmentLapMessageIndex                            = 254 // [Type: MessageIndex, Base: uint16];
	SegmentLapMinAltitude                             = 54  // [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	SegmentLapMinHeartRate                            = 55  // [Type: Uint8, Base: uint8, Units: bpm];
	SegmentLapName                                    = 29  // [Type: String, Base: string];
	SegmentLapNecLat                                  = 25  // [Type: Sint32, Base: sint32, Units: semicircles]; North east corner latitude.
	SegmentLapNecLong                                 = 26  // [Type: Sint32, Base: sint32, Units: semicircles]; North east corner longitude.
	SegmentLapNormalizedPower                         = 30  // [Type: Uint16, Base: uint16, Units: watts];
	SegmentLapRearGearShiftCount                      = 70  // [Type: Uint16, Base: uint16];
	SegmentLapRepetitionNum                           = 53  // [Type: Uint16, Base: uint16];
	SegmentLapSport                                   = 23  // [Type: Sport, Base: enum];
	SegmentLapSportEvent                              = 58  // [Type: SportEvent, Base: enum];
	SegmentLapStandCount                              = 72  // [Type: Uint16, Base: uint16]; Number of transitions to the standing state
	SegmentLapStartPositionLat                        = 3   // [Type: Sint32, Base: sint32, Units: semicircles];
	SegmentLapStartPositionLong                       = 4   // [Type: Sint32, Base: sint32, Units: semicircles];
	SegmentLapStartTime                               = 2   // [Type: DateTime, Base: uint32];
	SegmentLapStatus                                  = 64  // [Type: SegmentLapStatus, Base: enum];
	SegmentLapSubSport                                = 32  // [Type: SubSport, Base: enum];
	SegmentLapSwcLat                                  = 27  // [Type: Sint32, Base: sint32, Units: semicircles]; South west corner latitude.
	SegmentLapSwcLong                                 = 28  // [Type: Sint32, Base: sint32, Units: semicircles]; South west corner latitude.
	SegmentLapTimeInCadenceZone                       = 51  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SegmentLapTimeInHrZone                            = 49  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SegmentLapTimeInPowerZone                         = 52  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SegmentLapTimeInSpeedZone                         = 50  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SegmentLapTimeStanding                            = 71  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Total time spent in the standing position
	SegmentLapTimestamp                               = 253 // [Type: DateTime, Base: uint32, Units: s]; Lap end time.
	SegmentLapTotalAscent                             = 21  // [Type: Uint16, Base: uint16, Units: m];
	SegmentLapTotalCalories                           = 11  // [Type: Uint16, Base: uint16, Units: kcal];
	SegmentLapTotalCycles                             = 10  // [Type: Uint32, Base: uint32, Units: cycles];
	SegmentLapTotalDescent                            = 22  // [Type: Uint16, Base: uint16, Units: m];
	SegmentLapTotalDistance                           = 9   // [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	SegmentLapTotalElapsedTime                        = 7   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Time (includes pauses)
	SegmentLapTotalFatCalories                        = 12  // [Type: Uint16, Base: uint16, Units: kcal]; If New Leaf
	SegmentLapTotalFlow                               = 85  // [Type: Float32, Base: float32, Units: Flow]; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	SegmentLapTotalFractionalAscent                   = 89  // [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m]; fractional part of total_ascent
	SegmentLapTotalFractionalCycles                   = 68  // [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: cycles]; fractional part of the total_cycles
	SegmentLapTotalFractionalDescent                  = 90  // [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m]; fractional part of total_descent
	SegmentLapTotalGrit                               = 84  // [Type: Float32, Base: float32, Units: kGrit]; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	SegmentLapTotalMovingTime                         = 44  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SegmentLapTotalTimerTime                          = 8   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Timer Time (excludes pauses)
	SegmentLapTotalWork                               = 33  // [Type: Uint32, Base: uint32, Units: J];
	SegmentLapUuid                                    = 65  // [Type: String, Base: string];
	SegmentLapWktStepIndex                            = 57  // [Type: MessageIndex, Base: uint16];
	SegmentLeaderboardEntryActivityId                 = 3   // [Type: Uint32, Base: uint32]; ID of the activity associated with this leader time
	SegmentLeaderboardEntryActivityIdString           = 5   // [Type: String, Base: string]; String version of the activity_id. 21 characters long, express in decimal
	SegmentLeaderboardEntryGroupPrimaryKey            = 2   // [Type: Uint32, Base: uint32]; Primary user ID of this leader
	SegmentLeaderboardEntryMessageIndex               = 254 // [Type: MessageIndex, Base: uint16];
	SegmentLeaderboardEntryName                       = 0   // [Type: String, Base: string]; Friendly name assigned to leader
	SegmentLeaderboardEntrySegmentTime                = 4   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Segment Time (includes pauses)
	SegmentLeaderboardEntryType                       = 1   // [Type: SegmentLeaderboardType, Base: enum]; Leader classification
	SegmentPointAltitude                              = 4   // [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m]; Accumulated altitude along the segment at the described point
	SegmentPointDistance                              = 3   // [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m]; Accumulated distance along the segment at the described point
	SegmentPointEnhancedAltitude                      = 6   // [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m]; Accumulated altitude along the segment at the described point
	SegmentPointLeaderTime                            = 5   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Accumualted time each leader board member required to reach the described point. This value is zero for all leader board members at the starting point of the segment.
	SegmentPointMessageIndex                          = 254 // [Type: MessageIndex, Base: uint16];
	SegmentPointPositionLat                           = 1   // [Type: Sint32, Base: sint32, Units: semicircles];
	SegmentPointPositionLong                          = 2   // [Type: Sint32, Base: sint32, Units: semicircles];
	SessionAvgAltitude                                = 49  // [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	SessionAvgBallSpeed                               = 88  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m/s];
	SessionAvgCadence                                 = 18  // [Type: Uint8, Base: uint8, Units: rpm]; total_cycles / total_timer_time if non_zero_avg_cadence otherwise total_cycles / total_elapsed_time
	SessionAvgCadencePosition                         = 122 // [Type: Uint8, Base: uint8, Units: rpm]; Average cadence by position. Data value indexes defined by rider_position_type.
	SessionAvgCombinedPedalSmoothness                 = 105 // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SessionAvgCoreTemperature                         = 208 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: C];
	SessionAvgDepth                                   = 140 // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	SessionAvgFlow                                    = 187 // [Type: Float32, Base: float32, Units: Flow]; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	SessionAvgFractionalCadence                       = 92  // [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: rpm]; fractional part of the avg_cadence
	SessionAvgGrade                                   = 52  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SessionAvgGrit                                    = 186 // [Type: Float32, Base: float32, Units: kGrit]; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	SessionAvgHeartRate                               = 16  // [Type: Uint8, Base: uint8, Units: bpm]; average heart rate (excludes pause time)
	SessionAvgLapTime                                 = 69  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SessionAvgLeftPco                                 = 114 // [Type: Sint8, Base: sint8, Units: mm]; Average platform center offset Left
	SessionAvgLeftPedalSmoothness                     = 103 // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SessionAvgLeftPowerPhase                          = 116 // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Average left power phase angles. Indexes defined by power_phase_type.
	SessionAvgLeftPowerPhasePeak                      = 117 // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Average left power phase peak angles. Data value indexes defined by power_phase_type.
	SessionAvgLeftTorqueEffectiveness                 = 101 // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SessionAvgLevMotorPower                           = 129 // [Type: Uint16, Base: uint16, Units: watts]; lev average motor power during session
	SessionAvgNegGrade                                = 54  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SessionAvgNegVerticalSpeed                        = 61  // [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SessionAvgPosGrade                                = 53  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SessionAvgPosVerticalSpeed                        = 60  // [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SessionAvgPower                                   = 20  // [Type: Uint16, Base: uint16, Units: watts]; total_power / total_timer_time if non_zero_avg_power otherwise total_power / total_elapsed_time
	SessionAvgPowerPosition                           = 120 // [Type: Uint16, Base: uint16, Units: watts]; Average power by position. Data value indexes defined by rider_position_type.
	SessionAvgRespirationRate                         = 147 // [Type: Uint8, Base: uint8];
	SessionAvgRightPco                                = 115 // [Type: Sint8, Base: sint8, Units: mm]; Average platform center offset Right
	SessionAvgRightPedalSmoothness                    = 104 // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SessionAvgRightPowerPhase                         = 118 // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Average right power phase angles. Data value indexes defined by power_phase_type.
	SessionAvgRightPowerPhasePeak                     = 119 // [Type: Uint8, Base: uint8, Scale: 0.7111111, Offset: 0, Units: degrees]; Average right power phase peak angles data value indexes defined by power_phase_type.
	SessionAvgRightTorqueEffectiveness                = 102 // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SessionAvgSaturatedHemoglobinPercent              = 98  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %]; Avg percentage of hemoglobin saturated with oxygen
	SessionAvgSpeed                                   = 14  // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s]; total_distance / total_timer_time
	SessionAvgSpo2                                    = 194 // [Type: Uint8, Base: uint8, Units: percent]; Average SPO2 for the monitoring session
	SessionAvgStanceTime                              = 91  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: ms];
	SessionAvgStanceTimeBalance                       = 133 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	SessionAvgStanceTimePercent                       = 90  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	SessionAvgStepLength                              = 134 // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: mm];
	SessionAvgStress                                  = 195 // [Type: Uint8, Base: uint8, Units: percent]; Average stress for the monitoring session
	SessionAvgStrokeCount                             = 41  // [Type: Uint32, Base: uint32, Scale: 10, Offset: 0, Units: strokes/lap];
	SessionAvgStrokeDistance                          = 42  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m];
	SessionAvgTemperature                             = 57  // [Type: Sint8, Base: sint8, Units: C];
	SessionAvgTotalHemoglobinConc                     = 95  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: g/dL]; Avg saturated and unsaturated hemoglobin
	SessionAvgVam                                     = 139 // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	SessionAvgVerticalOscillation                     = 89  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: mm];
	SessionAvgVerticalRatio                           = 132 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	SessionBestLapIndex                               = 70  // [Type: Uint16, Base: uint16];
	SessionDiveNumber                                 = 156 // [Type: Uint32, Base: uint32];
	SessionEndCns                                     = 144 // [Type: Uint8, Base: uint8, Units: percent];
	SessionEndN2                                      = 146 // [Type: Uint16, Base: uint16, Units: percent];
	SessionEndPositionLat                             = 38  // [Type: Sint32, Base: sint32, Units: semicircles];
	SessionEndPositionLong                            = 39  // [Type: Sint32, Base: sint32, Units: semicircles];
	SessionEnhancedAvgAltitude                        = 126 // [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	SessionEnhancedAvgRespirationRate                 = 169 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: Breaths/min];
	SessionEnhancedAvgSpeed                           = 124 // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s]; total_distance / total_timer_time
	SessionEnhancedMaxAltitude                        = 128 // [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	SessionEnhancedMaxRespirationRate                 = 170 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: Breaths/min];
	SessionEnhancedMaxSpeed                           = 125 // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	SessionEnhancedMinAltitude                        = 127 // [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	SessionEnhancedMinRespirationRate                 = 180 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0];
	SessionEvent                                      = 0   // [Type: Event, Base: enum]; session
	SessionEventGroup                                 = 27  // [Type: Uint8, Base: uint8];
	SessionEventType                                  = 1   // [Type: EventType, Base: enum]; stop
	SessionFirstLapIndex                              = 25  // [Type: Uint16, Base: uint16];
	SessionGpsAccuracy                                = 51  // [Type: Uint8, Base: uint8, Units: m];
	SessionIntensityFactor                            = 36  // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: if];
	SessionJumpCount                                  = 183 // [Type: Uint16, Base: uint16];
	SessionLeftRightBalance                           = 37  // [Type: LeftRightBalance100, Base: uint16];
	SessionLevBatteryConsumption                      = 131 // [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent]; lev battery consumption during session
	SessionMaxAltitude                                = 50  // [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	SessionMaxBallSpeed                               = 87  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m/s];
	SessionMaxCadence                                 = 19  // [Type: Uint8, Base: uint8, Units: rpm];
	SessionMaxCadencePosition                         = 123 // [Type: Uint8, Base: uint8, Units: rpm]; Maximum cadence by position. Data value indexes defined by rider_position_type.
	SessionMaxCoreTemperature                         = 210 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: C];
	SessionMaxDepth                                   = 141 // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	SessionMaxFractionalCadence                       = 93  // [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: rpm]; fractional part of the max_cadence
	SessionMaxHeartRate                               = 17  // [Type: Uint8, Base: uint8, Units: bpm];
	SessionMaxLevMotorPower                           = 130 // [Type: Uint16, Base: uint16, Units: watts]; lev maximum motor power during session
	SessionMaxNegGrade                                = 56  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SessionMaxNegVerticalSpeed                        = 63  // [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SessionMaxPosGrade                                = 55  // [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SessionMaxPosVerticalSpeed                        = 62  // [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SessionMaxPower                                   = 21  // [Type: Uint16, Base: uint16, Units: watts];
	SessionMaxPowerPosition                           = 121 // [Type: Uint16, Base: uint16, Units: watts]; Maximum power by position. Data value indexes defined by rider_position_type.
	SessionMaxRespirationRate                         = 148 // [Type: Uint8, Base: uint8];
	SessionMaxSaturatedHemoglobinPercent              = 100 // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %]; Max percentage of hemoglobin saturated with oxygen
	SessionMaxSpeed                                   = 15  // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	SessionMaxTemperature                             = 58  // [Type: Sint8, Base: sint8, Units: C];
	SessionMaxTotalHemoglobinConc                     = 97  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: g/dL]; Max saturated and unsaturated hemoglobin
	SessionMessageIndex                               = 254 // [Type: MessageIndex, Base: uint16]; Selected bit is set for the current session.
	SessionMinAltitude                                = 71  // [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	SessionMinCoreTemperature                         = 209 // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: C];
	SessionMinHeartRate                               = 64  // [Type: Uint8, Base: uint8, Units: bpm];
	SessionMinRespirationRate                         = 149 // [Type: Uint8, Base: uint8];
	SessionMinSaturatedHemoglobinPercent              = 99  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %]; Min percentage of hemoglobin saturated with oxygen
	SessionMinTemperature                             = 150 // [Type: Sint8, Base: sint8, Units: C];
	SessionMinTotalHemoglobinConc                     = 96  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: g/dL]; Min saturated and unsaturated hemoglobin
	SessionNecLat                                     = 29  // [Type: Sint32, Base: sint32, Units: semicircles]; North east corner latitude
	SessionNecLong                                    = 30  // [Type: Sint32, Base: sint32, Units: semicircles]; North east corner longitude
	SessionNormalizedPower                            = 34  // [Type: Uint16, Base: uint16, Units: watts];
	SessionNumActiveLengths                           = 47  // [Type: Uint16, Base: uint16, Units: lengths]; # of active lengths of swim pool
	SessionNumLaps                                    = 26  // [Type: Uint16, Base: uint16];
	SessionNumLengths                                 = 33  // [Type: Uint16, Base: uint16, Units: lengths]; # of lengths of swim pool
	SessionO2Toxicity                                 = 155 // [Type: Uint16, Base: uint16, Units: OTUs];
	SessionOpponentName                               = 84  // [Type: String, Base: string];
	SessionOpponentScore                              = 83  // [Type: Uint16, Base: uint16];
	SessionPlayerScore                                = 82  // [Type: Uint16, Base: uint16];
	SessionPoolLength                                 = 44  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m];
	SessionPoolLengthUnit                             = 46  // [Type: DisplayMeasure, Base: enum];
	SessionRmssdHrv                                   = 198 // [Type: Uint8, Base: uint8, Units: mS]; Root mean square successive difference (RMSSD) - Heart rate variability measure most useful for athletes
	SessionSdrrHrv                                    = 197 // [Type: Uint8, Base: uint8, Units: mS]; Standard deviation of R-R interval (SDRR) - Heart rate variability measure most useful for wellness users.
	SessionSport                                      = 5   // [Type: Sport, Base: enum];
	SessionSportIndex                                 = 111 // [Type: Uint8, Base: uint8];
	SessionSportProfileName                           = 110 // [Type: String, Base: string]; Sport name from associated sport mesg
	SessionStandCount                                 = 113 // [Type: Uint16, Base: uint16]; Number of transitions to the standing state
	SessionStartCns                                   = 143 // [Type: Uint8, Base: uint8, Units: percent];
	SessionStartN2                                    = 145 // [Type: Uint16, Base: uint16, Units: percent];
	SessionStartPositionLat                           = 3   // [Type: Sint32, Base: sint32, Units: semicircles];
	SessionStartPositionLong                          = 4   // [Type: Sint32, Base: sint32, Units: semicircles];
	SessionStartTime                                  = 2   // [Type: DateTime, Base: uint32];
	SessionStrokeCount                                = 85  // [Type: Uint16, Base: uint16, Units: counts]; stroke_type enum used as the index
	SessionSubSport                                   = 6   // [Type: SubSport, Base: enum];
	SessionSurfaceInterval                            = 142 // [Type: Uint32, Base: uint32, Units: s]; Time since end of last dive
	SessionSwcLat                                     = 31  // [Type: Sint32, Base: sint32, Units: semicircles]; South west corner latitude
	SessionSwcLong                                    = 32  // [Type: Sint32, Base: sint32, Units: semicircles]; South west corner longitude
	SessionSwimStroke                                 = 43  // [Type: SwimStroke, Base: enum, Units: swim_stroke];
	SessionThresholdPower                             = 45  // [Type: Uint16, Base: uint16, Units: watts];
	SessionTimeInCadenceZone                          = 67  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SessionTimeInHrZone                               = 65  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SessionTimeInPowerZone                            = 68  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SessionTimeInSpeedZone                            = 66  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SessionTimeStanding                               = 112 // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Total time spend in the standing position
	SessionTimestamp                                  = 253 // [Type: DateTime, Base: uint32, Units: s]; Sesson end time.
	SessionTotalAnaerobicTrainingEffect               = 137 // [Type: Uint8, Base: uint8, Scale: 10, Offset: 0];
	SessionTotalAscent                                = 22  // [Type: Uint16, Base: uint16, Units: m];
	SessionTotalCalories                              = 11  // [Type: Uint16, Base: uint16, Units: kcal];
	SessionTotalCycles                                = 10  // [Type: Uint32, Base: uint32, Units: cycles];
	SessionTotalDescent                               = 23  // [Type: Uint16, Base: uint16, Units: m];
	SessionTotalDistance                              = 9   // [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	SessionTotalElapsedTime                           = 7   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Time (includes pauses)
	SessionTotalFatCalories                           = 13  // [Type: Uint16, Base: uint16, Units: kcal];
	SessionTotalFlow                                  = 182 // [Type: Float32, Base: float32, Units: Flow]; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	SessionTotalFractionalAscent                      = 199 // [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m]; fractional part of total_ascent
	SessionTotalFractionalCycles                      = 94  // [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: cycles]; fractional part of the total_cycles
	SessionTotalFractionalDescent                     = 200 // [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m]; fractional part of total_descent
	SessionTotalGrit                                  = 181 // [Type: Float32, Base: float32, Units: kGrit]; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	SessionTotalMovingTime                            = 59  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SessionTotalTimerTime                             = 8   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Timer Time (excludes pauses)
	SessionTotalTrainingEffect                        = 24  // [Type: Uint8, Base: uint8, Scale: 10, Offset: 0];
	SessionTotalWork                                  = 48  // [Type: Uint32, Base: uint32, Units: J];
	SessionTrainingLoadPeak                           = 168 // [Type: Sint32, Base: sint32, Scale: 65536, Offset: 0];
	SessionTrainingStressScore                        = 35  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: tss];
	SessionTrigger                                    = 28  // [Type: SessionTrigger, Base: enum];
	SessionZoneCount                                  = 86  // [Type: Uint16, Base: uint16, Units: counts]; zone number used as the index
	SetCategory                                       = 7   // [Type: ExerciseCategory, Base: uint16];
	SetCategorySubtype                                = 8   // [Type: Uint16, Base: uint16]; Based on the associated category, see [category]_exercise_names
	SetDuration                                       = 0   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SetMessageIndex                                   = 10  // [Type: MessageIndex, Base: uint16];
	SetRepetitions                                    = 3   // [Type: Uint16, Base: uint16]; # of repitions of the movement
	SetSetType                                        = 5   // [Type: SetType, Base: uint8];
	SetStartTime                                      = 6   // [Type: DateTime, Base: uint32]; Start time of the set
	SetTimestamp                                      = 254 // [Type: DateTime, Base: uint32]; Timestamp of the set
	SetWeight                                         = 4   // [Type: Uint16, Base: uint16, Scale: 16, Offset: 0, Units: kg]; Amount of weight applied for the set
	SetWeightDisplayUnit                              = 9   // [Type: FitBaseUnit, Base: uint16];
	SetWktStepIndex                                   = 11  // [Type: MessageIndex, Base: uint16];
	SlaveDeviceManufacturer                           = 0   // [Type: Manufacturer, Base: uint16];
	SlaveDeviceProduct                                = 1   // [Type: Uint16, Base: uint16];
	SleepAssessmentAverageStressDuringSleep           = 15  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0]; Excludes stress during awake periods in the sleep window
	SleepAssessmentAwakeTimeScore                     = 1   // [Type: Uint8, Base: uint8]; Score that evaluates the total time spent awake between sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentAwakeningsCount                    = 11  // [Type: Uint8, Base: uint8]; The number of awakenings during sleep.
	SleepAssessmentAwakeningsCountScore               = 2   // [Type: Uint8, Base: uint8]; Score that evaluates the number of awakenings that interrupt sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentCombinedAwakeScore                 = 0   // [Type: Uint8, Base: uint8]; Average of awake_time_score and awakenings_count_score. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentDeepSleepScore                     = 3   // [Type: Uint8, Base: uint8]; Score that evaluates the amount of deep sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentInterruptionsScore                 = 14  // [Type: Uint8, Base: uint8]; Score that evaluates the sleep interruptions. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentLightSleepScore                    = 5   // [Type: Uint8, Base: uint8]; Score that evaluates the amount of light sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentOverallSleepScore                  = 6   // [Type: Uint8, Base: uint8]; Total score that summarizes the overall quality of sleep, combining sleep duration and quality. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentRemSleepScore                      = 9   // [Type: Uint8, Base: uint8]; Score that evaluates the amount of REM sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentSleepDurationScore                 = 4   // [Type: Uint8, Base: uint8]; Score that evaluates the quality of sleep based on sleep stages, heart-rate variability and possible awakenings during the night. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentSleepQualityScore                  = 7   // [Type: Uint8, Base: uint8]; Score that evaluates the quality of sleep based on sleep stages, heart-rate variability and possible awakenings during the night. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentSleepRecoveryScore                 = 8   // [Type: Uint8, Base: uint8]; Score that evaluates stress and recovery during sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentSleepRestlessnessScore             = 10  // [Type: Uint8, Base: uint8]; Score that evaluates the amount of restlessness during sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepLevelSleepLevel                              = 0   // [Type: SleepLevel, Base: enum];
	SleepLevelTimestamp                               = 253 // [Type: DateTime, Base: uint32, Units: s];
	SoftwareMessageIndex                              = 254 // [Type: MessageIndex, Base: uint16];
	SoftwarePartNumber                                = 5   // [Type: String, Base: string];
	SoftwareVersion                                   = 3   // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0];
	SpeedZoneHighValue                                = 0   // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	SpeedZoneMessageIndex                             = 254 // [Type: MessageIndex, Base: uint16];
	SpeedZoneName                                     = 1   // [Type: String, Base: string];
	SplitAvgSpeed                                     = 4   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	SplitAvgVertSpeed                                 = 26  // [Type: Sint32, Base: sint32, Scale: 1000, Offset: 0, Units: m/s];
	SplitEndPositionLat                               = 23  // [Type: Sint32, Base: sint32, Units: semicircles];
	SplitEndPositionLong                              = 24  // [Type: Sint32, Base: sint32, Units: semicircles];
	SplitEndTime                                      = 27  // [Type: DateTime, Base: uint32];
	SplitMaxSpeed                                     = 25  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	SplitMessageIndex                                 = 254 // [Type: MessageIndex, Base: uint16];
	SplitSplitType                                    = 0   // [Type: SplitType, Base: enum];
	SplitStartElevation                               = 74  // [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	SplitStartPositionLat                             = 21  // [Type: Sint32, Base: sint32, Units: semicircles];
	SplitStartPositionLong                            = 22  // [Type: Sint32, Base: sint32, Units: semicircles];
	SplitStartTime                                    = 9   // [Type: DateTime, Base: uint32];
	SplitSummaryAvgHeartRate                          = 10  // [Type: Uint8, Base: uint8, Units: bpm];
	SplitSummaryAvgSpeed                              = 6   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	SplitSummaryAvgVertSpeed                          = 12  // [Type: Sint32, Base: sint32, Scale: 1000, Offset: 0, Units: m/s];
	SplitSummaryMaxHeartRate                          = 11  // [Type: Uint8, Base: uint8, Units: bpm];
	SplitSummaryMaxSpeed                              = 7   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	SplitSummaryMessageIndex                          = 254 // [Type: MessageIndex, Base: uint16];
	SplitSummaryNumSplits                             = 3   // [Type: Uint16, Base: uint16];
	SplitSummarySplitType                             = 0   // [Type: SplitType, Base: enum];
	SplitSummaryTotalAscent                           = 8   // [Type: Uint16, Base: uint16, Units: m];
	SplitSummaryTotalCalories                         = 13  // [Type: Uint32, Base: uint32, Units: kcal];
	SplitSummaryTotalDescent                          = 9   // [Type: Uint16, Base: uint16, Units: m];
	SplitSummaryTotalDistance                         = 5   // [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	SplitSummaryTotalMovingTime                       = 77  // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SplitSummaryTotalTimerTime                        = 4   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SplitTotalAscent                                  = 13  // [Type: Uint16, Base: uint16, Units: m];
	SplitTotalCalories                                = 28  // [Type: Uint32, Base: uint32, Units: kcal];
	SplitTotalDescent                                 = 14  // [Type: Uint16, Base: uint16, Units: m];
	SplitTotalDistance                                = 3   // [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	SplitTotalElapsedTime                             = 1   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SplitTotalMovingTime                              = 110 // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SplitTotalTimerTime                               = 2   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	Spo2DataMode                                      = 2   // [Type: Spo2MeasurementType, Base: enum]; Mode when data was captured
	Spo2DataReadingConfidence                         = 1   // [Type: Uint8, Base: uint8];
	Spo2DataReadingSpo2                               = 0   // [Type: Uint8, Base: uint8, Units: percent];
	Spo2DataTimestamp                                 = 253 // [Type: DateTime, Base: uint32, Units: s];
	SportName                                         = 3   // [Type: String, Base: string];
	SportSport                                        = 0   // [Type: Sport, Base: enum];
	SportSubSport                                     = 1   // [Type: SubSport, Base: enum];
	StressLevelStressLevelTime                        = 1   // [Type: DateTime, Base: uint32, Units: s]; Time stress score was calculated
	StressLevelStressLevelValue                       = 0   // [Type: Sint16, Base: sint16];
	TankSummaryEndPressure                            = 2   // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: bar];
	TankSummarySensor                                 = 0   // [Type: AntChannelId, Base: uint32z];
	TankSummaryStartPressure                          = 1   // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: bar];
	TankSummaryTimestamp                              = 253 // [Type: DateTime, Base: uint32, Units: s];
	TankSummaryVolumeUsed                             = 3   // [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: L];
	TankUpdatePressure                                = 1   // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: bar];
	TankUpdateSensor                                  = 0   // [Type: AntChannelId, Base: uint32z];
	TankUpdateTimestamp                               = 253 // [Type: DateTime, Base: uint32, Units: s];
	ThreeDSensorCalibrationCalibrationDivisor         = 2   // [Type: Uint32, Base: uint32, Units: counts]; Calibration factor divisor
	ThreeDSensorCalibrationCalibrationFactor          = 1   // [Type: Uint32, Base: uint32]; Calibration factor used to convert from raw ADC value to degrees, g, etc.
	ThreeDSensorCalibrationLevelShift                 = 3   // [Type: Uint32, Base: uint32]; Level shift value used to shift the ADC value back into range
	ThreeDSensorCalibrationOffsetCal                  = 4   // [Type: Sint32, Base: sint32]; Internal calibration factors, one for each: xy, yx, zx
	ThreeDSensorCalibrationOrientationMatrix          = 5   // [Type: Sint32, Base: sint32, Scale: 65535, Offset: 0]; 3 x 3 rotation matrix (row major)
	ThreeDSensorCalibrationSensorType                 = 0   // [Type: SensorType, Base: enum]; Indicates which sensor the calibration is for
	ThreeDSensorCalibrationTimestamp                  = 253 // [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp
	TimeInZoneCadenceZoneHighBondary                  = 8   // [Type: Uint8, Base: uint8, Units: rpm];
	TimeInZoneFunctionalThresholdPower                = 15  // [Type: Uint16, Base: uint16];
	TimeInZoneHrCalcType                              = 10  // [Type: HrZoneCalc, Base: enum];
	TimeInZoneHrZoneHighBoundary                      = 6   // [Type: Uint8, Base: uint8, Units: bpm];
	TimeInZoneMaxHeartRate                            = 11  // [Type: Uint8, Base: uint8];
	TimeInZonePowerZoneHighBoundary                   = 9   // [Type: Uint16, Base: uint16, Units: watts];
	TimeInZonePwrCalcType                             = 14  // [Type: PwrZoneCalc, Base: enum];
	TimeInZoneReferenceIndex                          = 1   // [Type: MessageIndex, Base: uint16];
	TimeInZoneReferenceMesg                           = 0   // [Type: MesgNum, Base: uint16];
	TimeInZoneRestingHeartRate                        = 12  // [Type: Uint8, Base: uint8];
	TimeInZoneSpeedZoneHighBoundary                   = 7   // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	TimeInZoneThresholdHeartRate                      = 13  // [Type: Uint8, Base: uint8];
	TimeInZoneTimeInCadenceZone                       = 4   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	TimeInZoneTimeInHrZone                            = 2   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	TimeInZoneTimeInPowerZone                         = 5   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	TimeInZoneTimeInSpeedZone                         = 3   // [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	TimeInZoneTimestamp                               = 253 // [Type: DateTime, Base: uint32, Units: s];
	TimestampCorrelationFractionalSystemTimestamp     = 2   // [Type: Uint16, Base: uint16, Scale: 32768, Offset: 0, Units: s]; Fractional part of the system timestamp
	TimestampCorrelationFractionalTimestamp           = 0   // [Type: Uint16, Base: uint16, Scale: 32768, Offset: 0, Units: s]; Fractional part of the UTC timestamp at the time the system timestamp was recorded.
	TimestampCorrelationLocalTimestamp                = 3   // [Type: LocalDateTime, Base: uint32, Units: s]; timestamp epoch expressed in local time used to convert timestamps to local time
	TimestampCorrelationSystemTimestamp               = 1   // [Type: DateTime, Base: uint32, Units: s]; Whole second part of the system timestamp
	TimestampCorrelationSystemTimestampMs             = 5   // [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the system timestamp
	TimestampCorrelationTimestamp                     = 253 // [Type: DateTime, Base: uint32, Units: s]; Whole second part of UTC timestamp at the time the system timestamp was recorded.
	TimestampCorrelationTimestampMs                   = 4   // [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the UTC timestamp at the time the system timestamp was recorded.
	TotalsActiveTime                                  = 6   // [Type: Uint32, Base: uint32, Units: s];
	TotalsCalories                                    = 2   // [Type: Uint32, Base: uint32, Units: kcal];
	TotalsDistance                                    = 1   // [Type: Uint32, Base: uint32, Units: m];
	TotalsElapsedTime                                 = 4   // [Type: Uint32, Base: uint32, Units: s]; Includes pauses
	TotalsMessageIndex                                = 254 // [Type: MessageIndex, Base: uint16];
	TotalsSessions                                    = 5   // [Type: Uint16, Base: uint16];
	TotalsSport                                       = 3   // [Type: Sport, Base: enum];
	TotalsSportIndex                                  = 9   // [Type: Uint8, Base: uint8];
	TotalsTimerTime                                   = 0   // [Type: Uint32, Base: uint32, Units: s]; Excludes pauses
	TotalsTimestamp                                   = 253 // [Type: DateTime, Base: uint32, Units: s];
	TrainingFileManufacturer                          = 1   // [Type: Manufacturer, Base: uint16];
	TrainingFileProduct                               = 2   // [Type: Uint16, Base: uint16];
	TrainingFileSerialNumber                          = 3   // [Type: Uint32z, Base: uint32z];
	TrainingFileTimeCreated                           = 4   // [Type: DateTime, Base: uint32];
	TrainingFileTimestamp                             = 253 // [Type: DateTime, Base: uint32];
	TrainingFileType                                  = 0   // [Type: File, Base: enum];
	UserProfileActivityClass                          = 17  // [Type: ActivityClass, Base: enum];
	UserProfileAge                                    = 2   // [Type: Uint8, Base: uint8, Units: years];
	UserProfileDefaultMaxBikingHeartRate              = 10  // [Type: Uint8, Base: uint8, Units: bpm];
	UserProfileDefaultMaxHeartRate                    = 11  // [Type: Uint8, Base: uint8, Units: bpm];
	UserProfileDefaultMaxRunningHeartRate             = 9   // [Type: Uint8, Base: uint8, Units: bpm];
	UserProfileDepthSetting                           = 47  // [Type: DisplayMeasure, Base: enum];
	UserProfileDistSetting                            = 14  // [Type: DisplayMeasure, Base: enum];
	UserProfileDiveCount                              = 49  // [Type: Uint32, Base: uint32];
	UserProfileElevSetting                            = 6   // [Type: DisplayMeasure, Base: enum];
	UserProfileFriendlyName                           = 0   // [Type: String, Base: string]; Used for Morning Report greeting
	UserProfileGender                                 = 1   // [Type: Gender, Base: enum];
	UserProfileGlobalId                               = 23  // [Type: Byte, Base: byte];
	UserProfileHeight                                 = 3   // [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m];
	UserProfileHeightSetting                          = 30  // [Type: DisplayMeasure, Base: enum];
	UserProfileHrSetting                              = 12  // [Type: DisplayHeart, Base: enum];
	UserProfileLanguage                               = 5   // [Type: Language, Base: enum];
	UserProfileLocalId                                = 22  // [Type: UserLocalId, Base: uint16];
	UserProfileMessageIndex                           = 254 // [Type: MessageIndex, Base: uint16];
	UserProfilePositionSetting                        = 18  // [Type: DisplayPosition, Base: enum];
	UserProfilePowerSetting                           = 16  // [Type: DisplayPower, Base: enum];
	UserProfileRestingHeartRate                       = 8   // [Type: Uint8, Base: uint8, Units: bpm];
	UserProfileSleepTime                              = 29  // [Type: LocaltimeIntoDay, Base: uint32]; Typical bed time
	UserProfileSpeedSetting                           = 13  // [Type: DisplayMeasure, Base: enum];
	UserProfileTemperatureSetting                     = 21  // [Type: DisplayMeasure, Base: enum];
	UserProfileUserRunningStepLength                  = 31  // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m]; User defined running step length set to 0 for auto length
	UserProfileUserWalkingStepLength                  = 32  // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m]; User defined walking step length set to 0 for auto length
	UserProfileWakeTime                               = 28  // [Type: LocaltimeIntoDay, Base: uint32]; Typical wake time
	UserProfileWeight                                 = 4   // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: kg];
	UserProfileWeightSetting                          = 7   // [Type: DisplayMeasure, Base: enum];
	VideoClipClipEnd                                  = 7   // [Type: Uint32, Base: uint32, Units: ms]; End of clip in video time
	VideoClipClipNumber                               = 0   // [Type: Uint16, Base: uint16];
	VideoClipClipStart                                = 6   // [Type: Uint32, Base: uint32, Units: ms]; Start of clip in video time
	VideoClipEndTimestamp                             = 3   // [Type: DateTime, Base: uint32];
	VideoClipEndTimestampMs                           = 4   // [Type: Uint16, Base: uint16];
	VideoClipStartTimestamp                           = 1   // [Type: DateTime, Base: uint32];
	VideoClipStartTimestampMs                         = 2   // [Type: Uint16, Base: uint16];
	VideoDescriptionMessageCount                      = 0   // [Type: Uint16, Base: uint16]; Total number of description parts
	VideoDescriptionMessageIndex                      = 254 // [Type: MessageIndex, Base: uint16]; Long descriptions will be split into multiple parts
	VideoDescriptionText                              = 1   // [Type: String, Base: string];
	VideoDuration                                     = 2   // [Type: Uint32, Base: uint32, Units: ms]; Playback time of video
	VideoFrameFrameNumber                             = 1   // [Type: Uint32, Base: uint32]; Number of the frame that the timestamp and timestamp_ms correlate to
	VideoFrameTimestamp                               = 253 // [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp
	VideoFrameTimestampMs                             = 0   // [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the timestamp.
	VideoHostingProvider                              = 1   // [Type: String, Base: string];
	VideoTitleMessageCount                            = 0   // [Type: Uint16, Base: uint16]; Total number of title parts
	VideoTitleMessageIndex                            = 254 // [Type: MessageIndex, Base: uint16]; Long titles will be split into multiple parts
	VideoTitleText                                    = 1   // [Type: String, Base: string];
	VideoUrl                                          = 0   // [Type: String, Base: string];
	WatchfaceSettingsLayout                           = 1   // [Type: Byte, Base: byte];
	WatchfaceSettingsMessageIndex                     = 254 // [Type: MessageIndex, Base: uint16];
	WatchfaceSettingsMode                             = 0   // [Type: WatchfaceMode, Base: enum];
	WeatherAlertExpireTime                            = 2   // [Type: DateTime, Base: uint32]; Time alert expires
	WeatherAlertIssueTime                             = 1   // [Type: DateTime, Base: uint32]; Time alert was issued
	WeatherAlertReportId                              = 0   // [Type: String, Base: string]; Unique identifier from GCS report ID string, length is 12
	WeatherAlertSeverity                              = 3   // [Type: WeatherSeverity, Base: enum]; Warning, Watch, Advisory, Statement
	WeatherAlertTimestamp                             = 253 // [Type: DateTime, Base: uint32];
	WeatherAlertType                                  = 4   // [Type: WeatherSevereType, Base: enum]; Tornado, Severe Thunderstorm, etc.
	WeatherConditionsCondition                        = 2   // [Type: WeatherStatus, Base: enum]; Corresponds to GSC Response weatherIcon field
	WeatherConditionsDayOfWeek                        = 12  // [Type: DayOfWeek, Base: enum];
	WeatherConditionsHighTemperature                  = 13  // [Type: Sint8, Base: sint8, Units: C];
	WeatherConditionsLocation                         = 8   // [Type: String, Base: string]; string corresponding to GCS response location string
	WeatherConditionsLowTemperature                   = 14  // [Type: Sint8, Base: sint8, Units: C];
	WeatherConditionsObservedAtTime                   = 9   // [Type: DateTime, Base: uint32];
	WeatherConditionsObservedLocationLat              = 10  // [Type: Sint32, Base: sint32, Units: semicircles];
	WeatherConditionsObservedLocationLong             = 11  // [Type: Sint32, Base: sint32, Units: semicircles];
	WeatherConditionsPrecipitationProbability         = 5   // [Type: Uint8, Base: uint8]; range 0-100
	WeatherConditionsRelativeHumidity                 = 7   // [Type: Uint8, Base: uint8];
	WeatherConditionsTemperature                      = 1   // [Type: Sint8, Base: sint8, Units: C];
	WeatherConditionsTemperatureFeelsLike             = 6   // [Type: Sint8, Base: sint8, Units: C]; Heat Index if GCS heatIdx above or equal to 90F or wind chill if GCS windChill below or equal to 32F
	WeatherConditionsTimestamp                        = 253 // [Type: DateTime, Base: uint32]; time of update for current conditions, else forecast time
	WeatherConditionsWeatherReport                    = 0   // [Type: WeatherReport, Base: enum]; Current or forecast
	WeatherConditionsWindDirection                    = 3   // [Type: Uint16, Base: uint16, Units: degrees];
	WeatherConditionsWindSpeed                        = 4   // [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	WeightScaleActiveMet                              = 9   // [Type: Uint16, Base: uint16, Scale: 4, Offset: 0, Units: kcal/day]; ~4kJ per kcal, 0.25 allows max 16384 kcal
	WeightScaleBasalMet                               = 7   // [Type: Uint16, Base: uint16, Scale: 4, Offset: 0, Units: kcal/day];
	WeightScaleBmi                                    = 13  // [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: kg/m^2];
	WeightScaleBoneMass                               = 4   // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: kg];
	WeightScaleMetabolicAge                           = 10  // [Type: Uint8, Base: uint8, Units: years];
	WeightScaleMuscleMass                             = 5   // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: kg];
	WeightScalePercentFat                             = 1   // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: %];
	WeightScalePercentHydration                       = 2   // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: %];
	WeightScalePhysiqueRating                         = 8   // [Type: Uint8, Base: uint8];
	WeightScaleTimestamp                              = 253 // [Type: DateTime, Base: uint32, Units: s];
	WeightScaleUserProfileIndex                       = 12  // [Type: MessageIndex, Base: uint16]; Associates this weight scale message to a user. This corresponds to the index of the user profile message in the weight scale file.
	WeightScaleVisceralFatMass                        = 3   // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: kg];
	WeightScaleVisceralFatRating                      = 11  // [Type: Uint8, Base: uint8];
	WeightScaleWeight                                 = 0   // [Type: Weight, Base: uint16, Scale: 100, Offset: 0, Units: kg];
	WorkoutCapabilities                               = 5   // [Type: WorkoutCapabilities, Base: uint32z];
	WorkoutMessageIndex                               = 254 // [Type: MessageIndex, Base: uint16];
	WorkoutNumValidSteps                              = 6   // [Type: Uint16, Base: uint16]; number of valid steps
	WorkoutPoolLength                                 = 14  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m];
	WorkoutPoolLengthUnit                             = 15  // [Type: DisplayMeasure, Base: enum];
	WorkoutSessionFirstStepIndex                      = 3   // [Type: Uint16, Base: uint16];
	WorkoutSessionMessageIndex                        = 254 // [Type: MessageIndex, Base: uint16];
	WorkoutSessionNumValidSteps                       = 2   // [Type: Uint16, Base: uint16];
	WorkoutSessionPoolLength                          = 4   // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m];
	WorkoutSessionPoolLengthUnit                      = 5   // [Type: DisplayMeasure, Base: enum];
	WorkoutSessionSport                               = 0   // [Type: Sport, Base: enum];
	WorkoutSessionSubSport                            = 1   // [Type: SubSport, Base: enum];
	WorkoutSport                                      = 4   // [Type: Sport, Base: enum];
	WorkoutStepCustomTargetValueHigh                  = 6   // [Type: Uint32, Base: uint32];
	WorkoutStepCustomTargetValueLow                   = 5   // [Type: Uint32, Base: uint32];
	WorkoutStepDurationType                           = 1   // [Type: WktStepDuration, Base: enum];
	WorkoutStepDurationValue                          = 2   // [Type: Uint32, Base: uint32];
	WorkoutStepEquipment                              = 9   // [Type: WorkoutEquipment, Base: enum];
	WorkoutStepExerciseCategory                       = 10  // [Type: ExerciseCategory, Base: uint16];
	WorkoutStepExerciseName                           = 11  // [Type: Uint16, Base: uint16];
	WorkoutStepExerciseWeight                         = 12  // [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: kg];
	WorkoutStepIntensity                              = 7   // [Type: Intensity, Base: enum];
	WorkoutStepMessageIndex                           = 254 // [Type: MessageIndex, Base: uint16];
	WorkoutStepNotes                                  = 8   // [Type: String, Base: string];
	WorkoutStepSecondaryCustomTargetValueHigh         = 22  // [Type: Uint32, Base: uint32];
	WorkoutStepSecondaryCustomTargetValueLow          = 21  // [Type: Uint32, Base: uint32];
	WorkoutStepSecondaryTargetType                    = 19  // [Type: WktStepTarget, Base: enum];
	WorkoutStepSecondaryTargetValue                   = 20  // [Type: Uint32, Base: uint32];
	WorkoutStepTargetType                             = 3   // [Type: WktStepTarget, Base: enum];
	WorkoutStepTargetValue                            = 4   // [Type: Uint32, Base: uint32];
	WorkoutStepWeightDisplayUnit                      = 13  // [Type: FitBaseUnit, Base: uint16];
	WorkoutStepWktStepName                            = 0   // [Type: String, Base: string];
	WorkoutSubSport                                   = 11  // [Type: SubSport, Base: enum];
	WorkoutWktName                                    = 8   // [Type: String, Base: string];
	ZonesTargetFunctionalThresholdPower               = 3   // [Type: Uint16, Base: uint16];
	ZonesTargetHrCalcType                             = 5   // [Type: HrZoneCalc, Base: enum];
	ZonesTargetMaxHeartRate                           = 1   // [Type: Uint8, Base: uint8];
	ZonesTargetPwrCalcType                            = 7   // [Type: PwrZoneCalc, Base: enum];
	ZonesTargetThresholdHeartRate                     = 2   // [Type: Uint8, Base: uint8];
	Invalid                                           = 255
)
