// Code generated by internal/cmd/fitgen/main.go. DO NOT EDIT.

// Copyright 2023 The FIT SDK for Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package fieldnum contains untyped constants for greater flexibility, intended to simplify code typing when creating messages and fields
// using the factory and reduce human error.
//
// This should not be confused with typed constants in typedef. The value of these untyped constants remains the same as declared in typedef.
// The only difference is that untyped constants can take on many forms (byte, int, types.DateTime, types.File, etc.),
//
// For more information about Go constants, visit: https://go.dev/blog/constants.
package fieldnum

const (
	AadAccelFeaturesTimestamp                         = 253 // [ AadAccelFeatures ] [Type: DateTime, Base: uint32];
	AadAccelFeaturesTime                              = 0   // [ AadAccelFeatures ] [Type: Uint16, Base: uint16, Units: s]; Time interval length in seconds
	AadAccelFeaturesEnergyTotal                       = 1   // [ AadAccelFeatures ] [Type: Uint32, Base: uint32]; Total accelerometer energy in the interval
	AadAccelFeaturesZeroCrossCnt                      = 2   // [ AadAccelFeatures ] [Type: Uint16, Base: uint16]; Count of zero crossings
	AadAccelFeaturesInstance                          = 3   // [ AadAccelFeatures ] [Type: Uint8, Base: uint8]; Instance ID of zero crossing algorithm
	AadAccelFeaturesTimeAboveThreshold                = 4   // [ AadAccelFeatures ] [Type: Uint16, Base: uint16, Scale: 25, Offset: 0, Units: s]; Total accelerometer time above threshold in the interval
	AccelerometerDataTimestamp                        = 253 // [ AccelerometerData ] [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp
	AccelerometerDataTimestampMs                      = 0   // [ AccelerometerData ] [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the timestamp.
	AccelerometerDataSampleTimeOffset                 = 1   // [ AccelerometerData ] [Type: Uint16, Base: uint16, Array: [N], Units: ms]; Each time in the array describes the time at which the accelerometer sample with the corresponding index was taken. Limited to 30 samples in each message. The samples may span across seconds. Array size must match the number of samples in accel_x and accel_y and accel_z
	AccelerometerDataAccelX                           = 2   // [ AccelerometerData ] [Type: Uint16, Base: uint16, Array: [N], Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	AccelerometerDataAccelY                           = 3   // [ AccelerometerData ] [Type: Uint16, Base: uint16, Array: [N], Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	AccelerometerDataAccelZ                           = 4   // [ AccelerometerData ] [Type: Uint16, Base: uint16, Array: [N], Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	AccelerometerDataCalibratedAccelX                 = 5   // [ AccelerometerData ] [Type: Float32, Base: float32, Array: [N], Units: g]; Calibrated accel reading
	AccelerometerDataCalibratedAccelY                 = 6   // [ AccelerometerData ] [Type: Float32, Base: float32, Array: [N], Units: g]; Calibrated accel reading
	AccelerometerDataCalibratedAccelZ                 = 7   // [ AccelerometerData ] [Type: Float32, Base: float32, Array: [N], Units: g]; Calibrated accel reading
	AccelerometerDataCompressedCalibratedAccelX       = 8   // [ AccelerometerData ] [Type: Sint16, Base: sint16, Array: [N], Units: mG]; Calibrated accel reading
	AccelerometerDataCompressedCalibratedAccelY       = 9   // [ AccelerometerData ] [Type: Sint16, Base: sint16, Array: [N], Units: mG]; Calibrated accel reading
	AccelerometerDataCompressedCalibratedAccelZ       = 10  // [ AccelerometerData ] [Type: Sint16, Base: sint16, Array: [N], Units: mG]; Calibrated accel reading
	ActivityTimestamp                                 = 253 // [ Activity ] [Type: DateTime, Base: uint32];
	ActivityTotalTimerTime                            = 0   // [ Activity ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Exclude pauses
	ActivityNumSessions                               = 1   // [ Activity ] [Type: Uint16, Base: uint16];
	ActivityType                                      = 2   // [ Activity ] [Type: Activity, Base: enum];
	ActivityEvent                                     = 3   // [ Activity ] [Type: Event, Base: enum];
	ActivityEventType                                 = 4   // [ Activity ] [Type: EventType, Base: enum];
	ActivityLocalTimestamp                            = 5   // [ Activity ] [Type: LocalDateTime, Base: uint32]; timestamp epoch expressed in local time, used to convert activity timestamps to local time
	ActivityEventGroup                                = 6   // [ Activity ] [Type: Uint8, Base: uint8];
	AntChannelIdChannelNumber                         = 0   // [ AntChannelId ] [Type: Uint8, Base: uint8];
	AntChannelIdDeviceType                            = 1   // [ AntChannelId ] [Type: Uint8z, Base: uint8z];
	AntChannelIdDeviceNumber                          = 2   // [ AntChannelId ] [Type: Uint16z, Base: uint16z];
	AntChannelIdTransmissionType                      = 3   // [ AntChannelId ] [Type: Uint8z, Base: uint8z];
	AntChannelIdDeviceIndex                           = 4   // [ AntChannelId ] [Type: DeviceIndex, Base: uint8];
	AntRxTimestamp                                    = 253 // [ AntRx ] [Type: DateTime, Base: uint32, Units: s];
	AntRxFractionalTimestamp                          = 0   // [ AntRx ] [Type: Uint16, Base: uint16, Scale: 32768, Offset: 0, Units: s];
	AntRxMesgId                                       = 1   // [ AntRx ] [Type: Byte, Base: byte];
	AntRxMesgData                                     = 2   // [ AntRx ] [Type: Byte, Base: byte, Array: [N]];
	AntRxChannelNumber                                = 3   // [ AntRx ] [Type: Uint8, Base: uint8];
	AntRxData                                         = 4   // [ AntRx ] [Type: Byte, Base: byte, Array: [N]];
	AntTxTimestamp                                    = 253 // [ AntTx ] [Type: DateTime, Base: uint32, Units: s];
	AntTxFractionalTimestamp                          = 0   // [ AntTx ] [Type: Uint16, Base: uint16, Scale: 32768, Offset: 0, Units: s];
	AntTxMesgId                                       = 1   // [ AntTx ] [Type: Byte, Base: byte];
	AntTxMesgData                                     = 2   // [ AntTx ] [Type: Byte, Base: byte, Array: [N]];
	AntTxChannelNumber                                = 3   // [ AntTx ] [Type: Uint8, Base: uint8];
	AntTxData                                         = 4   // [ AntTx ] [Type: Byte, Base: byte, Array: [N]];
	AviationAttitudeTimestamp                         = 253 // [ AviationAttitude ] [Type: DateTime, Base: uint32, Units: s]; Timestamp message was output
	AviationAttitudeTimestampMs                       = 0   // [ AviationAttitude ] [Type: Uint16, Base: uint16, Units: ms]; Fractional part of timestamp, added to timestamp
	AviationAttitudeSystemTime                        = 1   // [ AviationAttitude ] [Type: Uint32, Base: uint32, Array: [N], Units: ms]; System time associated with sample expressed in ms.
	AviationAttitudePitch                             = 2   // [ AviationAttitude ] [Type: Sint16, Base: sint16, Array: [N], Scale: 10430.38, Offset: 0, Units: radians]; Range -PI/2 to +PI/2
	AviationAttitudeRoll                              = 3   // [ AviationAttitude ] [Type: Sint16, Base: sint16, Array: [N], Scale: 10430.38, Offset: 0, Units: radians]; Range -PI to +PI
	AviationAttitudeAccelLateral                      = 4   // [ AviationAttitude ] [Type: Sint16, Base: sint16, Array: [N], Scale: 100, Offset: 0, Units: m/s^2]; Range -78.4 to +78.4 (-8 Gs to 8 Gs)
	AviationAttitudeAccelNormal                       = 5   // [ AviationAttitude ] [Type: Sint16, Base: sint16, Array: [N], Scale: 100, Offset: 0, Units: m/s^2]; Range -78.4 to +78.4 (-8 Gs to 8 Gs)
	AviationAttitudeTurnRate                          = 6   // [ AviationAttitude ] [Type: Sint16, Base: sint16, Array: [N], Scale: 1024, Offset: 0, Units: radians/second]; Range -8.727 to +8.727 (-500 degs/sec to +500 degs/sec)
	AviationAttitudeStage                             = 7   // [ AviationAttitude ] [Type: AttitudeStage, Base: enum, Array: [N]];
	AviationAttitudeAttitudeStageComplete             = 8   // [ AviationAttitude ] [Type: Uint8, Base: uint8, Array: [N], Units: %]; The percent complete of the current attitude stage. Set to 0 for attitude stages 0, 1 and 2 and to 100 for attitude stage 3 by AHRS modules that do not support it. Range - 100
	AviationAttitudeTrack                             = 9   // [ AviationAttitude ] [Type: Uint16, Base: uint16, Array: [N], Scale: 10430.38, Offset: 0, Units: radians]; Track Angle/Heading Range 0 - 2pi
	AviationAttitudeValidity                          = 10  // [ AviationAttitude ] [Type: AttitudeValidity, Base: uint16, Array: [N]];
	BarometerDataTimestamp                            = 253 // [ BarometerData ] [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp
	BarometerDataTimestampMs                          = 0   // [ BarometerData ] [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the timestamp.
	BarometerDataSampleTimeOffset                     = 1   // [ BarometerData ] [Type: Uint16, Base: uint16, Array: [N], Units: ms]; Each time in the array describes the time at which the barometer sample with the corresponding index was taken. The samples may span across seconds. Array size must match the number of samples in baro_cal
	BarometerDataBaroPres                             = 2   // [ BarometerData ] [Type: Uint32, Base: uint32, Array: [N], Units: Pa]; These are the raw ADC reading. The samples may span across seconds. A conversion will need to be done on this data once read.
	BeatIntervalsTimestamp                            = 253 // [ BeatIntervals ] [Type: DateTime, Base: uint32];
	BeatIntervalsTimestampMs                          = 0   // [ BeatIntervals ] [Type: Uint16, Base: uint16, Units: ms]; Milliseconds past date_time
	BeatIntervalsTime                                 = 1   // [ BeatIntervals ] [Type: Uint16, Base: uint16, Array: [N], Units: ms]; Array of millisecond times between beats
	BikeProfileMessageIndex                           = 254 // [ BikeProfile ] [Type: MessageIndex, Base: uint16];
	BikeProfileName                                   = 0   // [ BikeProfile ] [Type: String, Base: string];
	BikeProfileSport                                  = 1   // [ BikeProfile ] [Type: Sport, Base: enum];
	BikeProfileSubSport                               = 2   // [ BikeProfile ] [Type: SubSport, Base: enum];
	BikeProfileOdometer                               = 3   // [ BikeProfile ] [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	BikeProfileBikeSpdAntId                           = 4   // [ BikeProfile ] [Type: Uint16z, Base: uint16z];
	BikeProfileBikeCadAntId                           = 5   // [ BikeProfile ] [Type: Uint16z, Base: uint16z];
	BikeProfileBikeSpdcadAntId                        = 6   // [ BikeProfile ] [Type: Uint16z, Base: uint16z];
	BikeProfileBikePowerAntId                         = 7   // [ BikeProfile ] [Type: Uint16z, Base: uint16z];
	BikeProfileCustomWheelsize                        = 8   // [ BikeProfile ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m];
	BikeProfileAutoWheelsize                          = 9   // [ BikeProfile ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m];
	BikeProfileBikeWeight                             = 10  // [ BikeProfile ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: kg];
	BikeProfilePowerCalFactor                         = 11  // [ BikeProfile ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %];
	BikeProfileAutoWheelCal                           = 12  // [ BikeProfile ] [Type: Bool, Base: bool | enum];
	BikeProfileAutoPowerZero                          = 13  // [ BikeProfile ] [Type: Bool, Base: bool | enum];
	BikeProfileId                                     = 14  // [ BikeProfile ] [Type: Uint8, Base: uint8];
	BikeProfileSpdEnabled                             = 15  // [ BikeProfile ] [Type: Bool, Base: bool | enum];
	BikeProfileCadEnabled                             = 16  // [ BikeProfile ] [Type: Bool, Base: bool | enum];
	BikeProfileSpdcadEnabled                          = 17  // [ BikeProfile ] [Type: Bool, Base: bool | enum];
	BikeProfilePowerEnabled                           = 18  // [ BikeProfile ] [Type: Bool, Base: bool | enum];
	BikeProfileCrankLength                            = 19  // [ BikeProfile ] [Type: Uint8, Base: uint8, Scale: 2, Offset: -110, Units: mm];
	BikeProfileEnabled                                = 20  // [ BikeProfile ] [Type: Bool, Base: bool | enum];
	BikeProfileBikeSpdAntIdTransType                  = 21  // [ BikeProfile ] [Type: Uint8z, Base: uint8z];
	BikeProfileBikeCadAntIdTransType                  = 22  // [ BikeProfile ] [Type: Uint8z, Base: uint8z];
	BikeProfileBikeSpdcadAntIdTransType               = 23  // [ BikeProfile ] [Type: Uint8z, Base: uint8z];
	BikeProfileBikePowerAntIdTransType                = 24  // [ BikeProfile ] [Type: Uint8z, Base: uint8z];
	BikeProfileOdometerRollover                       = 37  // [ BikeProfile ] [Type: Uint8, Base: uint8]; Rollover counter that can be used to extend the odometer
	BikeProfileFrontGearNum                           = 38  // [ BikeProfile ] [Type: Uint8z, Base: uint8z]; Number of front gears
	BikeProfileFrontGear                              = 39  // [ BikeProfile ] [Type: Uint8z, Base: uint8z, Array: [N]]; Number of teeth on each gear 0 is innermost
	BikeProfileRearGearNum                            = 40  // [ BikeProfile ] [Type: Uint8z, Base: uint8z]; Number of rear gears
	BikeProfileRearGear                               = 41  // [ BikeProfile ] [Type: Uint8z, Base: uint8z, Array: [N]]; Number of teeth on each gear 0 is innermost
	BikeProfileShimanoDi2Enabled                      = 44  // [ BikeProfile ] [Type: Bool, Base: bool | enum];
	BloodPressureTimestamp                            = 253 // [ BloodPressure ] [Type: DateTime, Base: uint32, Units: s];
	BloodPressureSystolicPressure                     = 0   // [ BloodPressure ] [Type: Uint16, Base: uint16, Units: mmHg];
	BloodPressureDiastolicPressure                    = 1   // [ BloodPressure ] [Type: Uint16, Base: uint16, Units: mmHg];
	BloodPressureMeanArterialPressure                 = 2   // [ BloodPressure ] [Type: Uint16, Base: uint16, Units: mmHg];
	BloodPressureMap3SampleMean                       = 3   // [ BloodPressure ] [Type: Uint16, Base: uint16, Units: mmHg];
	BloodPressureMapMorningValues                     = 4   // [ BloodPressure ] [Type: Uint16, Base: uint16, Units: mmHg];
	BloodPressureMapEveningValues                     = 5   // [ BloodPressure ] [Type: Uint16, Base: uint16, Units: mmHg];
	BloodPressureHeartRate                            = 6   // [ BloodPressure ] [Type: Uint8, Base: uint8, Units: bpm];
	BloodPressureHeartRateType                        = 7   // [ BloodPressure ] [Type: HrType, Base: enum];
	BloodPressureStatus                               = 8   // [ BloodPressure ] [Type: BpStatus, Base: enum];
	BloodPressureUserProfileIndex                     = 9   // [ BloodPressure ] [Type: MessageIndex, Base: uint16]; Associates this blood pressure message to a user. This corresponds to the index of the user profile message in the blood pressure file.
	CadenceZoneMessageIndex                           = 254 // [ CadenceZone ] [Type: MessageIndex, Base: uint16];
	CadenceZoneHighValue                              = 0   // [ CadenceZone ] [Type: Uint8, Base: uint8, Units: rpm];
	CadenceZoneName                                   = 1   // [ CadenceZone ] [Type: String, Base: string];
	CameraEventTimestamp                              = 253 // [ CameraEvent ] [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp.
	CameraEventTimestampMs                            = 0   // [ CameraEvent ] [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the timestamp.
	CameraEventCameraEventType                        = 1   // [ CameraEvent ] [Type: CameraEventType, Base: enum];
	CameraEventCameraFileUuid                         = 2   // [ CameraEvent ] [Type: String, Base: string];
	CameraEventCameraOrientation                      = 3   // [ CameraEvent ] [Type: CameraOrientationType, Base: enum];
	CapabilitiesLanguages                             = 0   // [ Capabilities ] [Type: Uint8z, Base: uint8z, Array: [N]]; Use language_bits_x types where x is index of array.
	CapabilitiesSports                                = 1   // [ Capabilities ] [Type: SportBits0, Base: uint8z, Array: [N]]; Use sport_bits_x types where x is index of array.
	CapabilitiesWorkoutsSupported                     = 21  // [ Capabilities ] [Type: WorkoutCapabilities, Base: uint32z];
	CapabilitiesConnectivitySupported                 = 23  // [ Capabilities ] [Type: ConnectivityCapabilities, Base: uint32z];
	ChronoShotDataTimestamp                           = 253 // [ ChronoShotData ] [Type: DateTime, Base: uint32];
	ChronoShotDataShotSpeed                           = 0   // [ ChronoShotData ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	ChronoShotDataShotNum                             = 1   // [ ChronoShotData ] [Type: Uint16, Base: uint16];
	ChronoShotSessionTimestamp                        = 253 // [ ChronoShotSession ] [Type: DateTime, Base: uint32];
	ChronoShotSessionMinSpeed                         = 0   // [ ChronoShotSession ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	ChronoShotSessionMaxSpeed                         = 1   // [ ChronoShotSession ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	ChronoShotSessionAvgSpeed                         = 2   // [ ChronoShotSession ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	ChronoShotSessionShotCount                        = 3   // [ ChronoShotSession ] [Type: Uint16, Base: uint16];
	ChronoShotSessionProjectileType                   = 4   // [ ChronoShotSession ] [Type: ProjectileType, Base: enum];
	ChronoShotSessionGrainWeight                      = 5   // [ ChronoShotSession ] [Type: Uint32, Base: uint32, Scale: 10, Offset: 0, Units: gr];
	ChronoShotSessionStandardDeviation                = 6   // [ ChronoShotSession ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	ClimbProTimestamp                                 = 253 // [ ClimbPro ] [Type: DateTime, Base: uint32, Units: s];
	ClimbProPositionLat                               = 0   // [ ClimbPro ] [Type: Sint32, Base: sint32, Units: semicircles];
	ClimbProPositionLong                              = 1   // [ ClimbPro ] [Type: Sint32, Base: sint32, Units: semicircles];
	ClimbProClimbProEvent                             = 2   // [ ClimbPro ] [Type: ClimbProEvent, Base: enum];
	ClimbProClimbNumber                               = 3   // [ ClimbPro ] [Type: Uint16, Base: uint16];
	ClimbProClimbCategory                             = 4   // [ ClimbPro ] [Type: Uint8, Base: uint8];
	ClimbProCurrentDist                               = 5   // [ ClimbPro ] [Type: Float32, Base: float32, Units: m];
	ConnectivityBluetoothEnabled                      = 0   // [ Connectivity ] [Type: Bool, Base: bool | enum]; Use Bluetooth for connectivity features
	ConnectivityBluetoothLeEnabled                    = 1   // [ Connectivity ] [Type: Bool, Base: bool | enum]; Use Bluetooth Low Energy for connectivity features
	ConnectivityAntEnabled                            = 2   // [ Connectivity ] [Type: Bool, Base: bool | enum]; Use ANT for connectivity features
	ConnectivityName                                  = 3   // [ Connectivity ] [Type: String, Base: string];
	ConnectivityLiveTrackingEnabled                   = 4   // [ Connectivity ] [Type: Bool, Base: bool | enum];
	ConnectivityWeatherConditionsEnabled              = 5   // [ Connectivity ] [Type: Bool, Base: bool | enum];
	ConnectivityWeatherAlertsEnabled                  = 6   // [ Connectivity ] [Type: Bool, Base: bool | enum];
	ConnectivityAutoActivityUploadEnabled             = 7   // [ Connectivity ] [Type: Bool, Base: bool | enum];
	ConnectivityCourseDownloadEnabled                 = 8   // [ Connectivity ] [Type: Bool, Base: bool | enum];
	ConnectivityWorkoutDownloadEnabled                = 9   // [ Connectivity ] [Type: Bool, Base: bool | enum];
	ConnectivityGpsEphemerisDownloadEnabled           = 10  // [ Connectivity ] [Type: Bool, Base: bool | enum];
	ConnectivityIncidentDetectionEnabled              = 11  // [ Connectivity ] [Type: Bool, Base: bool | enum];
	ConnectivityGrouptrackEnabled                     = 12  // [ Connectivity ] [Type: Bool, Base: bool | enum];
	CourseSport                                       = 4   // [ Course ] [Type: Sport, Base: enum];
	CourseName                                        = 5   // [ Course ] [Type: String, Base: string];
	CourseCapabilities                                = 6   // [ Course ] [Type: CourseCapabilities, Base: uint32z];
	CourseSubSport                                    = 7   // [ Course ] [Type: SubSport, Base: enum];
	CoursePointMessageIndex                           = 254 // [ CoursePoint ] [Type: MessageIndex, Base: uint16];
	CoursePointTimestamp                              = 1   // [ CoursePoint ] [Type: DateTime, Base: uint32];
	CoursePointPositionLat                            = 2   // [ CoursePoint ] [Type: Sint32, Base: sint32, Units: semicircles];
	CoursePointPositionLong                           = 3   // [ CoursePoint ] [Type: Sint32, Base: sint32, Units: semicircles];
	CoursePointDistance                               = 4   // [ CoursePoint ] [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	CoursePointType                                   = 5   // [ CoursePoint ] [Type: CoursePoint, Base: enum];
	CoursePointName                                   = 6   // [ CoursePoint ] [Type: String, Base: string];
	CoursePointFavorite                               = 8   // [ CoursePoint ] [Type: Bool, Base: bool | enum];
	DeveloperDataIdDeveloperId                        = 0   // [ DeveloperDataId ] [Type: Byte, Base: byte, Array: [N]];
	DeveloperDataIdApplicationId                      = 1   // [ DeveloperDataId ] [Type: Byte, Base: byte, Array: [N]];
	DeveloperDataIdManufacturerId                     = 2   // [ DeveloperDataId ] [Type: Manufacturer, Base: uint16];
	DeveloperDataIdDeveloperDataIndex                 = 3   // [ DeveloperDataId ] [Type: Uint8, Base: uint8];
	DeveloperDataIdApplicationVersion                 = 4   // [ DeveloperDataId ] [Type: Uint32, Base: uint32];
	DeviceAuxBatteryInfoTimestamp                     = 253 // [ DeviceAuxBatteryInfo ] [Type: DateTime, Base: uint32];
	DeviceAuxBatteryInfoDeviceIndex                   = 0   // [ DeviceAuxBatteryInfo ] [Type: DeviceIndex, Base: uint8];
	DeviceAuxBatteryInfoBatteryVoltage                = 1   // [ DeviceAuxBatteryInfo ] [Type: Uint16, Base: uint16, Scale: 256, Offset: 0, Units: V];
	DeviceAuxBatteryInfoBatteryStatus                 = 2   // [ DeviceAuxBatteryInfo ] [Type: BatteryStatus, Base: uint8];
	DeviceAuxBatteryInfoBatteryIdentifier             = 3   // [ DeviceAuxBatteryInfo ] [Type: Uint8, Base: uint8];
	DeviceInfoTimestamp                               = 253 // [ DeviceInfo ] [Type: DateTime, Base: uint32, Units: s];
	DeviceInfoDeviceIndex                             = 0   // [ DeviceInfo ] [Type: DeviceIndex, Base: uint8];
	DeviceInfoDeviceType                              = 1   // [ DeviceInfo ] [Type: Uint8, Base: uint8];
	DeviceInfoManufacturer                            = 2   // [ DeviceInfo ] [Type: Manufacturer, Base: uint16];
	DeviceInfoSerialNumber                            = 3   // [ DeviceInfo ] [Type: Uint32z, Base: uint32z];
	DeviceInfoProduct                                 = 4   // [ DeviceInfo ] [Type: Uint16, Base: uint16];
	DeviceInfoSoftwareVersion                         = 5   // [ DeviceInfo ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0];
	DeviceInfoHardwareVersion                         = 6   // [ DeviceInfo ] [Type: Uint8, Base: uint8];
	DeviceInfoCumOperatingTime                        = 7   // [ DeviceInfo ] [Type: Uint32, Base: uint32, Units: s]; Reset by new battery or charge.
	DeviceInfoBatteryVoltage                          = 10  // [ DeviceInfo ] [Type: Uint16, Base: uint16, Scale: 256, Offset: 0, Units: V];
	DeviceInfoBatteryStatus                           = 11  // [ DeviceInfo ] [Type: BatteryStatus, Base: uint8];
	DeviceInfoSensorPosition                          = 18  // [ DeviceInfo ] [Type: BodyLocation, Base: enum]; Indicates the location of the sensor
	DeviceInfoDescriptor                              = 19  // [ DeviceInfo ] [Type: String, Base: string]; Used to describe the sensor or location
	DeviceInfoAntTransmissionType                     = 20  // [ DeviceInfo ] [Type: Uint8z, Base: uint8z];
	DeviceInfoAntDeviceNumber                         = 21  // [ DeviceInfo ] [Type: Uint16z, Base: uint16z];
	DeviceInfoAntNetwork                              = 22  // [ DeviceInfo ] [Type: AntNetwork, Base: enum];
	DeviceInfoSourceType                              = 25  // [ DeviceInfo ] [Type: SourceType, Base: enum];
	DeviceInfoProductName                             = 27  // [ DeviceInfo ] [Type: String, Base: string]; Optional free form string to indicate the devices name or model
	DeviceInfoBatteryLevel                            = 32  // [ DeviceInfo ] [Type: Uint8, Base: uint8, Units: %];
	DeviceSettingsActiveTimeZone                      = 0   // [ DeviceSettings ] [Type: Uint8, Base: uint8]; Index into time zone arrays.
	DeviceSettingsUtcOffset                           = 1   // [ DeviceSettings ] [Type: Uint32, Base: uint32]; Offset from system time. Required to convert timestamp from system time to UTC.
	DeviceSettingsTimeOffset                          = 2   // [ DeviceSettings ] [Type: Uint32, Base: uint32, Array: [N], Units: s]; Offset from system time.
	DeviceSettingsTimeMode                            = 4   // [ DeviceSettings ] [Type: TimeMode, Base: enum, Array: [N]]; Display mode for the time
	DeviceSettingsTimeZoneOffset                      = 5   // [ DeviceSettings ] [Type: Sint8, Base: sint8, Array: [N], Scale: 4, Offset: 0, Units: hr]; timezone offset in 1/4 hour increments
	DeviceSettingsBacklightMode                       = 12  // [ DeviceSettings ] [Type: BacklightMode, Base: enum]; Mode for backlight
	DeviceSettingsActivityTrackerEnabled              = 36  // [ DeviceSettings ] [Type: Bool, Base: bool | enum]; Enabled state of the activity tracker functionality
	DeviceSettingsClockTime                           = 39  // [ DeviceSettings ] [Type: DateTime, Base: uint32]; UTC timestamp used to set the devices clock and date
	DeviceSettingsPagesEnabled                        = 40  // [ DeviceSettings ] [Type: Uint16, Base: uint16, Array: [N]]; Bitfield to configure enabled screens for each supported loop
	DeviceSettingsMoveAlertEnabled                    = 46  // [ DeviceSettings ] [Type: Bool, Base: bool | enum]; Enabled state of the move alert
	DeviceSettingsDateMode                            = 47  // [ DeviceSettings ] [Type: DateMode, Base: enum]; Display mode for the date
	DeviceSettingsDisplayOrientation                  = 55  // [ DeviceSettings ] [Type: DisplayOrientation, Base: enum];
	DeviceSettingsMountingSide                        = 56  // [ DeviceSettings ] [Type: Side, Base: enum];
	DeviceSettingsDefaultPage                         = 57  // [ DeviceSettings ] [Type: Uint16, Base: uint16, Array: [N]]; Bitfield to indicate one page as default for each supported loop
	DeviceSettingsAutosyncMinSteps                    = 58  // [ DeviceSettings ] [Type: Uint16, Base: uint16, Units: steps]; Minimum steps before an autosync can occur
	DeviceSettingsAutosyncMinTime                     = 59  // [ DeviceSettings ] [Type: Uint16, Base: uint16, Units: minutes]; Minimum minutes before an autosync can occur
	DeviceSettingsLactateThresholdAutodetectEnabled   = 80  // [ DeviceSettings ] [Type: Bool, Base: bool | enum]; Enable auto-detect setting for the lactate threshold feature.
	DeviceSettingsBleAutoUploadEnabled                = 86  // [ DeviceSettings ] [Type: Bool, Base: bool | enum]; Automatically upload using BLE
	DeviceSettingsAutoSyncFrequency                   = 89  // [ DeviceSettings ] [Type: AutoSyncFrequency, Base: enum]; Helps to conserve battery by changing modes
	DeviceSettingsAutoActivityDetect                  = 90  // [ DeviceSettings ] [Type: AutoActivityDetect, Base: uint32]; Allows setting specific activities auto-activity detect enabled/disabled settings
	DeviceSettingsNumberOfScreens                     = 94  // [ DeviceSettings ] [Type: Uint8, Base: uint8]; Number of screens configured to display
	DeviceSettingsSmartNotificationDisplayOrientation = 95  // [ DeviceSettings ] [Type: DisplayOrientation, Base: enum]; Smart Notification display orientation
	DeviceSettingsTapInterface                        = 134 // [ DeviceSettings ] [Type: Switch, Base: enum];
	DeviceSettingsTapSensitivity                      = 174 // [ DeviceSettings ] [Type: TapSensitivity, Base: enum]; Used to hold the tap threshold setting
	DiveAlarmMessageIndex                             = 254 // [ DiveAlarm ] [Type: MessageIndex, Base: uint16]; Index of the alarm
	DiveAlarmDepth                                    = 0   // [ DiveAlarm ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; Depth setting (m) for depth type alarms
	DiveAlarmTime                                     = 1   // [ DiveAlarm ] [Type: Sint32, Base: sint32, Units: s]; Time setting (s) for time type alarms
	DiveAlarmEnabled                                  = 2   // [ DiveAlarm ] [Type: Bool, Base: bool | enum]; Enablement flag
	DiveAlarmAlarmType                                = 3   // [ DiveAlarm ] [Type: DiveAlarmType, Base: enum]; Alarm type setting
	DiveAlarmSound                                    = 4   // [ DiveAlarm ] [Type: Tone, Base: enum]; Tone and Vibe setting for the alarm
	DiveAlarmDiveTypes                                = 5   // [ DiveAlarm ] [Type: SubSport, Base: enum, Array: [N]]; Dive types the alarm will trigger on
	DiveAlarmId                                       = 6   // [ DiveAlarm ] [Type: Uint32, Base: uint32]; Alarm ID
	DiveAlarmPopupEnabled                             = 7   // [ DiveAlarm ] [Type: Bool, Base: bool | enum]; Show a visible pop-up for this alarm
	DiveAlarmTriggerOnDescent                         = 8   // [ DiveAlarm ] [Type: Bool, Base: bool | enum]; Trigger the alarm on descent
	DiveAlarmTriggerOnAscent                          = 9   // [ DiveAlarm ] [Type: Bool, Base: bool | enum]; Trigger the alarm on ascent
	DiveAlarmRepeating                                = 10  // [ DiveAlarm ] [Type: Bool, Base: bool | enum]; Repeat alarm each time threshold is crossed?
	DiveAlarmSpeed                                    = 11  // [ DiveAlarm ] [Type: Sint32, Base: sint32, Scale: 1000, Offset: 0, Units: mps]; Ascent/descent rate (mps) setting for speed type alarms
	DiveApneaAlarmMessageIndex                        = 254 // [ DiveApneaAlarm ] [Type: MessageIndex, Base: uint16]; Index of the alarm
	DiveApneaAlarmDepth                               = 0   // [ DiveApneaAlarm ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; Depth setting (m) for depth type alarms
	DiveApneaAlarmTime                                = 1   // [ DiveApneaAlarm ] [Type: Sint32, Base: sint32, Units: s]; Time setting (s) for time type alarms
	DiveApneaAlarmEnabled                             = 2   // [ DiveApneaAlarm ] [Type: Bool, Base: bool | enum]; Enablement flag
	DiveApneaAlarmAlarmType                           = 3   // [ DiveApneaAlarm ] [Type: DiveAlarmType, Base: enum]; Alarm type setting
	DiveApneaAlarmSound                               = 4   // [ DiveApneaAlarm ] [Type: Tone, Base: enum]; Tone and Vibe setting for the alarm.
	DiveApneaAlarmDiveTypes                           = 5   // [ DiveApneaAlarm ] [Type: SubSport, Base: enum, Array: [N]]; Dive types the alarm will trigger on
	DiveApneaAlarmId                                  = 6   // [ DiveApneaAlarm ] [Type: Uint32, Base: uint32]; Alarm ID
	DiveApneaAlarmPopupEnabled                        = 7   // [ DiveApneaAlarm ] [Type: Bool, Base: bool | enum]; Show a visible pop-up for this alarm
	DiveApneaAlarmTriggerOnDescent                    = 8   // [ DiveApneaAlarm ] [Type: Bool, Base: bool | enum]; Trigger the alarm on descent
	DiveApneaAlarmTriggerOnAscent                     = 9   // [ DiveApneaAlarm ] [Type: Bool, Base: bool | enum]; Trigger the alarm on ascent
	DiveApneaAlarmRepeating                           = 10  // [ DiveApneaAlarm ] [Type: Bool, Base: bool | enum]; Repeat alarm each time threshold is crossed?
	DiveApneaAlarmSpeed                               = 11  // [ DiveApneaAlarm ] [Type: Sint32, Base: sint32, Scale: 1000, Offset: 0, Units: mps]; Ascent/descent rate (mps) setting for speed type alarms
	DiveGasMessageIndex                               = 254 // [ DiveGas ] [Type: MessageIndex, Base: uint16];
	DiveGasHeliumContent                              = 0   // [ DiveGas ] [Type: Uint8, Base: uint8, Units: percent];
	DiveGasOxygenContent                              = 1   // [ DiveGas ] [Type: Uint8, Base: uint8, Units: percent];
	DiveGasStatus                                     = 2   // [ DiveGas ] [Type: DiveGasStatus, Base: enum];
	DiveGasMode                                       = 3   // [ DiveGas ] [Type: DiveGasMode, Base: enum];
	DiveSettingsTimestamp                             = 253 // [ DiveSettings ] [Type: DateTime, Base: uint32];
	DiveSettingsMessageIndex                          = 254 // [ DiveSettings ] [Type: MessageIndex, Base: uint16];
	DiveSettingsName                                  = 0   // [ DiveSettings ] [Type: String, Base: string];
	DiveSettingsModel                                 = 1   // [ DiveSettings ] [Type: TissueModelType, Base: enum];
	DiveSettingsGfLow                                 = 2   // [ DiveSettings ] [Type: Uint8, Base: uint8, Units: percent];
	DiveSettingsGfHigh                                = 3   // [ DiveSettings ] [Type: Uint8, Base: uint8, Units: percent];
	DiveSettingsWaterType                             = 4   // [ DiveSettings ] [Type: WaterType, Base: enum];
	DiveSettingsWaterDensity                          = 5   // [ DiveSettings ] [Type: Float32, Base: float32, Units: kg/m^3]; Fresh water is usually 1000; salt water is usually 1025
	DiveSettingsPo2Warn                               = 6   // [ DiveSettings ] [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: percent]; Typically 1.40
	DiveSettingsPo2Critical                           = 7   // [ DiveSettings ] [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: percent]; Typically 1.60
	DiveSettingsPo2Deco                               = 8   // [ DiveSettings ] [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: percent];
	DiveSettingsSafetyStopEnabled                     = 9   // [ DiveSettings ] [Type: Bool, Base: bool | enum];
	DiveSettingsBottomDepth                           = 10  // [ DiveSettings ] [Type: Float32, Base: float32];
	DiveSettingsBottomTime                            = 11  // [ DiveSettings ] [Type: Uint32, Base: uint32];
	DiveSettingsApneaCountdownEnabled                 = 12  // [ DiveSettings ] [Type: Bool, Base: bool | enum];
	DiveSettingsApneaCountdownTime                    = 13  // [ DiveSettings ] [Type: Uint32, Base: uint32];
	DiveSettingsBacklightMode                         = 14  // [ DiveSettings ] [Type: DiveBacklightMode, Base: enum];
	DiveSettingsBacklightBrightness                   = 15  // [ DiveSettings ] [Type: Uint8, Base: uint8];
	DiveSettingsBacklightTimeout                      = 16  // [ DiveSettings ] [Type: BacklightTimeout, Base: uint8];
	DiveSettingsRepeatDiveInterval                    = 17  // [ DiveSettings ] [Type: Uint16, Base: uint16, Units: s]; Time between surfacing and ending the activity
	DiveSettingsSafetyStopTime                        = 18  // [ DiveSettings ] [Type: Uint16, Base: uint16, Units: s]; Time at safety stop (if enabled)
	DiveSettingsHeartRateSourceType                   = 19  // [ DiveSettings ] [Type: SourceType, Base: enum];
	DiveSettingsHeartRateSource                       = 20  // [ DiveSettings ] [Type: Uint8, Base: uint8];
	DiveSettingsTravelGas                             = 21  // [ DiveSettings ] [Type: MessageIndex, Base: uint16]; Index of travel dive_gas message
	DiveSettingsCcrLowSetpointSwitchMode              = 22  // [ DiveSettings ] [Type: CcrSetpointSwitchMode, Base: enum]; If low PO2 should be switched to automatically
	DiveSettingsCcrLowSetpoint                        = 23  // [ DiveSettings ] [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: percent]; Target PO2 when using low setpoint
	DiveSettingsCcrLowSetpointDepth                   = 24  // [ DiveSettings ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; Depth to switch to low setpoint in automatic mode
	DiveSettingsCcrHighSetpointSwitchMode             = 25  // [ DiveSettings ] [Type: CcrSetpointSwitchMode, Base: enum]; If high PO2 should be switched to automatically
	DiveSettingsCcrHighSetpoint                       = 26  // [ DiveSettings ] [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: percent]; Target PO2 when using high setpoint
	DiveSettingsCcrHighSetpointDepth                  = 27  // [ DiveSettings ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; Depth to switch to high setpoint in automatic mode
	DiveSettingsGasConsumptionDisplay                 = 29  // [ DiveSettings ] [Type: GasConsumptionRateType, Base: enum]; Type of gas consumption rate to display. Some values are only valid if tank volume is known.
	DiveSettingsUpKeyEnabled                          = 30  // [ DiveSettings ] [Type: Bool, Base: bool | enum]; Indicates whether the up key is enabled during dives
	DiveSettingsDiveSounds                            = 35  // [ DiveSettings ] [Type: Tone, Base: enum]; Sounds and vibration enabled or disabled in-dive
	DiveSettingsLastStopMultiple                      = 36  // [ DiveSettings ] [Type: Uint8, Base: uint8, Scale: 10, Offset: 0]; Usually 1.0/1.5/2.0 representing 3/4.5/6m or 10/15/20ft
	DiveSettingsNoFlyTimeMode                         = 37  // [ DiveSettings ] [Type: NoFlyTimeMode, Base: enum]; Indicates which guidelines to use for no-fly surface interval.
	DiveSummaryTimestamp                              = 253 // [ DiveSummary ] [Type: DateTime, Base: uint32, Units: s];
	DiveSummaryReferenceMesg                          = 0   // [ DiveSummary ] [Type: MesgNum, Base: uint16];
	DiveSummaryReferenceIndex                         = 1   // [ DiveSummary ] [Type: MessageIndex, Base: uint16];
	DiveSummaryAvgDepth                               = 2   // [ DiveSummary ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	DiveSummaryMaxDepth                               = 3   // [ DiveSummary ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	DiveSummarySurfaceInterval                        = 4   // [ DiveSummary ] [Type: Uint32, Base: uint32, Units: s]; Time since end of last dive
	DiveSummaryStartCns                               = 5   // [ DiveSummary ] [Type: Uint8, Base: uint8, Units: percent];
	DiveSummaryEndCns                                 = 6   // [ DiveSummary ] [Type: Uint8, Base: uint8, Units: percent];
	DiveSummaryStartN2                                = 7   // [ DiveSummary ] [Type: Uint16, Base: uint16, Units: percent];
	DiveSummaryEndN2                                  = 8   // [ DiveSummary ] [Type: Uint16, Base: uint16, Units: percent];
	DiveSummaryO2Toxicity                             = 9   // [ DiveSummary ] [Type: Uint16, Base: uint16, Units: OTUs];
	DiveSummaryDiveNumber                             = 10  // [ DiveSummary ] [Type: Uint32, Base: uint32];
	DiveSummaryBottomTime                             = 11  // [ DiveSummary ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	DiveSummaryAvgPressureSac                         = 12  // [ DiveSummary ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: bar/min]; Average pressure-based surface air consumption
	DiveSummaryAvgVolumeSac                           = 13  // [ DiveSummary ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: L/min]; Average volumetric surface air consumption
	DiveSummaryAvgRmv                                 = 14  // [ DiveSummary ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: L/min]; Average respiratory minute volume
	DiveSummaryDescentTime                            = 15  // [ DiveSummary ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Time to reach deepest level stop
	DiveSummaryAscentTime                             = 16  // [ DiveSummary ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Time after leaving bottom until reaching surface
	DiveSummaryAvgAscentRate                          = 17  // [ DiveSummary ] [Type: Sint32, Base: sint32, Scale: 1000, Offset: 0, Units: m/s]; Average ascent rate, not including descents or stops
	DiveSummaryAvgDescentRate                         = 22  // [ DiveSummary ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s]; Average descent rate, not including ascents or stops
	DiveSummaryMaxAscentRate                          = 23  // [ DiveSummary ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s]; Maximum ascent rate
	DiveSummaryMaxDescentRate                         = 24  // [ DiveSummary ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s]; Maximum descent rate
	DiveSummaryHangTime                               = 25  // [ DiveSummary ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Time spent neither ascending nor descending
	EventTimestamp                                    = 253 // [ Event ] [Type: DateTime, Base: uint32, Units: s];
	EventEvent                                        = 0   // [ Event ] [Type: Event, Base: enum];
	EventEventType                                    = 1   // [ Event ] [Type: EventType, Base: enum];
	EventData16                                       = 2   // [ Event ] [Type: Uint16, Base: uint16];
	EventData                                         = 3   // [ Event ] [Type: Uint32, Base: uint32];
	EventEventGroup                                   = 4   // [ Event ] [Type: Uint8, Base: uint8];
	EventScore                                        = 7   // [ Event ] [Type: Uint16, Base: uint16]; Do not populate directly. Autogenerated by decoder for sport_point subfield components
	EventOpponentScore                                = 8   // [ Event ] [Type: Uint16, Base: uint16]; Do not populate directly. Autogenerated by decoder for sport_point subfield components
	EventFrontGearNum                                 = 9   // [ Event ] [Type: Uint8z, Base: uint8z]; Do not populate directly. Autogenerated by decoder for gear_change subfield components. Front gear number. 1 is innermost.
	EventFrontGear                                    = 10  // [ Event ] [Type: Uint8z, Base: uint8z]; Do not populate directly. Autogenerated by decoder for gear_change subfield components. Number of front teeth.
	EventRearGearNum                                  = 11  // [ Event ] [Type: Uint8z, Base: uint8z]; Do not populate directly. Autogenerated by decoder for gear_change subfield components. Rear gear number. 1 is innermost.
	EventRearGear                                     = 12  // [ Event ] [Type: Uint8z, Base: uint8z]; Do not populate directly. Autogenerated by decoder for gear_change subfield components. Number of rear teeth.
	EventDeviceIndex                                  = 13  // [ Event ] [Type: DeviceIndex, Base: uint8];
	EventActivityType                                 = 14  // [ Event ] [Type: ActivityType, Base: enum]; Activity Type associated with an auto_activity_detect event
	EventStartTimestamp                               = 15  // [ Event ] [Type: DateTime, Base: uint32, Units: s]; Timestamp of when the event started
	EventRadarThreatLevelMax                          = 21  // [ Event ] [Type: RadarThreatLevelType, Base: enum]; Do not populate directly. Autogenerated by decoder for threat_alert subfield components.
	EventRadarThreatCount                             = 22  // [ Event ] [Type: Uint8, Base: uint8]; Do not populate directly. Autogenerated by decoder for threat_alert subfield components.
	EventRadarThreatAvgApproachSpeed                  = 23  // [ Event ] [Type: Uint8, Base: uint8, Scale: 10, Offset: 0, Units: m/s]; Do not populate directly. Autogenerated by decoder for radar_threat_alert subfield components
	EventRadarThreatMaxApproachSpeed                  = 24  // [ Event ] [Type: Uint8, Base: uint8, Scale: 10, Offset: 0, Units: m/s]; Do not populate directly. Autogenerated by decoder for radar_threat_alert subfield components
	ExdDataConceptConfigurationScreenIndex            = 0   // [ ExdDataConceptConfiguration ] [Type: Uint8, Base: uint8];
	ExdDataConceptConfigurationConceptField           = 1   // [ ExdDataConceptConfiguration ] [Type: Byte, Base: byte];
	ExdDataConceptConfigurationFieldId                = 2   // [ ExdDataConceptConfiguration ] [Type: Uint8, Base: uint8];
	ExdDataConceptConfigurationConceptIndex           = 3   // [ ExdDataConceptConfiguration ] [Type: Uint8, Base: uint8];
	ExdDataConceptConfigurationDataPage               = 4   // [ ExdDataConceptConfiguration ] [Type: Uint8, Base: uint8];
	ExdDataConceptConfigurationConceptKey             = 5   // [ ExdDataConceptConfiguration ] [Type: Uint8, Base: uint8];
	ExdDataConceptConfigurationScaling                = 6   // [ ExdDataConceptConfiguration ] [Type: Uint8, Base: uint8];
	ExdDataConceptConfigurationDataUnits              = 8   // [ ExdDataConceptConfiguration ] [Type: ExdDataUnits, Base: enum];
	ExdDataConceptConfigurationQualifier              = 9   // [ ExdDataConceptConfiguration ] [Type: ExdQualifiers, Base: enum];
	ExdDataConceptConfigurationDescriptor             = 10  // [ ExdDataConceptConfiguration ] [Type: ExdDescriptors, Base: enum];
	ExdDataConceptConfigurationIsSigned               = 11  // [ ExdDataConceptConfiguration ] [Type: Bool, Base: bool | enum];
	ExdDataFieldConfigurationScreenIndex              = 0   // [ ExdDataFieldConfiguration ] [Type: Uint8, Base: uint8];
	ExdDataFieldConfigurationConceptField             = 1   // [ ExdDataFieldConfiguration ] [Type: Byte, Base: byte];
	ExdDataFieldConfigurationFieldId                  = 2   // [ ExdDataFieldConfiguration ] [Type: Uint8, Base: uint8];
	ExdDataFieldConfigurationConceptCount             = 3   // [ ExdDataFieldConfiguration ] [Type: Uint8, Base: uint8];
	ExdDataFieldConfigurationDisplayType              = 4   // [ ExdDataFieldConfiguration ] [Type: ExdDisplayType, Base: enum];
	ExdDataFieldConfigurationTitle                    = 5   // [ ExdDataFieldConfiguration ] [Type: String, Base: string, Array: [32]];
	ExdScreenConfigurationScreenIndex                 = 0   // [ ExdScreenConfiguration ] [Type: Uint8, Base: uint8];
	ExdScreenConfigurationFieldCount                  = 1   // [ ExdScreenConfiguration ] [Type: Uint8, Base: uint8]; number of fields in screen
	ExdScreenConfigurationLayout                      = 2   // [ ExdScreenConfiguration ] [Type: ExdLayout, Base: enum];
	ExdScreenConfigurationScreenEnabled               = 3   // [ ExdScreenConfiguration ] [Type: Bool, Base: bool | enum];
	ExerciseTitleMessageIndex                         = 254 // [ ExerciseTitle ] [Type: MessageIndex, Base: uint16];
	ExerciseTitleExerciseCategory                     = 0   // [ ExerciseTitle ] [Type: ExerciseCategory, Base: uint16];
	ExerciseTitleExerciseName                         = 1   // [ ExerciseTitle ] [Type: Uint16, Base: uint16];
	ExerciseTitleWktStepName                          = 2   // [ ExerciseTitle ] [Type: String, Base: string, Array: [N]];
	FieldCapabilitiesMessageIndex                     = 254 // [ FieldCapabilities ] [Type: MessageIndex, Base: uint16];
	FieldCapabilitiesFile                             = 0   // [ FieldCapabilities ] [Type: File, Base: enum];
	FieldCapabilitiesMesgNum                          = 1   // [ FieldCapabilities ] [Type: MesgNum, Base: uint16];
	FieldCapabilitiesFieldNum                         = 2   // [ FieldCapabilities ] [Type: Uint8, Base: uint8];
	FieldCapabilitiesCount                            = 3   // [ FieldCapabilities ] [Type: Uint16, Base: uint16];
	FieldDescriptionDeveloperDataIndex                = 0   // [ FieldDescription ] [Type: Uint8, Base: uint8];
	FieldDescriptionFieldDefinitionNumber             = 1   // [ FieldDescription ] [Type: Uint8, Base: uint8];
	FieldDescriptionFitBaseTypeId                     = 2   // [ FieldDescription ] [Type: FitBaseType, Base: uint8];
	FieldDescriptionFieldName                         = 3   // [ FieldDescription ] [Type: String, Base: string, Array: [N]];
	FieldDescriptionArray                             = 4   // [ FieldDescription ] [Type: Uint8, Base: uint8];
	FieldDescriptionComponents                        = 5   // [ FieldDescription ] [Type: String, Base: string];
	FieldDescriptionScale                             = 6   // [ FieldDescription ] [Type: Uint8, Base: uint8];
	FieldDescriptionOffset                            = 7   // [ FieldDescription ] [Type: Sint8, Base: sint8];
	FieldDescriptionUnits                             = 8   // [ FieldDescription ] [Type: String, Base: string, Array: [N]];
	FieldDescriptionBits                              = 9   // [ FieldDescription ] [Type: String, Base: string];
	FieldDescriptionAccumulate                        = 10  // [ FieldDescription ] [Type: String, Base: string];
	FieldDescriptionFitBaseUnitId                     = 13  // [ FieldDescription ] [Type: FitBaseUnit, Base: uint16];
	FieldDescriptionNativeMesgNum                     = 14  // [ FieldDescription ] [Type: MesgNum, Base: uint16];
	FieldDescriptionNativeFieldNum                    = 15  // [ FieldDescription ] [Type: Uint8, Base: uint8];
	FileCapabilitiesMessageIndex                      = 254 // [ FileCapabilities ] [Type: MessageIndex, Base: uint16];
	FileCapabilitiesType                              = 0   // [ FileCapabilities ] [Type: File, Base: enum];
	FileCapabilitiesFlags                             = 1   // [ FileCapabilities ] [Type: FileFlags, Base: uint8z];
	FileCapabilitiesDirectory                         = 2   // [ FileCapabilities ] [Type: String, Base: string];
	FileCapabilitiesMaxCount                          = 3   // [ FileCapabilities ] [Type: Uint16, Base: uint16];
	FileCapabilitiesMaxSize                           = 4   // [ FileCapabilities ] [Type: Uint32, Base: uint32, Units: bytes];
	FileCreatorSoftwareVersion                        = 0   // [ FileCreator ] [Type: Uint16, Base: uint16];
	FileCreatorHardwareVersion                        = 1   // [ FileCreator ] [Type: Uint8, Base: uint8];
	FileIdType                                        = 0   // [ FileId ] [Type: File, Base: enum];
	FileIdManufacturer                                = 1   // [ FileId ] [Type: Manufacturer, Base: uint16];
	FileIdProduct                                     = 2   // [ FileId ] [Type: Uint16, Base: uint16];
	FileIdSerialNumber                                = 3   // [ FileId ] [Type: Uint32z, Base: uint32z];
	FileIdTimeCreated                                 = 4   // [ FileId ] [Type: DateTime, Base: uint32]; Only set for files that are can be created/erased.
	FileIdNumber                                      = 5   // [ FileId ] [Type: Uint16, Base: uint16]; Only set for files that are not created/erased.
	FileIdProductName                                 = 8   // [ FileId ] [Type: String, Base: string]; Optional free form string to indicate the devices name or model
	GoalMessageIndex                                  = 254 // [ Goal ] [Type: MessageIndex, Base: uint16];
	GoalSport                                         = 0   // [ Goal ] [Type: Sport, Base: enum];
	GoalSubSport                                      = 1   // [ Goal ] [Type: SubSport, Base: enum];
	GoalStartDate                                     = 2   // [ Goal ] [Type: DateTime, Base: uint32];
	GoalEndDate                                       = 3   // [ Goal ] [Type: DateTime, Base: uint32];
	GoalType                                          = 4   // [ Goal ] [Type: Goal, Base: enum];
	GoalValue                                         = 5   // [ Goal ] [Type: Uint32, Base: uint32];
	GoalRepeat                                        = 6   // [ Goal ] [Type: Bool, Base: bool | enum];
	GoalTargetValue                                   = 7   // [ Goal ] [Type: Uint32, Base: uint32];
	GoalRecurrence                                    = 8   // [ Goal ] [Type: GoalRecurrence, Base: enum];
	GoalRecurrenceValue                               = 9   // [ Goal ] [Type: Uint16, Base: uint16];
	GoalEnabled                                       = 10  // [ Goal ] [Type: Bool, Base: bool | enum];
	GoalSource                                        = 11  // [ Goal ] [Type: GoalSource, Base: enum];
	GpsMetadataTimestamp                              = 253 // [ GpsMetadata ] [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp.
	GpsMetadataTimestampMs                            = 0   // [ GpsMetadata ] [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the timestamp.
	GpsMetadataPositionLat                            = 1   // [ GpsMetadata ] [Type: Sint32, Base: sint32, Units: semicircles];
	GpsMetadataPositionLong                           = 2   // [ GpsMetadata ] [Type: Sint32, Base: sint32, Units: semicircles];
	GpsMetadataEnhancedAltitude                       = 3   // [ GpsMetadata ] [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	GpsMetadataEnhancedSpeed                          = 4   // [ GpsMetadata ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	GpsMetadataHeading                                = 5   // [ GpsMetadata ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: degrees];
	GpsMetadataUtcTimestamp                           = 6   // [ GpsMetadata ] [Type: DateTime, Base: uint32, Units: s]; Used to correlate UTC to system time if the timestamp of the message is in system time. This UTC time is derived from the GPS data.
	GpsMetadataVelocity                               = 7   // [ GpsMetadata ] [Type: Sint16, Base: sint16, Array: [3], Scale: 100, Offset: 0, Units: m/s]; velocity[0] is lon velocity. Velocity[1] is lat velocity. Velocity[2] is altitude velocity.
	GyroscopeDataTimestamp                            = 253 // [ GyroscopeData ] [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp
	GyroscopeDataTimestampMs                          = 0   // [ GyroscopeData ] [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the timestamp.
	GyroscopeDataSampleTimeOffset                     = 1   // [ GyroscopeData ] [Type: Uint16, Base: uint16, Array: [N], Units: ms]; Each time in the array describes the time at which the gyro sample with the corresponding index was taken. Limited to 30 samples in each message. The samples may span across seconds. Array size must match the number of samples in gyro_x and gyro_y and gyro_z
	GyroscopeDataGyroX                                = 2   // [ GyroscopeData ] [Type: Uint16, Base: uint16, Array: [N], Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	GyroscopeDataGyroY                                = 3   // [ GyroscopeData ] [Type: Uint16, Base: uint16, Array: [N], Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	GyroscopeDataGyroZ                                = 4   // [ GyroscopeData ] [Type: Uint16, Base: uint16, Array: [N], Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	GyroscopeDataCalibratedGyroX                      = 5   // [ GyroscopeData ] [Type: Float32, Base: float32, Array: [N], Units: deg/s]; Calibrated gyro reading
	GyroscopeDataCalibratedGyroY                      = 6   // [ GyroscopeData ] [Type: Float32, Base: float32, Array: [N], Units: deg/s]; Calibrated gyro reading
	GyroscopeDataCalibratedGyroZ                      = 7   // [ GyroscopeData ] [Type: Float32, Base: float32, Array: [N], Units: deg/s]; Calibrated gyro reading
	HrTimestamp                                       = 253 // [ Hr ] [Type: DateTime, Base: uint32];
	HrFractionalTimestamp                             = 0   // [ Hr ] [Type: Uint16, Base: uint16, Scale: 32768, Offset: 0, Units: s];
	HrTime256                                         = 1   // [ Hr ] [Type: Uint8, Base: uint8, Scale: 256, Offset: 0, Units: s];
	HrFilteredBpm                                     = 6   // [ Hr ] [Type: Uint8, Base: uint8, Array: [N], Units: bpm];
	HrEventTimestamp                                  = 9   // [ Hr ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1024, Offset: 0, Units: s];
	HrEventTimestamp12                                = 10  // [ Hr ] [Type: Byte, Base: byte, Array: [N], Scale: 1024, Offset: 0, Units: s];
	HrZoneMessageIndex                                = 254 // [ HrZone ] [Type: MessageIndex, Base: uint16];
	HrZoneHighBpm                                     = 1   // [ HrZone ] [Type: Uint8, Base: uint8, Units: bpm];
	HrZoneName                                        = 2   // [ HrZone ] [Type: String, Base: string];
	HrmProfileMessageIndex                            = 254 // [ HrmProfile ] [Type: MessageIndex, Base: uint16];
	HrmProfileEnabled                                 = 0   // [ HrmProfile ] [Type: Bool, Base: bool | enum];
	HrmProfileHrmAntId                                = 1   // [ HrmProfile ] [Type: Uint16z, Base: uint16z];
	HrmProfileLogHrv                                  = 2   // [ HrmProfile ] [Type: Bool, Base: bool | enum];
	HrmProfileHrmAntIdTransType                       = 3   // [ HrmProfile ] [Type: Uint8z, Base: uint8z];
	HrvTime                                           = 0   // [ Hrv ] [Type: Uint16, Base: uint16, Array: [N], Scale: 1000, Offset: 0, Units: s]; Time between beats
	HrvStatusSummaryTimestamp                         = 253 // [ HrvStatusSummary ] [Type: DateTime, Base: uint32];
	HrvStatusSummaryWeeklyAverage                     = 0   // [ HrvStatusSummary ] [Type: Uint16, Base: uint16, Scale: 128, Offset: 0, Units: ms]; 7 day RMSSD average over sleep
	HrvStatusSummaryLastNightAverage                  = 1   // [ HrvStatusSummary ] [Type: Uint16, Base: uint16, Scale: 128, Offset: 0, Units: ms]; Last night RMSSD average over sleep
	HrvStatusSummaryLastNight5MinHigh                 = 2   // [ HrvStatusSummary ] [Type: Uint16, Base: uint16, Scale: 128, Offset: 0, Units: ms]; 5 minute high RMSSD value over sleep
	HrvStatusSummaryBaselineLowUpper                  = 3   // [ HrvStatusSummary ] [Type: Uint16, Base: uint16, Scale: 128, Offset: 0, Units: ms]; 3 week baseline, upper boundary of low HRV status
	HrvStatusSummaryBaselineBalancedLower             = 4   // [ HrvStatusSummary ] [Type: Uint16, Base: uint16, Scale: 128, Offset: 0, Units: ms]; 3 week baseline, lower boundary of balanced HRV status
	HrvStatusSummaryBaselineBalancedUpper             = 5   // [ HrvStatusSummary ] [Type: Uint16, Base: uint16, Scale: 128, Offset: 0, Units: ms]; 3 week baseline, upper boundary of balanced HRV status
	HrvStatusSummaryStatus                            = 6   // [ HrvStatusSummary ] [Type: HrvStatus, Base: enum];
	HrvValueTimestamp                                 = 253 // [ HrvValue ] [Type: DateTime, Base: uint32];
	HrvValueValue                                     = 0   // [ HrvValue ] [Type: Uint16, Base: uint16, Scale: 128, Offset: 0, Units: ms]; 5 minute RMSSD
	HsaAccelerometerDataTimestamp                     = 253 // [ HsaAccelerometerData ] [Type: DateTime, Base: uint32, Units: s];
	HsaAccelerometerDataTimestampMs                   = 0   // [ HsaAccelerometerData ] [Type: Uint16, Base: uint16, Units: ms]; Millisecond resolution of the timestamp
	HsaAccelerometerDataSamplingInterval              = 1   // [ HsaAccelerometerData ] [Type: Uint16, Base: uint16, Units: ms]; Sampling Interval in Milliseconds
	HsaAccelerometerDataAccelX                        = 2   // [ HsaAccelerometerData ] [Type: Sint16, Base: sint16, Array: [N], Scale: 1.024, Offset: 0, Units: mG]; X-Axis Measurement
	HsaAccelerometerDataAccelY                        = 3   // [ HsaAccelerometerData ] [Type: Sint16, Base: sint16, Array: [N], Scale: 1.024, Offset: 0, Units: mG]; Y-Axis Measurement
	HsaAccelerometerDataAccelZ                        = 4   // [ HsaAccelerometerData ] [Type: Sint16, Base: sint16, Array: [N], Scale: 1.024, Offset: 0, Units: mG]; Z-Axis Measurement
	HsaAccelerometerDataTimestamp32K                  = 5   // [ HsaAccelerometerData ] [Type: Uint32, Base: uint32]; 32 kHz timestamp
	HsaBodyBatteryDataTimestamp                       = 253 // [ HsaBodyBatteryData ] [Type: DateTime, Base: uint32, Units: s];
	HsaBodyBatteryDataProcessingInterval              = 0   // [ HsaBodyBatteryData ] [Type: Uint16, Base: uint16, Units: s]; Processing interval length in seconds
	HsaBodyBatteryDataLevel                           = 1   // [ HsaBodyBatteryData ] [Type: Sint8, Base: sint8, Array: [N], Units: percent]; Body battery level: [0,100] Blank: -16
	HsaBodyBatteryDataCharged                         = 2   // [ HsaBodyBatteryData ] [Type: Sint16, Base: sint16, Array: [N]]; Body battery charged value
	HsaBodyBatteryDataUncharged                       = 3   // [ HsaBodyBatteryData ] [Type: Sint16, Base: sint16, Array: [N]]; Body battery uncharged value
	HsaConfigurationDataTimestamp                     = 253 // [ HsaConfigurationData ] [Type: DateTime, Base: uint32, Units: s]; Encoded configuration data
	HsaConfigurationDataData                          = 0   // [ HsaConfigurationData ] [Type: Byte, Base: byte, Array: [N]]; Encoded configuration data. Health SDK use only
	HsaConfigurationDataDataSize                      = 1   // [ HsaConfigurationData ] [Type: Uint8, Base: uint8]; Size in bytes of data field
	HsaEventTimestamp                                 = 253 // [ HsaEvent ] [Type: DateTime, Base: uint32, Units: s];
	HsaEventEventId                                   = 0   // [ HsaEvent ] [Type: Uint8, Base: uint8]; Event ID. Health SDK use only
	HsaGyroscopeDataTimestamp                         = 253 // [ HsaGyroscopeData ] [Type: DateTime, Base: uint32, Units: s];
	HsaGyroscopeDataTimestampMs                       = 0   // [ HsaGyroscopeData ] [Type: Uint16, Base: uint16, Units: ms]; Millisecond resolution of the timestamp
	HsaGyroscopeDataSamplingInterval                  = 1   // [ HsaGyroscopeData ] [Type: Uint16, Base: uint16, Units: 1/32768 s]; Sampling Interval in 32 kHz timescale
	HsaGyroscopeDataGyroX                             = 2   // [ HsaGyroscopeData ] [Type: Sint16, Base: sint16, Array: [N], Scale: 28.57143, Offset: 0, Units: deg/s]; X-Axis Measurement
	HsaGyroscopeDataGyroY                             = 3   // [ HsaGyroscopeData ] [Type: Sint16, Base: sint16, Array: [N], Scale: 28.57143, Offset: 0, Units: deg/s]; Y-Axis Measurement
	HsaGyroscopeDataGyroZ                             = 4   // [ HsaGyroscopeData ] [Type: Sint16, Base: sint16, Array: [N], Scale: 28.57143, Offset: 0, Units: deg/s]; Z-Axis Measurement
	HsaGyroscopeDataTimestamp32K                      = 5   // [ HsaGyroscopeData ] [Type: Uint32, Base: uint32, Units: 1/32768 s]; 32 kHz timestamp
	HsaHeartRateDataTimestamp                         = 253 // [ HsaHeartRateData ] [Type: DateTime, Base: uint32, Units: s];
	HsaHeartRateDataProcessingInterval                = 0   // [ HsaHeartRateData ] [Type: Uint16, Base: uint16, Units: s]; Processing interval length in seconds
	HsaHeartRateDataStatus                            = 1   // [ HsaHeartRateData ] [Type: Uint8, Base: uint8]; Status of measurements in buffer - 0 indicates SEARCHING 1 indicates LOCKED
	HsaHeartRateDataHeartRate                         = 2   // [ HsaHeartRateData ] [Type: Uint8, Base: uint8, Array: [N], Units: bpm]; Beats / min. Blank: 0
	HsaRespirationDataTimestamp                       = 253 // [ HsaRespirationData ] [Type: DateTime, Base: uint32, Units: s];
	HsaRespirationDataProcessingInterval              = 0   // [ HsaRespirationData ] [Type: Uint16, Base: uint16, Units: s]; Processing interval length in seconds
	HsaRespirationDataRespirationRate                 = 1   // [ HsaRespirationData ] [Type: Sint16, Base: sint16, Array: [N], Scale: 100, Offset: 0, Units: breaths/min]; Breaths / min: [1,100] Invalid: 255 Excess motion: 254 Off wrist: 253 Not available: 252 Blank: 2.4
	HsaSpo2DataTimestamp                              = 253 // [ HsaSpo2Data ] [Type: DateTime, Base: uint32, Units: s];
	HsaSpo2DataProcessingInterval                     = 0   // [ HsaSpo2Data ] [Type: Uint16, Base: uint16, Units: s]; Processing interval length in seconds
	HsaSpo2DataReadingSpo2                            = 1   // [ HsaSpo2Data ] [Type: Uint8, Base: uint8, Array: [N], Units: percent]; SpO2 Reading: [70,100] Blank: 240
	HsaSpo2DataConfidence                             = 2   // [ HsaSpo2Data ] [Type: Uint8, Base: uint8, Array: [N]]; SpO2 Confidence: [0,254]
	HsaStepDataTimestamp                              = 253 // [ HsaStepData ] [Type: DateTime, Base: uint32, Units: s];
	HsaStepDataProcessingInterval                     = 0   // [ HsaStepData ] [Type: Uint16, Base: uint16, Units: s]; Processing interval length in seconds. File start: 0xFFFFFFEF File stop: 0xFFFFFFEE
	HsaStepDataSteps                                  = 1   // [ HsaStepData ] [Type: Uint32, Base: uint32, Array: [N], Units: steps]; Total step sum
	HsaStressDataTimestamp                            = 253 // [ HsaStressData ] [Type: DateTime, Base: uint32];
	HsaStressDataProcessingInterval                   = 0   // [ HsaStressData ] [Type: Uint16, Base: uint16, Units: s]; Processing interval length in seconds
	HsaStressDataStressLevel                          = 1   // [ HsaStressData ] [Type: Sint8, Base: sint8, Array: [N], Units: s]; Stress Level: [0,100] Off wrist: -1 Excess motion: -2 Not enough data: -3 Recovering from exercise: -4 Unidentified: -5 Blank: -16
	HsaWristTemperatureDataTimestamp                  = 253 // [ HsaWristTemperatureData ] [Type: DateTime, Base: uint32, Units: s];
	HsaWristTemperatureDataProcessingInterval         = 0   // [ HsaWristTemperatureData ] [Type: Uint16, Base: uint16, Units: s]; Processing interval length in seconds
	HsaWristTemperatureDataValue                      = 1   // [ HsaWristTemperatureData ] [Type: Uint16, Base: uint16, Array: [N], Scale: 1000, Offset: 0, Units: degC]; Wrist temperature reading
	JumpTimestamp                                     = 253 // [ Jump ] [Type: DateTime, Base: uint32, Units: s];
	JumpDistance                                      = 0   // [ Jump ] [Type: Float32, Base: float32, Units: m];
	JumpHeight                                        = 1   // [ Jump ] [Type: Float32, Base: float32, Units: m];
	JumpRotations                                     = 2   // [ Jump ] [Type: Uint8, Base: uint8];
	JumpHangTime                                      = 3   // [ Jump ] [Type: Float32, Base: float32, Units: s];
	JumpScore                                         = 4   // [ Jump ] [Type: Float32, Base: float32]; A score for a jump calculated based on hang time, rotations, and distance.
	JumpPositionLat                                   = 5   // [ Jump ] [Type: Sint32, Base: sint32, Units: semicircles];
	JumpPositionLong                                  = 6   // [ Jump ] [Type: Sint32, Base: sint32, Units: semicircles];
	JumpSpeed                                         = 7   // [ Jump ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	JumpEnhancedSpeed                                 = 8   // [ Jump ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	LapMessageIndex                                   = 254 // [ Lap ] [Type: MessageIndex, Base: uint16];
	LapTimestamp                                      = 253 // [ Lap ] [Type: DateTime, Base: uint32, Units: s]; Lap end time.
	LapEvent                                          = 0   // [ Lap ] [Type: Event, Base: enum];
	LapEventType                                      = 1   // [ Lap ] [Type: EventType, Base: enum];
	LapStartTime                                      = 2   // [ Lap ] [Type: DateTime, Base: uint32];
	LapStartPositionLat                               = 3   // [ Lap ] [Type: Sint32, Base: sint32, Units: semicircles];
	LapStartPositionLong                              = 4   // [ Lap ] [Type: Sint32, Base: sint32, Units: semicircles];
	LapEndPositionLat                                 = 5   // [ Lap ] [Type: Sint32, Base: sint32, Units: semicircles];
	LapEndPositionLong                                = 6   // [ Lap ] [Type: Sint32, Base: sint32, Units: semicircles];
	LapTotalElapsedTime                               = 7   // [ Lap ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Time (includes pauses)
	LapTotalTimerTime                                 = 8   // [ Lap ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Timer Time (excludes pauses)
	LapTotalDistance                                  = 9   // [ Lap ] [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	LapTotalCycles                                    = 10  // [ Lap ] [Type: Uint32, Base: uint32, Units: cycles];
	LapTotalCalories                                  = 11  // [ Lap ] [Type: Uint16, Base: uint16, Units: kcal];
	LapTotalFatCalories                               = 12  // [ Lap ] [Type: Uint16, Base: uint16, Units: kcal]; If New Leaf
	LapAvgSpeed                                       = 13  // [ Lap ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	LapMaxSpeed                                       = 14  // [ Lap ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	LapAvgHeartRate                                   = 15  // [ Lap ] [Type: Uint8, Base: uint8, Units: bpm];
	LapMaxHeartRate                                   = 16  // [ Lap ] [Type: Uint8, Base: uint8, Units: bpm];
	LapAvgCadence                                     = 17  // [ Lap ] [Type: Uint8, Base: uint8, Units: rpm]; total_cycles / total_timer_time if non_zero_avg_cadence otherwise total_cycles / total_elapsed_time
	LapMaxCadence                                     = 18  // [ Lap ] [Type: Uint8, Base: uint8, Units: rpm];
	LapAvgPower                                       = 19  // [ Lap ] [Type: Uint16, Base: uint16, Units: watts]; total_power / total_timer_time if non_zero_avg_power otherwise total_power / total_elapsed_time
	LapMaxPower                                       = 20  // [ Lap ] [Type: Uint16, Base: uint16, Units: watts];
	LapTotalAscent                                    = 21  // [ Lap ] [Type: Uint16, Base: uint16, Units: m];
	LapTotalDescent                                   = 22  // [ Lap ] [Type: Uint16, Base: uint16, Units: m];
	LapIntensity                                      = 23  // [ Lap ] [Type: Intensity, Base: enum];
	LapLapTrigger                                     = 24  // [ Lap ] [Type: LapTrigger, Base: enum];
	LapSport                                          = 25  // [ Lap ] [Type: Sport, Base: enum];
	LapEventGroup                                     = 26  // [ Lap ] [Type: Uint8, Base: uint8];
	LapNumLengths                                     = 32  // [ Lap ] [Type: Uint16, Base: uint16, Units: lengths]; # of lengths of swim pool
	LapNormalizedPower                                = 33  // [ Lap ] [Type: Uint16, Base: uint16, Units: watts];
	LapLeftRightBalance                               = 34  // [ Lap ] [Type: LeftRightBalance100, Base: uint16];
	LapFirstLengthIndex                               = 35  // [ Lap ] [Type: Uint16, Base: uint16];
	LapAvgStrokeDistance                              = 37  // [ Lap ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m];
	LapSwimStroke                                     = 38  // [ Lap ] [Type: SwimStroke, Base: enum];
	LapSubSport                                       = 39  // [ Lap ] [Type: SubSport, Base: enum];
	LapNumActiveLengths                               = 40  // [ Lap ] [Type: Uint16, Base: uint16, Units: lengths]; # of active lengths of swim pool
	LapTotalWork                                      = 41  // [ Lap ] [Type: Uint32, Base: uint32, Units: J];
	LapAvgAltitude                                    = 42  // [ Lap ] [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	LapMaxAltitude                                    = 43  // [ Lap ] [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	LapGpsAccuracy                                    = 44  // [ Lap ] [Type: Uint8, Base: uint8, Units: m];
	LapAvgGrade                                       = 45  // [ Lap ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	LapAvgPosGrade                                    = 46  // [ Lap ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	LapAvgNegGrade                                    = 47  // [ Lap ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	LapMaxPosGrade                                    = 48  // [ Lap ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	LapMaxNegGrade                                    = 49  // [ Lap ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	LapAvgTemperature                                 = 50  // [ Lap ] [Type: Sint8, Base: sint8, Units: C];
	LapMaxTemperature                                 = 51  // [ Lap ] [Type: Sint8, Base: sint8, Units: C];
	LapTotalMovingTime                                = 52  // [ Lap ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	LapAvgPosVerticalSpeed                            = 53  // [ Lap ] [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	LapAvgNegVerticalSpeed                            = 54  // [ Lap ] [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	LapMaxPosVerticalSpeed                            = 55  // [ Lap ] [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	LapMaxNegVerticalSpeed                            = 56  // [ Lap ] [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	LapTimeInHrZone                                   = 57  // [ Lap ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	LapTimeInSpeedZone                                = 58  // [ Lap ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	LapTimeInCadenceZone                              = 59  // [ Lap ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	LapTimeInPowerZone                                = 60  // [ Lap ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	LapRepetitionNum                                  = 61  // [ Lap ] [Type: Uint16, Base: uint16];
	LapMinAltitude                                    = 62  // [ Lap ] [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	LapMinHeartRate                                   = 63  // [ Lap ] [Type: Uint8, Base: uint8, Units: bpm];
	LapWktStepIndex                                   = 71  // [ Lap ] [Type: MessageIndex, Base: uint16];
	LapOpponentScore                                  = 74  // [ Lap ] [Type: Uint16, Base: uint16];
	LapStrokeCount                                    = 75  // [ Lap ] [Type: Uint16, Base: uint16, Array: [N], Units: counts]; stroke_type enum used as the index
	LapZoneCount                                      = 76  // [ Lap ] [Type: Uint16, Base: uint16, Array: [N], Units: counts]; zone number used as the index
	LapAvgVerticalOscillation                         = 77  // [ Lap ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: mm];
	LapAvgStanceTimePercent                           = 78  // [ Lap ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	LapAvgStanceTime                                  = 79  // [ Lap ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: ms];
	LapAvgFractionalCadence                           = 80  // [ Lap ] [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: rpm]; fractional part of the avg_cadence
	LapMaxFractionalCadence                           = 81  // [ Lap ] [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: rpm]; fractional part of the max_cadence
	LapTotalFractionalCycles                          = 82  // [ Lap ] [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: cycles]; fractional part of the total_cycles
	LapPlayerScore                                    = 83  // [ Lap ] [Type: Uint16, Base: uint16];
	LapAvgTotalHemoglobinConc                         = 84  // [ Lap ] [Type: Uint16, Base: uint16, Array: [N], Scale: 100, Offset: 0, Units: g/dL]; Avg saturated and unsaturated hemoglobin
	LapMinTotalHemoglobinConc                         = 85  // [ Lap ] [Type: Uint16, Base: uint16, Array: [N], Scale: 100, Offset: 0, Units: g/dL]; Min saturated and unsaturated hemoglobin
	LapMaxTotalHemoglobinConc                         = 86  // [ Lap ] [Type: Uint16, Base: uint16, Array: [N], Scale: 100, Offset: 0, Units: g/dL]; Max saturated and unsaturated hemoglobin
	LapAvgSaturatedHemoglobinPercent                  = 87  // [ Lap ] [Type: Uint16, Base: uint16, Array: [N], Scale: 10, Offset: 0, Units: %]; Avg percentage of hemoglobin saturated with oxygen
	LapMinSaturatedHemoglobinPercent                  = 88  // [ Lap ] [Type: Uint16, Base: uint16, Array: [N], Scale: 10, Offset: 0, Units: %]; Min percentage of hemoglobin saturated with oxygen
	LapMaxSaturatedHemoglobinPercent                  = 89  // [ Lap ] [Type: Uint16, Base: uint16, Array: [N], Scale: 10, Offset: 0, Units: %]; Max percentage of hemoglobin saturated with oxygen
	LapAvgLeftTorqueEffectiveness                     = 91  // [ Lap ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	LapAvgRightTorqueEffectiveness                    = 92  // [ Lap ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	LapAvgLeftPedalSmoothness                         = 93  // [ Lap ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	LapAvgRightPedalSmoothness                        = 94  // [ Lap ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	LapAvgCombinedPedalSmoothness                     = 95  // [ Lap ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	LapTimeStanding                                   = 98  // [ Lap ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Total time spent in the standing position
	LapStandCount                                     = 99  // [ Lap ] [Type: Uint16, Base: uint16]; Number of transitions to the standing state
	LapAvgLeftPco                                     = 100 // [ Lap ] [Type: Sint8, Base: sint8, Units: mm]; Average left platform center offset
	LapAvgRightPco                                    = 101 // [ Lap ] [Type: Sint8, Base: sint8, Units: mm]; Average right platform center offset
	LapAvgLeftPowerPhase                              = 102 // [ Lap ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Average left power phase angles. Data value indexes defined by power_phase_type.
	LapAvgLeftPowerPhasePeak                          = 103 // [ Lap ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Average left power phase peak angles. Data value indexes defined by power_phase_type.
	LapAvgRightPowerPhase                             = 104 // [ Lap ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Average right power phase angles. Data value indexes defined by power_phase_type.
	LapAvgRightPowerPhasePeak                         = 105 // [ Lap ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Average right power phase peak angles. Data value indexes defined by power_phase_type.
	LapAvgPowerPosition                               = 106 // [ Lap ] [Type: Uint16, Base: uint16, Array: [N], Units: watts]; Average power by position. Data value indexes defined by rider_position_type.
	LapMaxPowerPosition                               = 107 // [ Lap ] [Type: Uint16, Base: uint16, Array: [N], Units: watts]; Maximum power by position. Data value indexes defined by rider_position_type.
	LapAvgCadencePosition                             = 108 // [ Lap ] [Type: Uint8, Base: uint8, Array: [N], Units: rpm]; Average cadence by position. Data value indexes defined by rider_position_type.
	LapMaxCadencePosition                             = 109 // [ Lap ] [Type: Uint8, Base: uint8, Array: [N], Units: rpm]; Maximum cadence by position. Data value indexes defined by rider_position_type.
	LapEnhancedAvgSpeed                               = 110 // [ Lap ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	LapEnhancedMaxSpeed                               = 111 // [ Lap ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	LapEnhancedAvgAltitude                            = 112 // [ Lap ] [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	LapEnhancedMinAltitude                            = 113 // [ Lap ] [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	LapEnhancedMaxAltitude                            = 114 // [ Lap ] [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	LapAvgLevMotorPower                               = 115 // [ Lap ] [Type: Uint16, Base: uint16, Units: watts]; lev average motor power during lap
	LapMaxLevMotorPower                               = 116 // [ Lap ] [Type: Uint16, Base: uint16, Units: watts]; lev maximum motor power during lap
	LapLevBatteryConsumption                          = 117 // [ Lap ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent]; lev battery consumption during lap
	LapAvgVerticalRatio                               = 118 // [ Lap ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	LapAvgStanceTimeBalance                           = 119 // [ Lap ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	LapAvgStepLength                                  = 120 // [ Lap ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: mm];
	LapAvgVam                                         = 121 // [ Lap ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	LapAvgDepth                                       = 122 // [ Lap ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	LapMaxDepth                                       = 123 // [ Lap ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	LapMinTemperature                                 = 124 // [ Lap ] [Type: Sint8, Base: sint8, Units: C];
	LapEnhancedAvgRespirationRate                     = 136 // [ Lap ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: Breaths/min];
	LapEnhancedMaxRespirationRate                     = 137 // [ Lap ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: Breaths/min];
	LapAvgRespirationRate                             = 147 // [ Lap ] [Type: Uint8, Base: uint8];
	LapMaxRespirationRate                             = 148 // [ Lap ] [Type: Uint8, Base: uint8];
	LapTotalGrit                                      = 149 // [ Lap ] [Type: Float32, Base: float32, Units: kGrit]; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	LapTotalFlow                                      = 150 // [ Lap ] [Type: Float32, Base: float32, Units: Flow]; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	LapJumpCount                                      = 151 // [ Lap ] [Type: Uint16, Base: uint16];
	LapAvgGrit                                        = 153 // [ Lap ] [Type: Float32, Base: float32, Units: kGrit]; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	LapAvgFlow                                        = 154 // [ Lap ] [Type: Float32, Base: float32, Units: Flow]; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	LapTotalFractionalAscent                          = 156 // [ Lap ] [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m]; fractional part of total_ascent
	LapTotalFractionalDescent                         = 157 // [ Lap ] [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m]; fractional part of total_descent
	LapAvgCoreTemperature                             = 158 // [ Lap ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: C];
	LapMinCoreTemperature                             = 159 // [ Lap ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: C];
	LapMaxCoreTemperature                             = 160 // [ Lap ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: C];
	LengthMessageIndex                                = 254 // [ Length ] [Type: MessageIndex, Base: uint16];
	LengthTimestamp                                   = 253 // [ Length ] [Type: DateTime, Base: uint32];
	LengthEvent                                       = 0   // [ Length ] [Type: Event, Base: enum];
	LengthEventType                                   = 1   // [ Length ] [Type: EventType, Base: enum];
	LengthStartTime                                   = 2   // [ Length ] [Type: DateTime, Base: uint32];
	LengthTotalElapsedTime                            = 3   // [ Length ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	LengthTotalTimerTime                              = 4   // [ Length ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	LengthTotalStrokes                                = 5   // [ Length ] [Type: Uint16, Base: uint16, Units: strokes];
	LengthAvgSpeed                                    = 6   // [ Length ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	LengthSwimStroke                                  = 7   // [ Length ] [Type: SwimStroke, Base: enum, Units: swim_stroke];
	LengthAvgSwimmingCadence                          = 9   // [ Length ] [Type: Uint8, Base: uint8, Units: strokes/min];
	LengthEventGroup                                  = 10  // [ Length ] [Type: Uint8, Base: uint8];
	LengthTotalCalories                               = 11  // [ Length ] [Type: Uint16, Base: uint16, Units: kcal];
	LengthLengthType                                  = 12  // [ Length ] [Type: LengthType, Base: enum];
	LengthPlayerScore                                 = 18  // [ Length ] [Type: Uint16, Base: uint16];
	LengthOpponentScore                               = 19  // [ Length ] [Type: Uint16, Base: uint16];
	LengthStrokeCount                                 = 20  // [ Length ] [Type: Uint16, Base: uint16, Array: [N], Units: counts]; stroke_type enum used as the index
	LengthZoneCount                                   = 21  // [ Length ] [Type: Uint16, Base: uint16, Array: [N], Units: counts]; zone number used as the index
	LengthEnhancedAvgRespirationRate                  = 22  // [ Length ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: Breaths/min];
	LengthEnhancedMaxRespirationRate                  = 23  // [ Length ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: Breaths/min];
	LengthAvgRespirationRate                          = 24  // [ Length ] [Type: Uint8, Base: uint8];
	LengthMaxRespirationRate                          = 25  // [ Length ] [Type: Uint8, Base: uint8];
	MagnetometerDataTimestamp                         = 253 // [ MagnetometerData ] [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp
	MagnetometerDataTimestampMs                       = 0   // [ MagnetometerData ] [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the timestamp.
	MagnetometerDataSampleTimeOffset                  = 1   // [ MagnetometerData ] [Type: Uint16, Base: uint16, Array: [N], Units: ms]; Each time in the array describes the time at which the compass sample with the corresponding index was taken. Limited to 30 samples in each message. The samples may span across seconds. Array size must match the number of samples in cmps_x and cmps_y and cmps_z
	MagnetometerDataMagX                              = 2   // [ MagnetometerData ] [Type: Uint16, Base: uint16, Array: [N], Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	MagnetometerDataMagY                              = 3   // [ MagnetometerData ] [Type: Uint16, Base: uint16, Array: [N], Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	MagnetometerDataMagZ                              = 4   // [ MagnetometerData ] [Type: Uint16, Base: uint16, Array: [N], Units: counts]; These are the raw ADC reading. Maximum number of samples is 30 in each message. The samples may span across seconds. A conversion will need to be done on this data once read.
	MagnetometerDataCalibratedMagX                    = 5   // [ MagnetometerData ] [Type: Float32, Base: float32, Array: [N], Units: G]; Calibrated Magnetometer reading
	MagnetometerDataCalibratedMagY                    = 6   // [ MagnetometerData ] [Type: Float32, Base: float32, Array: [N], Units: G]; Calibrated Magnetometer reading
	MagnetometerDataCalibratedMagZ                    = 7   // [ MagnetometerData ] [Type: Float32, Base: float32, Array: [N], Units: G]; Calibrated Magnetometer reading
	MaxMetDataUpdateTime                              = 0   // [ MaxMetData ] [Type: DateTime, Base: uint32]; Time maxMET and vo2 were calculated
	MaxMetDataVo2Max                                  = 2   // [ MaxMetData ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: mL/kg/min];
	MaxMetDataSport                                   = 5   // [ MaxMetData ] [Type: Sport, Base: enum];
	MaxMetDataSubSport                                = 6   // [ MaxMetData ] [Type: SubSport, Base: enum];
	MaxMetDataMaxMetCategory                          = 8   // [ MaxMetData ] [Type: MaxMetCategory, Base: enum];
	MaxMetDataCalibratedData                          = 9   // [ MaxMetData ] [Type: Bool, Base: bool | enum]; Indicates if calibrated data was used in the calculation
	MaxMetDataHrSource                                = 12  // [ MaxMetData ] [Type: MaxMetHeartRateSource, Base: enum]; Indicates if the estimate was obtained using a chest strap or wrist heart rate
	MaxMetDataSpeedSource                             = 13  // [ MaxMetData ] [Type: MaxMetSpeedSource, Base: enum]; Indidcates if the estimate was obtained using onboard GPS or connected GPS
	MemoGlobPartIndex                                 = 250 // [ MemoGlob ] [Type: Uint32, Base: uint32]; Sequence number of memo blocks
	MemoGlobMemo                                      = 0   // [ MemoGlob ] [Type: Byte, Base: byte, Array: [N]]; Deprecated. Use data field.
	MemoGlobMesgNum                                   = 1   // [ MemoGlob ] [Type: MesgNum, Base: uint16]; Message Number of the parent message
	MemoGlobParentIndex                               = 2   // [ MemoGlob ] [Type: MessageIndex, Base: uint16]; Index of mesg that this glob is associated with.
	MemoGlobFieldNum                                  = 3   // [ MemoGlob ] [Type: Uint8, Base: uint8]; Field within the parent that this glob is associated with
	MemoGlobData                                      = 4   // [ MemoGlob ] [Type: Uint8z, Base: uint8z, Array: [N]]; Block of utf8 bytes. Note, mutltibyte characters may be split across adjoining memo_glob messages.
	MesgCapabilitiesMessageIndex                      = 254 // [ MesgCapabilities ] [Type: MessageIndex, Base: uint16];
	MesgCapabilitiesFile                              = 0   // [ MesgCapabilities ] [Type: File, Base: enum];
	MesgCapabilitiesMesgNum                           = 1   // [ MesgCapabilities ] [Type: MesgNum, Base: uint16];
	MesgCapabilitiesCountType                         = 2   // [ MesgCapabilities ] [Type: MesgCount, Base: enum];
	MesgCapabilitiesCount                             = 3   // [ MesgCapabilities ] [Type: Uint16, Base: uint16];
	MetZoneMessageIndex                               = 254 // [ MetZone ] [Type: MessageIndex, Base: uint16];
	MetZoneHighBpm                                    = 1   // [ MetZone ] [Type: Uint8, Base: uint8];
	MetZoneCalories                                   = 2   // [ MetZone ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: kcal / min];
	MetZoneFatCalories                                = 3   // [ MetZone ] [Type: Uint8, Base: uint8, Scale: 10, Offset: 0, Units: kcal / min];
	MonitoringTimestamp                               = 253 // [ Monitoring ] [Type: DateTime, Base: uint32, Units: s]; Must align to logging interval, for example, time must be 00:00:00 for daily log.
	MonitoringDeviceIndex                             = 0   // [ Monitoring ] [Type: DeviceIndex, Base: uint8]; Associates this data to device_info message. Not required for file with single device (sensor).
	MonitoringCalories                                = 1   // [ Monitoring ] [Type: Uint16, Base: uint16, Units: kcal]; Accumulated total calories. Maintained by MonitoringReader for each activity_type. See SDK documentation
	MonitoringDistance                                = 2   // [ Monitoring ] [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m]; Accumulated distance. Maintained by MonitoringReader for each activity_type. See SDK documentation.
	MonitoringCycles                                  = 3   // [ Monitoring ] [Type: Uint32, Base: uint32, Scale: 2, Offset: 0, Units: cycles]; Accumulated cycles. Maintained by MonitoringReader for each activity_type. See SDK documentation.
	MonitoringActiveTime                              = 4   // [ Monitoring ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	MonitoringActivityType                            = 5   // [ Monitoring ] [Type: ActivityType, Base: enum];
	MonitoringActivitySubtype                         = 6   // [ Monitoring ] [Type: ActivitySubtype, Base: enum];
	MonitoringActivityLevel                           = 7   // [ Monitoring ] [Type: ActivityLevel, Base: enum];
	MonitoringDistance16                              = 8   // [ Monitoring ] [Type: Uint16, Base: uint16, Units: 100 * m];
	MonitoringCycles16                                = 9   // [ Monitoring ] [Type: Uint16, Base: uint16, Units: 2 * cycles (steps)];
	MonitoringActiveTime16                            = 10  // [ Monitoring ] [Type: Uint16, Base: uint16, Units: s];
	MonitoringLocalTimestamp                          = 11  // [ Monitoring ] [Type: LocalDateTime, Base: uint32]; Must align to logging interval, for example, time must be 00:00:00 for daily log.
	MonitoringTemperature                             = 12  // [ Monitoring ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: C]; Avg temperature during the logging interval ended at timestamp
	MonitoringTemperatureMin                          = 14  // [ Monitoring ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: C]; Min temperature during the logging interval ended at timestamp
	MonitoringTemperatureMax                          = 15  // [ Monitoring ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: C]; Max temperature during the logging interval ended at timestamp
	MonitoringActivityTime                            = 16  // [ Monitoring ] [Type: Uint16, Base: uint16, Array: [8], Units: minutes]; Indexed using minute_activity_level enum
	MonitoringActiveCalories                          = 19  // [ Monitoring ] [Type: Uint16, Base: uint16, Units: kcal];
	MonitoringCurrentActivityTypeIntensity            = 24  // [ Monitoring ] [Type: Byte, Base: byte]; Indicates single type / intensity for duration since last monitoring message.
	MonitoringTimestampMin8                           = 25  // [ Monitoring ] [Type: Uint8, Base: uint8, Units: min];
	MonitoringTimestamp16                             = 26  // [ Monitoring ] [Type: Uint16, Base: uint16, Units: s];
	MonitoringHeartRate                               = 27  // [ Monitoring ] [Type: Uint8, Base: uint8, Units: bpm];
	MonitoringIntensity                               = 28  // [ Monitoring ] [Type: Uint8, Base: uint8, Scale: 10, Offset: 0];
	MonitoringDurationMin                             = 29  // [ Monitoring ] [Type: Uint16, Base: uint16, Units: min];
	MonitoringDuration                                = 30  // [ Monitoring ] [Type: Uint32, Base: uint32, Units: s];
	MonitoringAscent                                  = 31  // [ Monitoring ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m];
	MonitoringDescent                                 = 32  // [ Monitoring ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m];
	MonitoringModerateActivityMinutes                 = 33  // [ Monitoring ] [Type: Uint16, Base: uint16, Units: minutes];
	MonitoringVigorousActivityMinutes                 = 34  // [ Monitoring ] [Type: Uint16, Base: uint16, Units: minutes];
	MonitoringHrDataTimestamp                         = 253 // [ MonitoringHrData ] [Type: DateTime, Base: uint32, Units: s]; Must align to logging interval, for example, time must be 00:00:00 for daily log.
	MonitoringHrDataRestingHeartRate                  = 0   // [ MonitoringHrData ] [Type: Uint8, Base: uint8, Units: bpm]; 7-day rolling average
	MonitoringHrDataCurrentDayRestingHeartRate        = 1   // [ MonitoringHrData ] [Type: Uint8, Base: uint8, Units: bpm]; RHR for today only. (Feeds into 7-day average)
	MonitoringInfoTimestamp                           = 253 // [ MonitoringInfo ] [Type: DateTime, Base: uint32, Units: s];
	MonitoringInfoLocalTimestamp                      = 0   // [ MonitoringInfo ] [Type: LocalDateTime, Base: uint32, Units: s]; Use to convert activity timestamps to local time if device does not support time zone and daylight savings time correction.
	MonitoringInfoActivityType                        = 1   // [ MonitoringInfo ] [Type: ActivityType, Base: enum, Array: [N]];
	MonitoringInfoCyclesToDistance                    = 3   // [ MonitoringInfo ] [Type: Uint16, Base: uint16, Array: [N], Scale: 5000, Offset: 0, Units: m/cycle]; Indexed by activity_type
	MonitoringInfoCyclesToCalories                    = 4   // [ MonitoringInfo ] [Type: Uint16, Base: uint16, Array: [N], Scale: 5000, Offset: 0, Units: kcal/cycle]; Indexed by activity_type
	MonitoringInfoRestingMetabolicRate                = 5   // [ MonitoringInfo ] [Type: Uint16, Base: uint16, Units: kcal / day];
	NmeaSentenceTimestamp                             = 253 // [ NmeaSentence ] [Type: DateTime, Base: uint32, Units: s]; Timestamp message was output
	NmeaSentenceTimestampMs                           = 0   // [ NmeaSentence ] [Type: Uint16, Base: uint16, Units: ms]; Fractional part of timestamp, added to timestamp
	NmeaSentenceSentence                              = 1   // [ NmeaSentence ] [Type: String, Base: string]; NMEA sentence
	ObdiiDataTimestamp                                = 253 // [ ObdiiData ] [Type: DateTime, Base: uint32, Units: s]; Timestamp message was output
	ObdiiDataTimestampMs                              = 0   // [ ObdiiData ] [Type: Uint16, Base: uint16, Units: ms]; Fractional part of timestamp, added to timestamp
	ObdiiDataTimeOffset                               = 1   // [ ObdiiData ] [Type: Uint16, Base: uint16, Array: [N], Units: ms]; Offset of PID reading [i] from start_timestamp+start_timestamp_ms. Readings may span across seconds.
	ObdiiDataPid                                      = 2   // [ ObdiiData ] [Type: Byte, Base: byte]; Parameter ID
	ObdiiDataRawData                                  = 3   // [ ObdiiData ] [Type: Byte, Base: byte, Array: [N]]; Raw parameter data
	ObdiiDataPidDataSize                              = 4   // [ ObdiiData ] [Type: Uint8, Base: uint8, Array: [N]]; Optional, data size of PID[i]. If not specified refer to SAE J1979.
	ObdiiDataSystemTime                               = 5   // [ ObdiiData ] [Type: Uint32, Base: uint32, Array: [N]]; System time associated with sample expressed in ms, can be used instead of time_offset. There will be a system_time value for each raw_data element. For multibyte pids the system_time is repeated.
	ObdiiDataStartTimestamp                           = 6   // [ ObdiiData ] [Type: DateTime, Base: uint32]; Timestamp of first sample recorded in the message. Used with time_offset to generate time of each sample
	ObdiiDataStartTimestampMs                         = 7   // [ ObdiiData ] [Type: Uint16, Base: uint16, Units: ms]; Fractional part of start_timestamp
	OhrSettingsTimestamp                              = 253 // [ OhrSettings ] [Type: DateTime, Base: uint32, Units: s];
	OhrSettingsEnabled                                = 0   // [ OhrSettings ] [Type: Switch, Base: enum];
	OneDSensorCalibrationTimestamp                    = 253 // [ OneDSensorCalibration ] [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp
	OneDSensorCalibrationSensorType                   = 0   // [ OneDSensorCalibration ] [Type: SensorType, Base: enum]; Indicates which sensor the calibration is for
	OneDSensorCalibrationCalibrationFactor            = 1   // [ OneDSensorCalibration ] [Type: Uint32, Base: uint32]; Calibration factor used to convert from raw ADC value to degrees, g, etc.
	OneDSensorCalibrationCalibrationDivisor           = 2   // [ OneDSensorCalibration ] [Type: Uint32, Base: uint32, Units: counts]; Calibration factor divisor
	OneDSensorCalibrationLevelShift                   = 3   // [ OneDSensorCalibration ] [Type: Uint32, Base: uint32]; Level shift value used to shift the ADC value back into range
	OneDSensorCalibrationOffsetCal                    = 4   // [ OneDSensorCalibration ] [Type: Sint32, Base: sint32]; Internal Calibration factor
	PowerZoneMessageIndex                             = 254 // [ PowerZone ] [Type: MessageIndex, Base: uint16];
	PowerZoneHighValue                                = 1   // [ PowerZone ] [Type: Uint16, Base: uint16, Units: watts];
	PowerZoneName                                     = 2   // [ PowerZone ] [Type: String, Base: string];
	RawBbiTimestamp                                   = 253 // [ RawBbi ] [Type: DateTime, Base: uint32];
	RawBbiTimestampMs                                 = 0   // [ RawBbi ] [Type: Uint16, Base: uint16, Units: ms]; Millisecond resolution of the timestamp
	RawBbiData                                        = 1   // [ RawBbi ] [Type: Uint16, Base: uint16, Array: [N]]; 1 bit for gap indicator, 1 bit for quality indicator, and 14 bits for Beat-to-Beat interval values in whole-integer millisecond resolution
	RawBbiTime                                        = 2   // [ RawBbi ] [Type: Uint16, Base: uint16, Array: [N], Units: ms]; Array of millisecond times between beats
	RawBbiQuality                                     = 3   // [ RawBbi ] [Type: Uint8, Base: uint8, Array: [N]]; 1 = high confidence. 0 = low confidence. N/A when gap = 1
	RawBbiGap                                         = 4   // [ RawBbi ] [Type: Uint8, Base: uint8, Array: [N]]; 1 = gap (time represents ms gap length). 0 = BBI data
	RecordTimestamp                                   = 253 // [ Record ] [Type: DateTime, Base: uint32, Units: s];
	RecordPositionLat                                 = 0   // [ Record ] [Type: Sint32, Base: sint32, Units: semicircles];
	RecordPositionLong                                = 1   // [ Record ] [Type: Sint32, Base: sint32, Units: semicircles];
	RecordAltitude                                    = 2   // [ Record ] [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	RecordHeartRate                                   = 3   // [ Record ] [Type: Uint8, Base: uint8, Units: bpm];
	RecordCadence                                     = 4   // [ Record ] [Type: Uint8, Base: uint8, Units: rpm];
	RecordDistance                                    = 5   // [ Record ] [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	RecordSpeed                                       = 6   // [ Record ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	RecordPower                                       = 7   // [ Record ] [Type: Uint16, Base: uint16, Units: watts];
	RecordCompressedSpeedDistance                     = 8   // [ Record ] [Type: Byte, Base: byte, Array: [3], Scale: 100, Offset: 0, Units: m/s,m];
	RecordGrade                                       = 9   // [ Record ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	RecordResistance                                  = 10  // [ Record ] [Type: Uint8, Base: uint8]; Relative. 0 is none 254 is Max.
	RecordTimeFromCourse                              = 11  // [ Record ] [Type: Sint32, Base: sint32, Scale: 1000, Offset: 0, Units: s];
	RecordCycleLength                                 = 12  // [ Record ] [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m];
	RecordTemperature                                 = 13  // [ Record ] [Type: Sint8, Base: sint8, Units: C];
	RecordSpeed1S                                     = 17  // [ Record ] [Type: Uint8, Base: uint8, Array: [N], Scale: 16, Offset: 0, Units: m/s]; Speed at 1s intervals. Timestamp field indicates time of last array element.
	RecordCycles                                      = 18  // [ Record ] [Type: Uint8, Base: uint8, Units: cycles];
	RecordTotalCycles                                 = 19  // [ Record ] [Type: Uint32, Base: uint32, Units: cycles];
	RecordCompressedAccumulatedPower                  = 28  // [ Record ] [Type: Uint16, Base: uint16, Units: watts];
	RecordAccumulatedPower                            = 29  // [ Record ] [Type: Uint32, Base: uint32, Units: watts];
	RecordLeftRightBalance                            = 30  // [ Record ] [Type: LeftRightBalance, Base: uint8];
	RecordGpsAccuracy                                 = 31  // [ Record ] [Type: Uint8, Base: uint8, Units: m];
	RecordVerticalSpeed                               = 32  // [ Record ] [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	RecordCalories                                    = 33  // [ Record ] [Type: Uint16, Base: uint16, Units: kcal];
	RecordVerticalOscillation                         = 39  // [ Record ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: mm];
	RecordStanceTimePercent                           = 40  // [ Record ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	RecordStanceTime                                  = 41  // [ Record ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: ms];
	RecordActivityType                                = 42  // [ Record ] [Type: ActivityType, Base: enum];
	RecordLeftTorqueEffectiveness                     = 43  // [ Record ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	RecordRightTorqueEffectiveness                    = 44  // [ Record ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	RecordLeftPedalSmoothness                         = 45  // [ Record ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	RecordRightPedalSmoothness                        = 46  // [ Record ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	RecordCombinedPedalSmoothness                     = 47  // [ Record ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	RecordTime128                                     = 48  // [ Record ] [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: s];
	RecordStrokeType                                  = 49  // [ Record ] [Type: StrokeType, Base: enum];
	RecordZone                                        = 50  // [ Record ] [Type: Uint8, Base: uint8];
	RecordBallSpeed                                   = 51  // [ Record ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m/s];
	RecordCadence256                                  = 52  // [ Record ] [Type: Uint16, Base: uint16, Scale: 256, Offset: 0, Units: rpm]; Log cadence and fractional cadence for backwards compatibility
	RecordFractionalCadence                           = 53  // [ Record ] [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: rpm];
	RecordTotalHemoglobinConc                         = 54  // [ Record ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: g/dL]; Total saturated and unsaturated hemoglobin
	RecordTotalHemoglobinConcMin                      = 55  // [ Record ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: g/dL]; Min saturated and unsaturated hemoglobin
	RecordTotalHemoglobinConcMax                      = 56  // [ Record ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: g/dL]; Max saturated and unsaturated hemoglobin
	RecordSaturatedHemoglobinPercent                  = 57  // [ Record ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %]; Percentage of hemoglobin saturated with oxygen
	RecordSaturatedHemoglobinPercentMin               = 58  // [ Record ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %]; Min percentage of hemoglobin saturated with oxygen
	RecordSaturatedHemoglobinPercentMax               = 59  // [ Record ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %]; Max percentage of hemoglobin saturated with oxygen
	RecordDeviceIndex                                 = 62  // [ Record ] [Type: DeviceIndex, Base: uint8];
	RecordLeftPco                                     = 67  // [ Record ] [Type: Sint8, Base: sint8, Units: mm]; Left platform center offset
	RecordRightPco                                    = 68  // [ Record ] [Type: Sint8, Base: sint8, Units: mm]; Right platform center offset
	RecordLeftPowerPhase                              = 69  // [ Record ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Left power phase angles. Data value indexes defined by power_phase_type.
	RecordLeftPowerPhasePeak                          = 70  // [ Record ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Left power phase peak angles. Data value indexes defined by power_phase_type.
	RecordRightPowerPhase                             = 71  // [ Record ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Right power phase angles. Data value indexes defined by power_phase_type.
	RecordRightPowerPhasePeak                         = 72  // [ Record ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Right power phase peak angles. Data value indexes defined by power_phase_type.
	RecordEnhancedSpeed                               = 73  // [ Record ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	RecordEnhancedAltitude                            = 78  // [ Record ] [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	RecordBatterySoc                                  = 81  // [ Record ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent]; lev battery state of charge
	RecordMotorPower                                  = 82  // [ Record ] [Type: Uint16, Base: uint16, Units: watts]; lev motor power
	RecordVerticalRatio                               = 83  // [ Record ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	RecordStanceTimeBalance                           = 84  // [ Record ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	RecordStepLength                                  = 85  // [ Record ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: mm];
	RecordCycleLength16                               = 87  // [ Record ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m]; Supports larger cycle sizes needed for paddlesports. Max cycle size: 655.35
	RecordAbsolutePressure                            = 91  // [ Record ] [Type: Uint32, Base: uint32, Units: Pa]; Includes atmospheric pressure
	RecordDepth                                       = 92  // [ Record ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	RecordNextStopDepth                               = 93  // [ Record ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	RecordNextStopTime                                = 94  // [ Record ] [Type: Uint32, Base: uint32, Units: s];
	RecordTimeToSurface                               = 95  // [ Record ] [Type: Uint32, Base: uint32, Units: s];
	RecordNdlTime                                     = 96  // [ Record ] [Type: Uint32, Base: uint32, Units: s];
	RecordCnsLoad                                     = 97  // [ Record ] [Type: Uint8, Base: uint8, Units: percent];
	RecordN2Load                                      = 98  // [ Record ] [Type: Uint16, Base: uint16, Units: percent];
	RecordRespirationRate                             = 99  // [ Record ] [Type: Uint8, Base: uint8, Units: s];
	RecordEnhancedRespirationRate                     = 108 // [ Record ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: Breaths/min];
	RecordGrit                                        = 114 // [ Record ] [Type: Float32, Base: float32]; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	RecordFlow                                        = 115 // [ Record ] [Type: Float32, Base: float32]; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	RecordCurrentStress                               = 116 // [ Record ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0]; Current Stress value
	RecordEbikeTravelRange                            = 117 // [ Record ] [Type: Uint16, Base: uint16, Units: km];
	RecordEbikeBatteryLevel                           = 118 // [ Record ] [Type: Uint8, Base: uint8, Units: percent];
	RecordEbikeAssistMode                             = 119 // [ Record ] [Type: Uint8, Base: uint8, Units: depends on sensor];
	RecordEbikeAssistLevelPercent                     = 120 // [ Record ] [Type: Uint8, Base: uint8, Units: percent];
	RecordAirTimeRemaining                            = 123 // [ Record ] [Type: Uint32, Base: uint32, Units: s];
	RecordPressureSac                                 = 124 // [ Record ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: bar/min]; Pressure-based surface air consumption
	RecordVolumeSac                                   = 125 // [ Record ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: L/min]; Volumetric surface air consumption
	RecordRmv                                         = 126 // [ Record ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: L/min]; Respiratory minute volume
	RecordAscentRate                                  = 127 // [ Record ] [Type: Sint32, Base: sint32, Scale: 1000, Offset: 0, Units: m/s];
	RecordPo2                                         = 129 // [ Record ] [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: percent]; Current partial pressure of oxygen
	RecordCoreTemperature                             = 139 // [ Record ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: C];
	RespirationRateTimestamp                          = 253 // [ RespirationRate ] [Type: DateTime, Base: uint32];
	RespirationRateRespirationRate                    = 0   // [ RespirationRate ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: breaths/min]; Breaths * 100 /min, -300 indicates invalid, -200 indicates large motion, -100 indicates off wrist
	ScheduleManufacturer                              = 0   // [ Schedule ] [Type: Manufacturer, Base: uint16]; Corresponds to file_id of scheduled workout / course.
	ScheduleProduct                                   = 1   // [ Schedule ] [Type: Uint16, Base: uint16]; Corresponds to file_id of scheduled workout / course.
	ScheduleSerialNumber                              = 2   // [ Schedule ] [Type: Uint32z, Base: uint32z]; Corresponds to file_id of scheduled workout / course.
	ScheduleTimeCreated                               = 3   // [ Schedule ] [Type: DateTime, Base: uint32]; Corresponds to file_id of scheduled workout / course.
	ScheduleCompleted                                 = 4   // [ Schedule ] [Type: Bool, Base: bool | enum]; TRUE if this activity has been started
	ScheduleType                                      = 5   // [ Schedule ] [Type: Schedule, Base: enum];
	ScheduleScheduledTime                             = 6   // [ Schedule ] [Type: LocalDateTime, Base: uint32];
	SdmProfileMessageIndex                            = 254 // [ SdmProfile ] [Type: MessageIndex, Base: uint16];
	SdmProfileEnabled                                 = 0   // [ SdmProfile ] [Type: Bool, Base: bool | enum];
	SdmProfileSdmAntId                                = 1   // [ SdmProfile ] [Type: Uint16z, Base: uint16z];
	SdmProfileSdmCalFactor                            = 2   // [ SdmProfile ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: %];
	SdmProfileOdometer                                = 3   // [ SdmProfile ] [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	SdmProfileSpeedSource                             = 4   // [ SdmProfile ] [Type: Bool, Base: bool | enum]; Use footpod for speed source instead of GPS
	SdmProfileSdmAntIdTransType                       = 5   // [ SdmProfile ] [Type: Uint8z, Base: uint8z];
	SdmProfileOdometerRollover                        = 7   // [ SdmProfile ] [Type: Uint8, Base: uint8]; Rollover counter that can be used to extend the odometer
	SegmentFileMessageIndex                           = 254 // [ SegmentFile ] [Type: MessageIndex, Base: uint16];
	SegmentFileFileUuid                               = 1   // [ SegmentFile ] [Type: String, Base: string]; UUID of the segment file
	SegmentFileEnabled                                = 3   // [ SegmentFile ] [Type: Bool, Base: bool | enum]; Enabled state of the segment file
	SegmentFileUserProfilePrimaryKey                  = 4   // [ SegmentFile ] [Type: Uint32, Base: uint32]; Primary key of the user that created the segment file
	SegmentFileLeaderType                             = 7   // [ SegmentFile ] [Type: SegmentLeaderboardType, Base: enum, Array: [N]]; Leader type of each leader in the segment file
	SegmentFileLeaderGroupPrimaryKey                  = 8   // [ SegmentFile ] [Type: Uint32, Base: uint32, Array: [N]]; Group primary key of each leader in the segment file
	SegmentFileLeaderActivityId                       = 9   // [ SegmentFile ] [Type: Uint32, Base: uint32, Array: [N]]; Activity ID of each leader in the segment file
	SegmentFileLeaderActivityIdString                 = 10  // [ SegmentFile ] [Type: String, Base: string, Array: [N]]; String version of the activity ID of each leader in the segment file. 21 characters long for each ID, express in decimal
	SegmentFileDefaultRaceLeader                      = 11  // [ SegmentFile ] [Type: Uint8, Base: uint8]; Index for the Leader Board entry selected as the default race participant
	SegmentIdName                                     = 0   // [ SegmentId ] [Type: String, Base: string]; Friendly name assigned to segment
	SegmentIdUuid                                     = 1   // [ SegmentId ] [Type: String, Base: string]; UUID of the segment
	SegmentIdSport                                    = 2   // [ SegmentId ] [Type: Sport, Base: enum]; Sport associated with the segment
	SegmentIdEnabled                                  = 3   // [ SegmentId ] [Type: Bool, Base: bool | enum]; Segment enabled for evaluation
	SegmentIdUserProfilePrimaryKey                    = 4   // [ SegmentId ] [Type: Uint32, Base: uint32]; Primary key of the user that created the segment
	SegmentIdDeviceId                                 = 5   // [ SegmentId ] [Type: Uint32, Base: uint32]; ID of the device that created the segment
	SegmentIdDefaultRaceLeader                        = 6   // [ SegmentId ] [Type: Uint8, Base: uint8]; Index for the Leader Board entry selected as the default race participant
	SegmentIdDeleteStatus                             = 7   // [ SegmentId ] [Type: SegmentDeleteStatus, Base: enum]; Indicates if any segments should be deleted
	SegmentIdSelectionType                            = 8   // [ SegmentId ] [Type: SegmentSelectionType, Base: enum]; Indicates how the segment was selected to be sent to the device
	SegmentLapMessageIndex                            = 254 // [ SegmentLap ] [Type: MessageIndex, Base: uint16];
	SegmentLapTimestamp                               = 253 // [ SegmentLap ] [Type: DateTime, Base: uint32, Units: s]; Lap end time.
	SegmentLapEvent                                   = 0   // [ SegmentLap ] [Type: Event, Base: enum];
	SegmentLapEventType                               = 1   // [ SegmentLap ] [Type: EventType, Base: enum];
	SegmentLapStartTime                               = 2   // [ SegmentLap ] [Type: DateTime, Base: uint32];
	SegmentLapStartPositionLat                        = 3   // [ SegmentLap ] [Type: Sint32, Base: sint32, Units: semicircles];
	SegmentLapStartPositionLong                       = 4   // [ SegmentLap ] [Type: Sint32, Base: sint32, Units: semicircles];
	SegmentLapEndPositionLat                          = 5   // [ SegmentLap ] [Type: Sint32, Base: sint32, Units: semicircles];
	SegmentLapEndPositionLong                         = 6   // [ SegmentLap ] [Type: Sint32, Base: sint32, Units: semicircles];
	SegmentLapTotalElapsedTime                        = 7   // [ SegmentLap ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Time (includes pauses)
	SegmentLapTotalTimerTime                          = 8   // [ SegmentLap ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Timer Time (excludes pauses)
	SegmentLapTotalDistance                           = 9   // [ SegmentLap ] [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	SegmentLapTotalCycles                             = 10  // [ SegmentLap ] [Type: Uint32, Base: uint32, Units: cycles];
	SegmentLapTotalCalories                           = 11  // [ SegmentLap ] [Type: Uint16, Base: uint16, Units: kcal];
	SegmentLapTotalFatCalories                        = 12  // [ SegmentLap ] [Type: Uint16, Base: uint16, Units: kcal]; If New Leaf
	SegmentLapAvgSpeed                                = 13  // [ SegmentLap ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	SegmentLapMaxSpeed                                = 14  // [ SegmentLap ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	SegmentLapAvgHeartRate                            = 15  // [ SegmentLap ] [Type: Uint8, Base: uint8, Units: bpm];
	SegmentLapMaxHeartRate                            = 16  // [ SegmentLap ] [Type: Uint8, Base: uint8, Units: bpm];
	SegmentLapAvgCadence                              = 17  // [ SegmentLap ] [Type: Uint8, Base: uint8, Units: rpm]; total_cycles / total_timer_time if non_zero_avg_cadence otherwise total_cycles / total_elapsed_time
	SegmentLapMaxCadence                              = 18  // [ SegmentLap ] [Type: Uint8, Base: uint8, Units: rpm];
	SegmentLapAvgPower                                = 19  // [ SegmentLap ] [Type: Uint16, Base: uint16, Units: watts]; total_power / total_timer_time if non_zero_avg_power otherwise total_power / total_elapsed_time
	SegmentLapMaxPower                                = 20  // [ SegmentLap ] [Type: Uint16, Base: uint16, Units: watts];
	SegmentLapTotalAscent                             = 21  // [ SegmentLap ] [Type: Uint16, Base: uint16, Units: m];
	SegmentLapTotalDescent                            = 22  // [ SegmentLap ] [Type: Uint16, Base: uint16, Units: m];
	SegmentLapSport                                   = 23  // [ SegmentLap ] [Type: Sport, Base: enum];
	SegmentLapEventGroup                              = 24  // [ SegmentLap ] [Type: Uint8, Base: uint8];
	SegmentLapNecLat                                  = 25  // [ SegmentLap ] [Type: Sint32, Base: sint32, Units: semicircles]; North east corner latitude.
	SegmentLapNecLong                                 = 26  // [ SegmentLap ] [Type: Sint32, Base: sint32, Units: semicircles]; North east corner longitude.
	SegmentLapSwcLat                                  = 27  // [ SegmentLap ] [Type: Sint32, Base: sint32, Units: semicircles]; South west corner latitude.
	SegmentLapSwcLong                                 = 28  // [ SegmentLap ] [Type: Sint32, Base: sint32, Units: semicircles]; South west corner latitude.
	SegmentLapName                                    = 29  // [ SegmentLap ] [Type: String, Base: string];
	SegmentLapNormalizedPower                         = 30  // [ SegmentLap ] [Type: Uint16, Base: uint16, Units: watts];
	SegmentLapLeftRightBalance                        = 31  // [ SegmentLap ] [Type: LeftRightBalance100, Base: uint16];
	SegmentLapSubSport                                = 32  // [ SegmentLap ] [Type: SubSport, Base: enum];
	SegmentLapTotalWork                               = 33  // [ SegmentLap ] [Type: Uint32, Base: uint32, Units: J];
	SegmentLapAvgAltitude                             = 34  // [ SegmentLap ] [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	SegmentLapMaxAltitude                             = 35  // [ SegmentLap ] [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	SegmentLapGpsAccuracy                             = 36  // [ SegmentLap ] [Type: Uint8, Base: uint8, Units: m];
	SegmentLapAvgGrade                                = 37  // [ SegmentLap ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SegmentLapAvgPosGrade                             = 38  // [ SegmentLap ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SegmentLapAvgNegGrade                             = 39  // [ SegmentLap ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SegmentLapMaxPosGrade                             = 40  // [ SegmentLap ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SegmentLapMaxNegGrade                             = 41  // [ SegmentLap ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SegmentLapAvgTemperature                          = 42  // [ SegmentLap ] [Type: Sint8, Base: sint8, Units: C];
	SegmentLapMaxTemperature                          = 43  // [ SegmentLap ] [Type: Sint8, Base: sint8, Units: C];
	SegmentLapTotalMovingTime                         = 44  // [ SegmentLap ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SegmentLapAvgPosVerticalSpeed                     = 45  // [ SegmentLap ] [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SegmentLapAvgNegVerticalSpeed                     = 46  // [ SegmentLap ] [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SegmentLapMaxPosVerticalSpeed                     = 47  // [ SegmentLap ] [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SegmentLapMaxNegVerticalSpeed                     = 48  // [ SegmentLap ] [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SegmentLapTimeInHrZone                            = 49  // [ SegmentLap ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	SegmentLapTimeInSpeedZone                         = 50  // [ SegmentLap ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	SegmentLapTimeInCadenceZone                       = 51  // [ SegmentLap ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	SegmentLapTimeInPowerZone                         = 52  // [ SegmentLap ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	SegmentLapRepetitionNum                           = 53  // [ SegmentLap ] [Type: Uint16, Base: uint16];
	SegmentLapMinAltitude                             = 54  // [ SegmentLap ] [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	SegmentLapMinHeartRate                            = 55  // [ SegmentLap ] [Type: Uint8, Base: uint8, Units: bpm];
	SegmentLapActiveTime                              = 56  // [ SegmentLap ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SegmentLapWktStepIndex                            = 57  // [ SegmentLap ] [Type: MessageIndex, Base: uint16];
	SegmentLapSportEvent                              = 58  // [ SegmentLap ] [Type: SportEvent, Base: enum];
	SegmentLapAvgLeftTorqueEffectiveness              = 59  // [ SegmentLap ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SegmentLapAvgRightTorqueEffectiveness             = 60  // [ SegmentLap ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SegmentLapAvgLeftPedalSmoothness                  = 61  // [ SegmentLap ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SegmentLapAvgRightPedalSmoothness                 = 62  // [ SegmentLap ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SegmentLapAvgCombinedPedalSmoothness              = 63  // [ SegmentLap ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SegmentLapStatus                                  = 64  // [ SegmentLap ] [Type: SegmentLapStatus, Base: enum];
	SegmentLapUuid                                    = 65  // [ SegmentLap ] [Type: String, Base: string];
	SegmentLapAvgFractionalCadence                    = 66  // [ SegmentLap ] [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: rpm]; fractional part of the avg_cadence
	SegmentLapMaxFractionalCadence                    = 67  // [ SegmentLap ] [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: rpm]; fractional part of the max_cadence
	SegmentLapTotalFractionalCycles                   = 68  // [ SegmentLap ] [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: cycles]; fractional part of the total_cycles
	SegmentLapFrontGearShiftCount                     = 69  // [ SegmentLap ] [Type: Uint16, Base: uint16];
	SegmentLapRearGearShiftCount                      = 70  // [ SegmentLap ] [Type: Uint16, Base: uint16];
	SegmentLapTimeStanding                            = 71  // [ SegmentLap ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Total time spent in the standing position
	SegmentLapStandCount                              = 72  // [ SegmentLap ] [Type: Uint16, Base: uint16]; Number of transitions to the standing state
	SegmentLapAvgLeftPco                              = 73  // [ SegmentLap ] [Type: Sint8, Base: sint8, Units: mm]; Average left platform center offset
	SegmentLapAvgRightPco                             = 74  // [ SegmentLap ] [Type: Sint8, Base: sint8, Units: mm]; Average right platform center offset
	SegmentLapAvgLeftPowerPhase                       = 75  // [ SegmentLap ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Average left power phase angles. Data value indexes defined by power_phase_type.
	SegmentLapAvgLeftPowerPhasePeak                   = 76  // [ SegmentLap ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Average left power phase peak angles. Data value indexes defined by power_phase_type.
	SegmentLapAvgRightPowerPhase                      = 77  // [ SegmentLap ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Average right power phase angles. Data value indexes defined by power_phase_type.
	SegmentLapAvgRightPowerPhasePeak                  = 78  // [ SegmentLap ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Average right power phase peak angles. Data value indexes defined by power_phase_type.
	SegmentLapAvgPowerPosition                        = 79  // [ SegmentLap ] [Type: Uint16, Base: uint16, Array: [N], Units: watts]; Average power by position. Data value indexes defined by rider_position_type.
	SegmentLapMaxPowerPosition                        = 80  // [ SegmentLap ] [Type: Uint16, Base: uint16, Array: [N], Units: watts]; Maximum power by position. Data value indexes defined by rider_position_type.
	SegmentLapAvgCadencePosition                      = 81  // [ SegmentLap ] [Type: Uint8, Base: uint8, Array: [N], Units: rpm]; Average cadence by position. Data value indexes defined by rider_position_type.
	SegmentLapMaxCadencePosition                      = 82  // [ SegmentLap ] [Type: Uint8, Base: uint8, Array: [N], Units: rpm]; Maximum cadence by position. Data value indexes defined by rider_position_type.
	SegmentLapManufacturer                            = 83  // [ SegmentLap ] [Type: Manufacturer, Base: uint16]; Manufacturer that produced the segment
	SegmentLapTotalGrit                               = 84  // [ SegmentLap ] [Type: Float32, Base: float32, Units: kGrit]; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	SegmentLapTotalFlow                               = 85  // [ SegmentLap ] [Type: Float32, Base: float32, Units: Flow]; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	SegmentLapAvgGrit                                 = 86  // [ SegmentLap ] [Type: Float32, Base: float32, Units: kGrit]; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	SegmentLapAvgFlow                                 = 87  // [ SegmentLap ] [Type: Float32, Base: float32, Units: Flow]; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	SegmentLapTotalFractionalAscent                   = 89  // [ SegmentLap ] [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m]; fractional part of total_ascent
	SegmentLapTotalFractionalDescent                  = 90  // [ SegmentLap ] [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m]; fractional part of total_descent
	SegmentLapEnhancedAvgAltitude                     = 91  // [ SegmentLap ] [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	SegmentLapEnhancedMaxAltitude                     = 92  // [ SegmentLap ] [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	SegmentLapEnhancedMinAltitude                     = 93  // [ SegmentLap ] [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	SegmentLeaderboardEntryMessageIndex               = 254 // [ SegmentLeaderboardEntry ] [Type: MessageIndex, Base: uint16];
	SegmentLeaderboardEntryName                       = 0   // [ SegmentLeaderboardEntry ] [Type: String, Base: string]; Friendly name assigned to leader
	SegmentLeaderboardEntryType                       = 1   // [ SegmentLeaderboardEntry ] [Type: SegmentLeaderboardType, Base: enum]; Leader classification
	SegmentLeaderboardEntryGroupPrimaryKey            = 2   // [ SegmentLeaderboardEntry ] [Type: Uint32, Base: uint32]; Primary user ID of this leader
	SegmentLeaderboardEntryActivityId                 = 3   // [ SegmentLeaderboardEntry ] [Type: Uint32, Base: uint32]; ID of the activity associated with this leader time
	SegmentLeaderboardEntrySegmentTime                = 4   // [ SegmentLeaderboardEntry ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Segment Time (includes pauses)
	SegmentLeaderboardEntryActivityIdString           = 5   // [ SegmentLeaderboardEntry ] [Type: String, Base: string]; String version of the activity_id. 21 characters long, express in decimal
	SegmentPointMessageIndex                          = 254 // [ SegmentPoint ] [Type: MessageIndex, Base: uint16];
	SegmentPointPositionLat                           = 1   // [ SegmentPoint ] [Type: Sint32, Base: sint32, Units: semicircles];
	SegmentPointPositionLong                          = 2   // [ SegmentPoint ] [Type: Sint32, Base: sint32, Units: semicircles];
	SegmentPointDistance                              = 3   // [ SegmentPoint ] [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m]; Accumulated distance along the segment at the described point
	SegmentPointAltitude                              = 4   // [ SegmentPoint ] [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m]; Accumulated altitude along the segment at the described point
	SegmentPointLeaderTime                            = 5   // [ SegmentPoint ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s]; Accumualted time each leader board member required to reach the described point. This value is zero for all leader board members at the starting point of the segment.
	SegmentPointEnhancedAltitude                      = 6   // [ SegmentPoint ] [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m]; Accumulated altitude along the segment at the described point
	SessionMessageIndex                               = 254 // [ Session ] [Type: MessageIndex, Base: uint16]; Selected bit is set for the current session.
	SessionTimestamp                                  = 253 // [ Session ] [Type: DateTime, Base: uint32, Units: s]; Sesson end time.
	SessionEvent                                      = 0   // [ Session ] [Type: Event, Base: enum]; session
	SessionEventType                                  = 1   // [ Session ] [Type: EventType, Base: enum]; stop
	SessionStartTime                                  = 2   // [ Session ] [Type: DateTime, Base: uint32];
	SessionStartPositionLat                           = 3   // [ Session ] [Type: Sint32, Base: sint32, Units: semicircles];
	SessionStartPositionLong                          = 4   // [ Session ] [Type: Sint32, Base: sint32, Units: semicircles];
	SessionSport                                      = 5   // [ Session ] [Type: Sport, Base: enum];
	SessionSubSport                                   = 6   // [ Session ] [Type: SubSport, Base: enum];
	SessionTotalElapsedTime                           = 7   // [ Session ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Time (includes pauses)
	SessionTotalTimerTime                             = 8   // [ Session ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Timer Time (excludes pauses)
	SessionTotalDistance                              = 9   // [ Session ] [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	SessionTotalCycles                                = 10  // [ Session ] [Type: Uint32, Base: uint32, Units: cycles];
	SessionTotalCalories                              = 11  // [ Session ] [Type: Uint16, Base: uint16, Units: kcal];
	SessionTotalFatCalories                           = 13  // [ Session ] [Type: Uint16, Base: uint16, Units: kcal];
	SessionAvgSpeed                                   = 14  // [ Session ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s]; total_distance / total_timer_time
	SessionMaxSpeed                                   = 15  // [ Session ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	SessionAvgHeartRate                               = 16  // [ Session ] [Type: Uint8, Base: uint8, Units: bpm]; average heart rate (excludes pause time)
	SessionMaxHeartRate                               = 17  // [ Session ] [Type: Uint8, Base: uint8, Units: bpm];
	SessionAvgCadence                                 = 18  // [ Session ] [Type: Uint8, Base: uint8, Units: rpm]; total_cycles / total_timer_time if non_zero_avg_cadence otherwise total_cycles / total_elapsed_time
	SessionMaxCadence                                 = 19  // [ Session ] [Type: Uint8, Base: uint8, Units: rpm];
	SessionAvgPower                                   = 20  // [ Session ] [Type: Uint16, Base: uint16, Units: watts]; total_power / total_timer_time if non_zero_avg_power otherwise total_power / total_elapsed_time
	SessionMaxPower                                   = 21  // [ Session ] [Type: Uint16, Base: uint16, Units: watts];
	SessionTotalAscent                                = 22  // [ Session ] [Type: Uint16, Base: uint16, Units: m];
	SessionTotalDescent                               = 23  // [ Session ] [Type: Uint16, Base: uint16, Units: m];
	SessionTotalTrainingEffect                        = 24  // [ Session ] [Type: Uint8, Base: uint8, Scale: 10, Offset: 0];
	SessionFirstLapIndex                              = 25  // [ Session ] [Type: Uint16, Base: uint16];
	SessionNumLaps                                    = 26  // [ Session ] [Type: Uint16, Base: uint16];
	SessionEventGroup                                 = 27  // [ Session ] [Type: Uint8, Base: uint8];
	SessionTrigger                                    = 28  // [ Session ] [Type: SessionTrigger, Base: enum];
	SessionNecLat                                     = 29  // [ Session ] [Type: Sint32, Base: sint32, Units: semicircles]; North east corner latitude
	SessionNecLong                                    = 30  // [ Session ] [Type: Sint32, Base: sint32, Units: semicircles]; North east corner longitude
	SessionSwcLat                                     = 31  // [ Session ] [Type: Sint32, Base: sint32, Units: semicircles]; South west corner latitude
	SessionSwcLong                                    = 32  // [ Session ] [Type: Sint32, Base: sint32, Units: semicircles]; South west corner longitude
	SessionNumLengths                                 = 33  // [ Session ] [Type: Uint16, Base: uint16, Units: lengths]; # of lengths of swim pool
	SessionNormalizedPower                            = 34  // [ Session ] [Type: Uint16, Base: uint16, Units: watts];
	SessionTrainingStressScore                        = 35  // [ Session ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: tss];
	SessionIntensityFactor                            = 36  // [ Session ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: if];
	SessionLeftRightBalance                           = 37  // [ Session ] [Type: LeftRightBalance100, Base: uint16];
	SessionEndPositionLat                             = 38  // [ Session ] [Type: Sint32, Base: sint32, Units: semicircles];
	SessionEndPositionLong                            = 39  // [ Session ] [Type: Sint32, Base: sint32, Units: semicircles];
	SessionAvgStrokeCount                             = 41  // [ Session ] [Type: Uint32, Base: uint32, Scale: 10, Offset: 0, Units: strokes/lap];
	SessionAvgStrokeDistance                          = 42  // [ Session ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m];
	SessionSwimStroke                                 = 43  // [ Session ] [Type: SwimStroke, Base: enum, Units: swim_stroke];
	SessionPoolLength                                 = 44  // [ Session ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m];
	SessionThresholdPower                             = 45  // [ Session ] [Type: Uint16, Base: uint16, Units: watts];
	SessionPoolLengthUnit                             = 46  // [ Session ] [Type: DisplayMeasure, Base: enum];
	SessionNumActiveLengths                           = 47  // [ Session ] [Type: Uint16, Base: uint16, Units: lengths]; # of active lengths of swim pool
	SessionTotalWork                                  = 48  // [ Session ] [Type: Uint32, Base: uint32, Units: J];
	SessionAvgAltitude                                = 49  // [ Session ] [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	SessionMaxAltitude                                = 50  // [ Session ] [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	SessionGpsAccuracy                                = 51  // [ Session ] [Type: Uint8, Base: uint8, Units: m];
	SessionAvgGrade                                   = 52  // [ Session ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SessionAvgPosGrade                                = 53  // [ Session ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SessionAvgNegGrade                                = 54  // [ Session ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SessionMaxPosGrade                                = 55  // [ Session ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SessionMaxNegGrade                                = 56  // [ Session ] [Type: Sint16, Base: sint16, Scale: 100, Offset: 0, Units: %];
	SessionAvgTemperature                             = 57  // [ Session ] [Type: Sint8, Base: sint8, Units: C];
	SessionMaxTemperature                             = 58  // [ Session ] [Type: Sint8, Base: sint8, Units: C];
	SessionTotalMovingTime                            = 59  // [ Session ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SessionAvgPosVerticalSpeed                        = 60  // [ Session ] [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SessionAvgNegVerticalSpeed                        = 61  // [ Session ] [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SessionMaxPosVerticalSpeed                        = 62  // [ Session ] [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SessionMaxNegVerticalSpeed                        = 63  // [ Session ] [Type: Sint16, Base: sint16, Scale: 1000, Offset: 0, Units: m/s];
	SessionMinHeartRate                               = 64  // [ Session ] [Type: Uint8, Base: uint8, Units: bpm];
	SessionTimeInHrZone                               = 65  // [ Session ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	SessionTimeInSpeedZone                            = 66  // [ Session ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	SessionTimeInCadenceZone                          = 67  // [ Session ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	SessionTimeInPowerZone                            = 68  // [ Session ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	SessionAvgLapTime                                 = 69  // [ Session ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SessionBestLapIndex                               = 70  // [ Session ] [Type: Uint16, Base: uint16];
	SessionMinAltitude                                = 71  // [ Session ] [Type: Uint16, Base: uint16, Scale: 5, Offset: 500, Units: m];
	SessionPlayerScore                                = 82  // [ Session ] [Type: Uint16, Base: uint16];
	SessionOpponentScore                              = 83  // [ Session ] [Type: Uint16, Base: uint16];
	SessionOpponentName                               = 84  // [ Session ] [Type: String, Base: string];
	SessionStrokeCount                                = 85  // [ Session ] [Type: Uint16, Base: uint16, Array: [N], Units: counts]; stroke_type enum used as the index
	SessionZoneCount                                  = 86  // [ Session ] [Type: Uint16, Base: uint16, Array: [N], Units: counts]; zone number used as the index
	SessionMaxBallSpeed                               = 87  // [ Session ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m/s];
	SessionAvgBallSpeed                               = 88  // [ Session ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m/s];
	SessionAvgVerticalOscillation                     = 89  // [ Session ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: mm];
	SessionAvgStanceTimePercent                       = 90  // [ Session ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	SessionAvgStanceTime                              = 91  // [ Session ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: ms];
	SessionAvgFractionalCadence                       = 92  // [ Session ] [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: rpm]; fractional part of the avg_cadence
	SessionMaxFractionalCadence                       = 93  // [ Session ] [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: rpm]; fractional part of the max_cadence
	SessionTotalFractionalCycles                      = 94  // [ Session ] [Type: Uint8, Base: uint8, Scale: 128, Offset: 0, Units: cycles]; fractional part of the total_cycles
	SessionAvgTotalHemoglobinConc                     = 95  // [ Session ] [Type: Uint16, Base: uint16, Array: [N], Scale: 100, Offset: 0, Units: g/dL]; Avg saturated and unsaturated hemoglobin
	SessionMinTotalHemoglobinConc                     = 96  // [ Session ] [Type: Uint16, Base: uint16, Array: [N], Scale: 100, Offset: 0, Units: g/dL]; Min saturated and unsaturated hemoglobin
	SessionMaxTotalHemoglobinConc                     = 97  // [ Session ] [Type: Uint16, Base: uint16, Array: [N], Scale: 100, Offset: 0, Units: g/dL]; Max saturated and unsaturated hemoglobin
	SessionAvgSaturatedHemoglobinPercent              = 98  // [ Session ] [Type: Uint16, Base: uint16, Array: [N], Scale: 10, Offset: 0, Units: %]; Avg percentage of hemoglobin saturated with oxygen
	SessionMinSaturatedHemoglobinPercent              = 99  // [ Session ] [Type: Uint16, Base: uint16, Array: [N], Scale: 10, Offset: 0, Units: %]; Min percentage of hemoglobin saturated with oxygen
	SessionMaxSaturatedHemoglobinPercent              = 100 // [ Session ] [Type: Uint16, Base: uint16, Array: [N], Scale: 10, Offset: 0, Units: %]; Max percentage of hemoglobin saturated with oxygen
	SessionAvgLeftTorqueEffectiveness                 = 101 // [ Session ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SessionAvgRightTorqueEffectiveness                = 102 // [ Session ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SessionAvgLeftPedalSmoothness                     = 103 // [ Session ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SessionAvgRightPedalSmoothness                    = 104 // [ Session ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SessionAvgCombinedPedalSmoothness                 = 105 // [ Session ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent];
	SessionSportProfileName                           = 110 // [ Session ] [Type: String, Base: string]; Sport name from associated sport mesg
	SessionSportIndex                                 = 111 // [ Session ] [Type: Uint8, Base: uint8];
	SessionTimeStanding                               = 112 // [ Session ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s]; Total time spend in the standing position
	SessionStandCount                                 = 113 // [ Session ] [Type: Uint16, Base: uint16]; Number of transitions to the standing state
	SessionAvgLeftPco                                 = 114 // [ Session ] [Type: Sint8, Base: sint8, Units: mm]; Average platform center offset Left
	SessionAvgRightPco                                = 115 // [ Session ] [Type: Sint8, Base: sint8, Units: mm]; Average platform center offset Right
	SessionAvgLeftPowerPhase                          = 116 // [ Session ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Average left power phase angles. Indexes defined by power_phase_type.
	SessionAvgLeftPowerPhasePeak                      = 117 // [ Session ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Average left power phase peak angles. Data value indexes defined by power_phase_type.
	SessionAvgRightPowerPhase                         = 118 // [ Session ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Average right power phase angles. Data value indexes defined by power_phase_type.
	SessionAvgRightPowerPhasePeak                     = 119 // [ Session ] [Type: Uint8, Base: uint8, Array: [N], Scale: 0.7111111, Offset: 0, Units: degrees]; Average right power phase peak angles data value indexes defined by power_phase_type.
	SessionAvgPowerPosition                           = 120 // [ Session ] [Type: Uint16, Base: uint16, Array: [N], Units: watts]; Average power by position. Data value indexes defined by rider_position_type.
	SessionMaxPowerPosition                           = 121 // [ Session ] [Type: Uint16, Base: uint16, Array: [N], Units: watts]; Maximum power by position. Data value indexes defined by rider_position_type.
	SessionAvgCadencePosition                         = 122 // [ Session ] [Type: Uint8, Base: uint8, Array: [N], Units: rpm]; Average cadence by position. Data value indexes defined by rider_position_type.
	SessionMaxCadencePosition                         = 123 // [ Session ] [Type: Uint8, Base: uint8, Array: [N], Units: rpm]; Maximum cadence by position. Data value indexes defined by rider_position_type.
	SessionEnhancedAvgSpeed                           = 124 // [ Session ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s]; total_distance / total_timer_time
	SessionEnhancedMaxSpeed                           = 125 // [ Session ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	SessionEnhancedAvgAltitude                        = 126 // [ Session ] [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	SessionEnhancedMinAltitude                        = 127 // [ Session ] [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	SessionEnhancedMaxAltitude                        = 128 // [ Session ] [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	SessionAvgLevMotorPower                           = 129 // [ Session ] [Type: Uint16, Base: uint16, Units: watts]; lev average motor power during session
	SessionMaxLevMotorPower                           = 130 // [ Session ] [Type: Uint16, Base: uint16, Units: watts]; lev maximum motor power during session
	SessionLevBatteryConsumption                      = 131 // [ Session ] [Type: Uint8, Base: uint8, Scale: 2, Offset: 0, Units: percent]; lev battery consumption during session
	SessionAvgVerticalRatio                           = 132 // [ Session ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	SessionAvgStanceTimeBalance                       = 133 // [ Session ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: percent];
	SessionAvgStepLength                              = 134 // [ Session ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: mm];
	SessionTotalAnaerobicTrainingEffect               = 137 // [ Session ] [Type: Uint8, Base: uint8, Scale: 10, Offset: 0];
	SessionAvgVam                                     = 139 // [ Session ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	SessionAvgDepth                                   = 140 // [ Session ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	SessionMaxDepth                                   = 141 // [ Session ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m]; 0 if above water
	SessionSurfaceInterval                            = 142 // [ Session ] [Type: Uint32, Base: uint32, Units: s]; Time since end of last dive
	SessionStartCns                                   = 143 // [ Session ] [Type: Uint8, Base: uint8, Units: percent];
	SessionEndCns                                     = 144 // [ Session ] [Type: Uint8, Base: uint8, Units: percent];
	SessionStartN2                                    = 145 // [ Session ] [Type: Uint16, Base: uint16, Units: percent];
	SessionEndN2                                      = 146 // [ Session ] [Type: Uint16, Base: uint16, Units: percent];
	SessionAvgRespirationRate                         = 147 // [ Session ] [Type: Uint8, Base: uint8];
	SessionMaxRespirationRate                         = 148 // [ Session ] [Type: Uint8, Base: uint8];
	SessionMinRespirationRate                         = 149 // [ Session ] [Type: Uint8, Base: uint8];
	SessionMinTemperature                             = 150 // [ Session ] [Type: Sint8, Base: sint8, Units: C];
	SessionO2Toxicity                                 = 155 // [ Session ] [Type: Uint16, Base: uint16, Units: OTUs];
	SessionDiveNumber                                 = 156 // [ Session ] [Type: Uint32, Base: uint32];
	SessionTrainingLoadPeak                           = 168 // [ Session ] [Type: Sint32, Base: sint32, Scale: 65536, Offset: 0];
	SessionEnhancedAvgRespirationRate                 = 169 // [ Session ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: Breaths/min];
	SessionEnhancedMaxRespirationRate                 = 170 // [ Session ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: Breaths/min];
	SessionEnhancedMinRespirationRate                 = 180 // [ Session ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0];
	SessionTotalGrit                                  = 181 // [ Session ] [Type: Float32, Base: float32, Units: kGrit]; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	SessionTotalFlow                                  = 182 // [ Session ] [Type: Float32, Base: float32, Units: Flow]; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	SessionJumpCount                                  = 183 // [ Session ] [Type: Uint16, Base: uint16];
	SessionAvgGrit                                    = 186 // [ Session ] [Type: Float32, Base: float32, Units: kGrit]; The grit score estimates how challenging a route could be for a cyclist in terms of time spent going over sharp turns or large grade slopes.
	SessionAvgFlow                                    = 187 // [ Session ] [Type: Float32, Base: float32, Units: Flow]; The flow score estimates how long distance wise a cyclist deaccelerates over intervals where deacceleration is unnecessary such as smooth turns or small grade angle intervals.
	SessionWorkoutFeel                                = 192 // [ Session ] [Type: Uint8, Base: uint8]; A 0-100 scale representing how a user felt while performing a workout. Low values are considered feeling bad, while high values are good.
	SessionWorkoutRpe                                 = 193 // [ Session ] [Type: Uint8, Base: uint8]; Common Borg CR10 / 0-10 RPE scale, multiplied 10x.. Aggregate score for all workouts in a single session.
	SessionAvgSpo2                                    = 194 // [ Session ] [Type: Uint8, Base: uint8, Units: percent]; Average SPO2 for the monitoring session
	SessionAvgStress                                  = 195 // [ Session ] [Type: Uint8, Base: uint8, Units: percent]; Average stress for the monitoring session
	SessionSdrrHrv                                    = 197 // [ Session ] [Type: Uint8, Base: uint8, Units: mS]; Standard deviation of R-R interval (SDRR) - Heart rate variability measure most useful for wellness users.
	SessionRmssdHrv                                   = 198 // [ Session ] [Type: Uint8, Base: uint8, Units: mS]; Root mean square successive difference (RMSSD) - Heart rate variability measure most useful for athletes
	SessionTotalFractionalAscent                      = 199 // [ Session ] [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m]; fractional part of total_ascent
	SessionTotalFractionalDescent                     = 200 // [ Session ] [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m]; fractional part of total_descent
	SessionAvgCoreTemperature                         = 208 // [ Session ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: C];
	SessionMinCoreTemperature                         = 209 // [ Session ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: C];
	SessionMaxCoreTemperature                         = 210 // [ Session ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: C];
	SetTimestamp                                      = 254 // [ Set ] [Type: DateTime, Base: uint32]; Timestamp of the set
	SetDuration                                       = 0   // [ Set ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SetRepetitions                                    = 3   // [ Set ] [Type: Uint16, Base: uint16]; # of repitions of the movement
	SetWeight                                         = 4   // [ Set ] [Type: Uint16, Base: uint16, Scale: 16, Offset: 0, Units: kg]; Amount of weight applied for the set
	SetSetType                                        = 5   // [ Set ] [Type: SetType, Base: uint8];
	SetStartTime                                      = 6   // [ Set ] [Type: DateTime, Base: uint32]; Start time of the set
	SetCategory                                       = 7   // [ Set ] [Type: ExerciseCategory, Base: uint16, Array: [N]];
	SetCategorySubtype                                = 8   // [ Set ] [Type: Uint16, Base: uint16, Array: [N]]; Based on the associated category, see [category]_exercise_names
	SetWeightDisplayUnit                              = 9   // [ Set ] [Type: FitBaseUnit, Base: uint16];
	SetMessageIndex                                   = 10  // [ Set ] [Type: MessageIndex, Base: uint16];
	SetWktStepIndex                                   = 11  // [ Set ] [Type: MessageIndex, Base: uint16];
	SkinTempOvernightTimestamp                        = 253 // [ SkinTempOvernight ] [Type: DateTime, Base: uint32];
	SkinTempOvernightLocalTimestamp                   = 0   // [ SkinTempOvernight ] [Type: LocalDateTime, Base: uint32];
	SkinTempOvernightAverageDeviation                 = 1   // [ SkinTempOvernight ] [Type: Float32, Base: float32]; The average overnight deviation from baseline temperature in degrees C
	SkinTempOvernightAverage7DayDeviation             = 2   // [ SkinTempOvernight ] [Type: Float32, Base: float32]; The average 7 day overnight deviation from baseline temperature in degrees C
	SkinTempOvernightNightlyValue                     = 4   // [ SkinTempOvernight ] [Type: Float32, Base: float32]; Final overnight temperature value
	SlaveDeviceManufacturer                           = 0   // [ SlaveDevice ] [Type: Manufacturer, Base: uint16];
	SlaveDeviceProduct                                = 1   // [ SlaveDevice ] [Type: Uint16, Base: uint16];
	SleepAssessmentCombinedAwakeScore                 = 0   // [ SleepAssessment ] [Type: Uint8, Base: uint8]; Average of awake_time_score and awakenings_count_score. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentAwakeTimeScore                     = 1   // [ SleepAssessment ] [Type: Uint8, Base: uint8]; Score that evaluates the total time spent awake between sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentAwakeningsCountScore               = 2   // [ SleepAssessment ] [Type: Uint8, Base: uint8]; Score that evaluates the number of awakenings that interrupt sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentDeepSleepScore                     = 3   // [ SleepAssessment ] [Type: Uint8, Base: uint8]; Score that evaluates the amount of deep sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentSleepDurationScore                 = 4   // [ SleepAssessment ] [Type: Uint8, Base: uint8]; Score that evaluates the quality of sleep based on sleep stages, heart-rate variability and possible awakenings during the night. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentLightSleepScore                    = 5   // [ SleepAssessment ] [Type: Uint8, Base: uint8]; Score that evaluates the amount of light sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentOverallSleepScore                  = 6   // [ SleepAssessment ] [Type: Uint8, Base: uint8]; Total score that summarizes the overall quality of sleep, combining sleep duration and quality. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentSleepQualityScore                  = 7   // [ SleepAssessment ] [Type: Uint8, Base: uint8]; Score that evaluates the quality of sleep based on sleep stages, heart-rate variability and possible awakenings during the night. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentSleepRecoveryScore                 = 8   // [ SleepAssessment ] [Type: Uint8, Base: uint8]; Score that evaluates stress and recovery during sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentRemSleepScore                      = 9   // [ SleepAssessment ] [Type: Uint8, Base: uint8]; Score that evaluates the amount of REM sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentSleepRestlessnessScore             = 10  // [ SleepAssessment ] [Type: Uint8, Base: uint8]; Score that evaluates the amount of restlessness during sleep. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentAwakeningsCount                    = 11  // [ SleepAssessment ] [Type: Uint8, Base: uint8]; The number of awakenings during sleep.
	SleepAssessmentInterruptionsScore                 = 14  // [ SleepAssessment ] [Type: Uint8, Base: uint8]; Score that evaluates the sleep interruptions. If valid: 0 (worst) to 100 (best). If unknown: FIT_UINT8_INVALID.
	SleepAssessmentAverageStressDuringSleep           = 15  // [ SleepAssessment ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0]; Excludes stress during awake periods in the sleep window
	SleepLevelTimestamp                               = 253 // [ SleepLevel ] [Type: DateTime, Base: uint32, Units: s];
	SleepLevelSleepLevel                              = 0   // [ SleepLevel ] [Type: SleepLevel, Base: enum];
	SoftwareMessageIndex                              = 254 // [ Software ] [Type: MessageIndex, Base: uint16];
	SoftwareVersion                                   = 3   // [ Software ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0];
	SoftwarePartNumber                                = 5   // [ Software ] [Type: String, Base: string];
	SpeedZoneMessageIndex                             = 254 // [ SpeedZone ] [Type: MessageIndex, Base: uint16];
	SpeedZoneHighValue                                = 0   // [ SpeedZone ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	SpeedZoneName                                     = 1   // [ SpeedZone ] [Type: String, Base: string];
	SplitMessageIndex                                 = 254 // [ Split ] [Type: MessageIndex, Base: uint16];
	SplitSplitType                                    = 0   // [ Split ] [Type: SplitType, Base: enum];
	SplitTotalElapsedTime                             = 1   // [ Split ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SplitTotalTimerTime                               = 2   // [ Split ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SplitTotalDistance                                = 3   // [ Split ] [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	SplitAvgSpeed                                     = 4   // [ Split ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	SplitStartTime                                    = 9   // [ Split ] [Type: DateTime, Base: uint32];
	SplitTotalAscent                                  = 13  // [ Split ] [Type: Uint16, Base: uint16, Units: m];
	SplitTotalDescent                                 = 14  // [ Split ] [Type: Uint16, Base: uint16, Units: m];
	SplitStartPositionLat                             = 21  // [ Split ] [Type: Sint32, Base: sint32, Units: semicircles];
	SplitStartPositionLong                            = 22  // [ Split ] [Type: Sint32, Base: sint32, Units: semicircles];
	SplitEndPositionLat                               = 23  // [ Split ] [Type: Sint32, Base: sint32, Units: semicircles];
	SplitEndPositionLong                              = 24  // [ Split ] [Type: Sint32, Base: sint32, Units: semicircles];
	SplitMaxSpeed                                     = 25  // [ Split ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	SplitAvgVertSpeed                                 = 26  // [ Split ] [Type: Sint32, Base: sint32, Scale: 1000, Offset: 0, Units: m/s];
	SplitEndTime                                      = 27  // [ Split ] [Type: DateTime, Base: uint32];
	SplitTotalCalories                                = 28  // [ Split ] [Type: Uint32, Base: uint32, Units: kcal];
	SplitStartElevation                               = 74  // [ Split ] [Type: Uint32, Base: uint32, Scale: 5, Offset: 500, Units: m];
	SplitTotalMovingTime                              = 110 // [ Split ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SplitSummaryMessageIndex                          = 254 // [ SplitSummary ] [Type: MessageIndex, Base: uint16];
	SplitSummarySplitType                             = 0   // [ SplitSummary ] [Type: SplitType, Base: enum];
	SplitSummaryNumSplits                             = 3   // [ SplitSummary ] [Type: Uint16, Base: uint16];
	SplitSummaryTotalTimerTime                        = 4   // [ SplitSummary ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	SplitSummaryTotalDistance                         = 5   // [ SplitSummary ] [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: m];
	SplitSummaryAvgSpeed                              = 6   // [ SplitSummary ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	SplitSummaryMaxSpeed                              = 7   // [ SplitSummary ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: m/s];
	SplitSummaryTotalAscent                           = 8   // [ SplitSummary ] [Type: Uint16, Base: uint16, Units: m];
	SplitSummaryTotalDescent                          = 9   // [ SplitSummary ] [Type: Uint16, Base: uint16, Units: m];
	SplitSummaryAvgHeartRate                          = 10  // [ SplitSummary ] [Type: Uint8, Base: uint8, Units: bpm];
	SplitSummaryMaxHeartRate                          = 11  // [ SplitSummary ] [Type: Uint8, Base: uint8, Units: bpm];
	SplitSummaryAvgVertSpeed                          = 12  // [ SplitSummary ] [Type: Sint32, Base: sint32, Scale: 1000, Offset: 0, Units: m/s];
	SplitSummaryTotalCalories                         = 13  // [ SplitSummary ] [Type: Uint32, Base: uint32, Units: kcal];
	SplitSummaryTotalMovingTime                       = 77  // [ SplitSummary ] [Type: Uint32, Base: uint32, Scale: 1000, Offset: 0, Units: s];
	Spo2DataTimestamp                                 = 253 // [ Spo2Data ] [Type: DateTime, Base: uint32, Units: s];
	Spo2DataReadingSpo2                               = 0   // [ Spo2Data ] [Type: Uint8, Base: uint8, Units: percent];
	Spo2DataReadingConfidence                         = 1   // [ Spo2Data ] [Type: Uint8, Base: uint8];
	Spo2DataMode                                      = 2   // [ Spo2Data ] [Type: Spo2MeasurementType, Base: enum]; Mode when data was captured
	SportSport                                        = 0   // [ Sport ] [Type: Sport, Base: enum];
	SportSubSport                                     = 1   // [ Sport ] [Type: SubSport, Base: enum];
	SportName                                         = 3   // [ Sport ] [Type: String, Base: string];
	StressLevelStressLevelValue                       = 0   // [ StressLevel ] [Type: Sint16, Base: sint16];
	StressLevelStressLevelTime                        = 1   // [ StressLevel ] [Type: DateTime, Base: uint32, Units: s]; Time stress score was calculated
	TankSummaryTimestamp                              = 253 // [ TankSummary ] [Type: DateTime, Base: uint32, Units: s];
	TankSummarySensor                                 = 0   // [ TankSummary ] [Type: AntChannelId, Base: uint32z];
	TankSummaryStartPressure                          = 1   // [ TankSummary ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: bar];
	TankSummaryEndPressure                            = 2   // [ TankSummary ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: bar];
	TankSummaryVolumeUsed                             = 3   // [ TankSummary ] [Type: Uint32, Base: uint32, Scale: 100, Offset: 0, Units: L];
	TankUpdateTimestamp                               = 253 // [ TankUpdate ] [Type: DateTime, Base: uint32, Units: s];
	TankUpdateSensor                                  = 0   // [ TankUpdate ] [Type: AntChannelId, Base: uint32z];
	TankUpdatePressure                                = 1   // [ TankUpdate ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: bar];
	ThreeDSensorCalibrationTimestamp                  = 253 // [ ThreeDSensorCalibration ] [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp
	ThreeDSensorCalibrationSensorType                 = 0   // [ ThreeDSensorCalibration ] [Type: SensorType, Base: enum]; Indicates which sensor the calibration is for
	ThreeDSensorCalibrationCalibrationFactor          = 1   // [ ThreeDSensorCalibration ] [Type: Uint32, Base: uint32]; Calibration factor used to convert from raw ADC value to degrees, g, etc.
	ThreeDSensorCalibrationCalibrationDivisor         = 2   // [ ThreeDSensorCalibration ] [Type: Uint32, Base: uint32, Units: counts]; Calibration factor divisor
	ThreeDSensorCalibrationLevelShift                 = 3   // [ ThreeDSensorCalibration ] [Type: Uint32, Base: uint32]; Level shift value used to shift the ADC value back into range
	ThreeDSensorCalibrationOffsetCal                  = 4   // [ ThreeDSensorCalibration ] [Type: Sint32, Base: sint32, Array: [3]]; Internal calibration factors, one for each: xy, yx, zx
	ThreeDSensorCalibrationOrientationMatrix          = 5   // [ ThreeDSensorCalibration ] [Type: Sint32, Base: sint32, Array: [9], Scale: 65535, Offset: 0]; 3 x 3 rotation matrix (row major)
	TimeInZoneTimestamp                               = 253 // [ TimeInZone ] [Type: DateTime, Base: uint32, Units: s];
	TimeInZoneReferenceMesg                           = 0   // [ TimeInZone ] [Type: MesgNum, Base: uint16];
	TimeInZoneReferenceIndex                          = 1   // [ TimeInZone ] [Type: MessageIndex, Base: uint16];
	TimeInZoneTimeInHrZone                            = 2   // [ TimeInZone ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	TimeInZoneTimeInSpeedZone                         = 3   // [ TimeInZone ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	TimeInZoneTimeInCadenceZone                       = 4   // [ TimeInZone ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	TimeInZoneTimeInPowerZone                         = 5   // [ TimeInZone ] [Type: Uint32, Base: uint32, Array: [N], Scale: 1000, Offset: 0, Units: s];
	TimeInZoneHrZoneHighBoundary                      = 6   // [ TimeInZone ] [Type: Uint8, Base: uint8, Array: [N], Units: bpm];
	TimeInZoneSpeedZoneHighBoundary                   = 7   // [ TimeInZone ] [Type: Uint16, Base: uint16, Array: [N], Scale: 1000, Offset: 0, Units: m/s];
	TimeInZoneCadenceZoneHighBoundary                 = 8   // [ TimeInZone ] [Type: Uint8, Base: uint8, Array: [N], Units: rpm];
	TimeInZonePowerZoneHighBoundary                   = 9   // [ TimeInZone ] [Type: Uint16, Base: uint16, Array: [N], Units: watts];
	TimeInZoneHrCalcType                              = 10  // [ TimeInZone ] [Type: HrZoneCalc, Base: enum];
	TimeInZoneMaxHeartRate                            = 11  // [ TimeInZone ] [Type: Uint8, Base: uint8];
	TimeInZoneRestingHeartRate                        = 12  // [ TimeInZone ] [Type: Uint8, Base: uint8];
	TimeInZoneThresholdHeartRate                      = 13  // [ TimeInZone ] [Type: Uint8, Base: uint8];
	TimeInZonePwrCalcType                             = 14  // [ TimeInZone ] [Type: PwrZoneCalc, Base: enum];
	TimeInZoneFunctionalThresholdPower                = 15  // [ TimeInZone ] [Type: Uint16, Base: uint16];
	TimestampCorrelationTimestamp                     = 253 // [ TimestampCorrelation ] [Type: DateTime, Base: uint32, Units: s]; Whole second part of UTC timestamp at the time the system timestamp was recorded.
	TimestampCorrelationFractionalTimestamp           = 0   // [ TimestampCorrelation ] [Type: Uint16, Base: uint16, Scale: 32768, Offset: 0, Units: s]; Fractional part of the UTC timestamp at the time the system timestamp was recorded.
	TimestampCorrelationSystemTimestamp               = 1   // [ TimestampCorrelation ] [Type: DateTime, Base: uint32, Units: s]; Whole second part of the system timestamp
	TimestampCorrelationFractionalSystemTimestamp     = 2   // [ TimestampCorrelation ] [Type: Uint16, Base: uint16, Scale: 32768, Offset: 0, Units: s]; Fractional part of the system timestamp
	TimestampCorrelationLocalTimestamp                = 3   // [ TimestampCorrelation ] [Type: LocalDateTime, Base: uint32, Units: s]; timestamp epoch expressed in local time used to convert timestamps to local time
	TimestampCorrelationTimestampMs                   = 4   // [ TimestampCorrelation ] [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the UTC timestamp at the time the system timestamp was recorded.
	TimestampCorrelationSystemTimestampMs             = 5   // [ TimestampCorrelation ] [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the system timestamp
	TotalsMessageIndex                                = 254 // [ Totals ] [Type: MessageIndex, Base: uint16];
	TotalsTimestamp                                   = 253 // [ Totals ] [Type: DateTime, Base: uint32, Units: s];
	TotalsTimerTime                                   = 0   // [ Totals ] [Type: Uint32, Base: uint32, Units: s]; Excludes pauses
	TotalsDistance                                    = 1   // [ Totals ] [Type: Uint32, Base: uint32, Units: m];
	TotalsCalories                                    = 2   // [ Totals ] [Type: Uint32, Base: uint32, Units: kcal];
	TotalsSport                                       = 3   // [ Totals ] [Type: Sport, Base: enum];
	TotalsElapsedTime                                 = 4   // [ Totals ] [Type: Uint32, Base: uint32, Units: s]; Includes pauses
	TotalsSessions                                    = 5   // [ Totals ] [Type: Uint16, Base: uint16];
	TotalsActiveTime                                  = 6   // [ Totals ] [Type: Uint32, Base: uint32, Units: s];
	TotalsSportIndex                                  = 9   // [ Totals ] [Type: Uint8, Base: uint8];
	TrainingFileTimestamp                             = 253 // [ TrainingFile ] [Type: DateTime, Base: uint32];
	TrainingFileType                                  = 0   // [ TrainingFile ] [Type: File, Base: enum];
	TrainingFileManufacturer                          = 1   // [ TrainingFile ] [Type: Manufacturer, Base: uint16];
	TrainingFileProduct                               = 2   // [ TrainingFile ] [Type: Uint16, Base: uint16];
	TrainingFileSerialNumber                          = 3   // [ TrainingFile ] [Type: Uint32z, Base: uint32z];
	TrainingFileTimeCreated                           = 4   // [ TrainingFile ] [Type: DateTime, Base: uint32];
	UserProfileMessageIndex                           = 254 // [ UserProfile ] [Type: MessageIndex, Base: uint16];
	UserProfileFriendlyName                           = 0   // [ UserProfile ] [Type: String, Base: string]; Used for Morning Report greeting
	UserProfileGender                                 = 1   // [ UserProfile ] [Type: Gender, Base: enum];
	UserProfileAge                                    = 2   // [ UserProfile ] [Type: Uint8, Base: uint8, Units: years];
	UserProfileHeight                                 = 3   // [ UserProfile ] [Type: Uint8, Base: uint8, Scale: 100, Offset: 0, Units: m];
	UserProfileWeight                                 = 4   // [ UserProfile ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: kg];
	UserProfileLanguage                               = 5   // [ UserProfile ] [Type: Language, Base: enum];
	UserProfileElevSetting                            = 6   // [ UserProfile ] [Type: DisplayMeasure, Base: enum];
	UserProfileWeightSetting                          = 7   // [ UserProfile ] [Type: DisplayMeasure, Base: enum];
	UserProfileRestingHeartRate                       = 8   // [ UserProfile ] [Type: Uint8, Base: uint8, Units: bpm];
	UserProfileDefaultMaxRunningHeartRate             = 9   // [ UserProfile ] [Type: Uint8, Base: uint8, Units: bpm];
	UserProfileDefaultMaxBikingHeartRate              = 10  // [ UserProfile ] [Type: Uint8, Base: uint8, Units: bpm];
	UserProfileDefaultMaxHeartRate                    = 11  // [ UserProfile ] [Type: Uint8, Base: uint8, Units: bpm];
	UserProfileHrSetting                              = 12  // [ UserProfile ] [Type: DisplayHeart, Base: enum];
	UserProfileSpeedSetting                           = 13  // [ UserProfile ] [Type: DisplayMeasure, Base: enum];
	UserProfileDistSetting                            = 14  // [ UserProfile ] [Type: DisplayMeasure, Base: enum];
	UserProfilePowerSetting                           = 16  // [ UserProfile ] [Type: DisplayPower, Base: enum];
	UserProfileActivityClass                          = 17  // [ UserProfile ] [Type: ActivityClass, Base: enum];
	UserProfilePositionSetting                        = 18  // [ UserProfile ] [Type: DisplayPosition, Base: enum];
	UserProfileTemperatureSetting                     = 21  // [ UserProfile ] [Type: DisplayMeasure, Base: enum];
	UserProfileLocalId                                = 22  // [ UserProfile ] [Type: UserLocalId, Base: uint16];
	UserProfileGlobalId                               = 23  // [ UserProfile ] [Type: Byte, Base: byte, Array: [6]];
	UserProfileWakeTime                               = 28  // [ UserProfile ] [Type: LocaltimeIntoDay, Base: uint32]; Typical wake time
	UserProfileSleepTime                              = 29  // [ UserProfile ] [Type: LocaltimeIntoDay, Base: uint32]; Typical bed time
	UserProfileHeightSetting                          = 30  // [ UserProfile ] [Type: DisplayMeasure, Base: enum];
	UserProfileUserRunningStepLength                  = 31  // [ UserProfile ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m]; User defined running step length set to 0 for auto length
	UserProfileUserWalkingStepLength                  = 32  // [ UserProfile ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m]; User defined walking step length set to 0 for auto length
	UserProfileDepthSetting                           = 47  // [ UserProfile ] [Type: DisplayMeasure, Base: enum];
	UserProfileDiveCount                              = 49  // [ UserProfile ] [Type: Uint32, Base: uint32];
	VideoUrl                                          = 0   // [ Video ] [Type: String, Base: string];
	VideoHostingProvider                              = 1   // [ Video ] [Type: String, Base: string];
	VideoDuration                                     = 2   // [ Video ] [Type: Uint32, Base: uint32, Units: ms]; Playback time of video
	VideoClipClipNumber                               = 0   // [ VideoClip ] [Type: Uint16, Base: uint16];
	VideoClipStartTimestamp                           = 1   // [ VideoClip ] [Type: DateTime, Base: uint32];
	VideoClipStartTimestampMs                         = 2   // [ VideoClip ] [Type: Uint16, Base: uint16];
	VideoClipEndTimestamp                             = 3   // [ VideoClip ] [Type: DateTime, Base: uint32];
	VideoClipEndTimestampMs                           = 4   // [ VideoClip ] [Type: Uint16, Base: uint16];
	VideoClipClipStart                                = 6   // [ VideoClip ] [Type: Uint32, Base: uint32, Units: ms]; Start of clip in video time
	VideoClipClipEnd                                  = 7   // [ VideoClip ] [Type: Uint32, Base: uint32, Units: ms]; End of clip in video time
	VideoDescriptionMessageIndex                      = 254 // [ VideoDescription ] [Type: MessageIndex, Base: uint16]; Long descriptions will be split into multiple parts
	VideoDescriptionMessageCount                      = 0   // [ VideoDescription ] [Type: Uint16, Base: uint16]; Total number of description parts
	VideoDescriptionText                              = 1   // [ VideoDescription ] [Type: String, Base: string];
	VideoFrameTimestamp                               = 253 // [ VideoFrame ] [Type: DateTime, Base: uint32, Units: s]; Whole second part of the timestamp
	VideoFrameTimestampMs                             = 0   // [ VideoFrame ] [Type: Uint16, Base: uint16, Units: ms]; Millisecond part of the timestamp.
	VideoFrameFrameNumber                             = 1   // [ VideoFrame ] [Type: Uint32, Base: uint32]; Number of the frame that the timestamp and timestamp_ms correlate to
	VideoTitleMessageIndex                            = 254 // [ VideoTitle ] [Type: MessageIndex, Base: uint16]; Long titles will be split into multiple parts
	VideoTitleMessageCount                            = 0   // [ VideoTitle ] [Type: Uint16, Base: uint16]; Total number of title parts
	VideoTitleText                                    = 1   // [ VideoTitle ] [Type: String, Base: string];
	WatchfaceSettingsMessageIndex                     = 254 // [ WatchfaceSettings ] [Type: MessageIndex, Base: uint16];
	WatchfaceSettingsMode                             = 0   // [ WatchfaceSettings ] [Type: WatchfaceMode, Base: enum];
	WatchfaceSettingsLayout                           = 1   // [ WatchfaceSettings ] [Type: Byte, Base: byte];
	WeatherAlertTimestamp                             = 253 // [ WeatherAlert ] [Type: DateTime, Base: uint32];
	WeatherAlertReportId                              = 0   // [ WeatherAlert ] [Type: String, Base: string]; Unique identifier from GCS report ID string, length is 12
	WeatherAlertIssueTime                             = 1   // [ WeatherAlert ] [Type: DateTime, Base: uint32]; Time alert was issued
	WeatherAlertExpireTime                            = 2   // [ WeatherAlert ] [Type: DateTime, Base: uint32]; Time alert expires
	WeatherAlertSeverity                              = 3   // [ WeatherAlert ] [Type: WeatherSeverity, Base: enum]; Warning, Watch, Advisory, Statement
	WeatherAlertType                                  = 4   // [ WeatherAlert ] [Type: WeatherSevereType, Base: enum]; Tornado, Severe Thunderstorm, etc.
	WeatherConditionsTimestamp                        = 253 // [ WeatherConditions ] [Type: DateTime, Base: uint32]; time of update for current conditions, else forecast time
	WeatherConditionsWeatherReport                    = 0   // [ WeatherConditions ] [Type: WeatherReport, Base: enum]; Current or forecast
	WeatherConditionsTemperature                      = 1   // [ WeatherConditions ] [Type: Sint8, Base: sint8, Units: C];
	WeatherConditionsCondition                        = 2   // [ WeatherConditions ] [Type: WeatherStatus, Base: enum]; Corresponds to GSC Response weatherIcon field
	WeatherConditionsWindDirection                    = 3   // [ WeatherConditions ] [Type: Uint16, Base: uint16, Units: degrees];
	WeatherConditionsWindSpeed                        = 4   // [ WeatherConditions ] [Type: Uint16, Base: uint16, Scale: 1000, Offset: 0, Units: m/s];
	WeatherConditionsPrecipitationProbability         = 5   // [ WeatherConditions ] [Type: Uint8, Base: uint8]; range 0-100
	WeatherConditionsTemperatureFeelsLike             = 6   // [ WeatherConditions ] [Type: Sint8, Base: sint8, Units: C]; Heat Index if GCS heatIdx above or equal to 90F or wind chill if GCS windChill below or equal to 32F
	WeatherConditionsRelativeHumidity                 = 7   // [ WeatherConditions ] [Type: Uint8, Base: uint8];
	WeatherConditionsLocation                         = 8   // [ WeatherConditions ] [Type: String, Base: string]; string corresponding to GCS response location string
	WeatherConditionsObservedAtTime                   = 9   // [ WeatherConditions ] [Type: DateTime, Base: uint32];
	WeatherConditionsObservedLocationLat              = 10  // [ WeatherConditions ] [Type: Sint32, Base: sint32, Units: semicircles];
	WeatherConditionsObservedLocationLong             = 11  // [ WeatherConditions ] [Type: Sint32, Base: sint32, Units: semicircles];
	WeatherConditionsDayOfWeek                        = 12  // [ WeatherConditions ] [Type: DayOfWeek, Base: enum];
	WeatherConditionsHighTemperature                  = 13  // [ WeatherConditions ] [Type: Sint8, Base: sint8, Units: C];
	WeatherConditionsLowTemperature                   = 14  // [ WeatherConditions ] [Type: Sint8, Base: sint8, Units: C];
	WeightScaleTimestamp                              = 253 // [ WeightScale ] [Type: DateTime, Base: uint32, Units: s];
	WeightScaleWeight                                 = 0   // [ WeightScale ] [Type: Weight, Base: uint16, Scale: 100, Offset: 0, Units: kg];
	WeightScalePercentFat                             = 1   // [ WeightScale ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: %];
	WeightScalePercentHydration                       = 2   // [ WeightScale ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: %];
	WeightScaleVisceralFatMass                        = 3   // [ WeightScale ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: kg];
	WeightScaleBoneMass                               = 4   // [ WeightScale ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: kg];
	WeightScaleMuscleMass                             = 5   // [ WeightScale ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: kg];
	WeightScaleBasalMet                               = 7   // [ WeightScale ] [Type: Uint16, Base: uint16, Scale: 4, Offset: 0, Units: kcal/day];
	WeightScalePhysiqueRating                         = 8   // [ WeightScale ] [Type: Uint8, Base: uint8];
	WeightScaleActiveMet                              = 9   // [ WeightScale ] [Type: Uint16, Base: uint16, Scale: 4, Offset: 0, Units: kcal/day]; ~4kJ per kcal, 0.25 allows max 16384 kcal
	WeightScaleMetabolicAge                           = 10  // [ WeightScale ] [Type: Uint8, Base: uint8, Units: years];
	WeightScaleVisceralFatRating                      = 11  // [ WeightScale ] [Type: Uint8, Base: uint8];
	WeightScaleUserProfileIndex                       = 12  // [ WeightScale ] [Type: MessageIndex, Base: uint16]; Associates this weight scale message to a user. This corresponds to the index of the user profile message in the weight scale file.
	WeightScaleBmi                                    = 13  // [ WeightScale ] [Type: Uint16, Base: uint16, Scale: 10, Offset: 0, Units: kg/m^2];
	WorkoutMessageIndex                               = 254 // [ Workout ] [Type: MessageIndex, Base: uint16];
	WorkoutSport                                      = 4   // [ Workout ] [Type: Sport, Base: enum];
	WorkoutCapabilities                               = 5   // [ Workout ] [Type: WorkoutCapabilities, Base: uint32z];
	WorkoutNumValidSteps                              = 6   // [ Workout ] [Type: Uint16, Base: uint16]; number of valid steps
	WorkoutWktName                                    = 8   // [ Workout ] [Type: String, Base: string];
	WorkoutSubSport                                   = 11  // [ Workout ] [Type: SubSport, Base: enum];
	WorkoutPoolLength                                 = 14  // [ Workout ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m];
	WorkoutPoolLengthUnit                             = 15  // [ Workout ] [Type: DisplayMeasure, Base: enum];
	WorkoutWktDescription                             = 17  // [ Workout ] [Type: String, Base: string]; Description of the workout
	WorkoutSessionMessageIndex                        = 254 // [ WorkoutSession ] [Type: MessageIndex, Base: uint16];
	WorkoutSessionSport                               = 0   // [ WorkoutSession ] [Type: Sport, Base: enum];
	WorkoutSessionSubSport                            = 1   // [ WorkoutSession ] [Type: SubSport, Base: enum];
	WorkoutSessionNumValidSteps                       = 2   // [ WorkoutSession ] [Type: Uint16, Base: uint16];
	WorkoutSessionFirstStepIndex                      = 3   // [ WorkoutSession ] [Type: Uint16, Base: uint16];
	WorkoutSessionPoolLength                          = 4   // [ WorkoutSession ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: m];
	WorkoutSessionPoolLengthUnit                      = 5   // [ WorkoutSession ] [Type: DisplayMeasure, Base: enum];
	WorkoutStepMessageIndex                           = 254 // [ WorkoutStep ] [Type: MessageIndex, Base: uint16];
	WorkoutStepWktStepName                            = 0   // [ WorkoutStep ] [Type: String, Base: string];
	WorkoutStepDurationType                           = 1   // [ WorkoutStep ] [Type: WktStepDuration, Base: enum];
	WorkoutStepDurationValue                          = 2   // [ WorkoutStep ] [Type: Uint32, Base: uint32];
	WorkoutStepTargetType                             = 3   // [ WorkoutStep ] [Type: WktStepTarget, Base: enum];
	WorkoutStepTargetValue                            = 4   // [ WorkoutStep ] [Type: Uint32, Base: uint32];
	WorkoutStepCustomTargetValueLow                   = 5   // [ WorkoutStep ] [Type: Uint32, Base: uint32];
	WorkoutStepCustomTargetValueHigh                  = 6   // [ WorkoutStep ] [Type: Uint32, Base: uint32];
	WorkoutStepIntensity                              = 7   // [ WorkoutStep ] [Type: Intensity, Base: enum];
	WorkoutStepNotes                                  = 8   // [ WorkoutStep ] [Type: String, Base: string];
	WorkoutStepEquipment                              = 9   // [ WorkoutStep ] [Type: WorkoutEquipment, Base: enum];
	WorkoutStepExerciseCategory                       = 10  // [ WorkoutStep ] [Type: ExerciseCategory, Base: uint16];
	WorkoutStepExerciseName                           = 11  // [ WorkoutStep ] [Type: Uint16, Base: uint16];
	WorkoutStepExerciseWeight                         = 12  // [ WorkoutStep ] [Type: Uint16, Base: uint16, Scale: 100, Offset: 0, Units: kg];
	WorkoutStepWeightDisplayUnit                      = 13  // [ WorkoutStep ] [Type: FitBaseUnit, Base: uint16];
	WorkoutStepSecondaryTargetType                    = 19  // [ WorkoutStep ] [Type: WktStepTarget, Base: enum];
	WorkoutStepSecondaryTargetValue                   = 20  // [ WorkoutStep ] [Type: Uint32, Base: uint32];
	WorkoutStepSecondaryCustomTargetValueLow          = 21  // [ WorkoutStep ] [Type: Uint32, Base: uint32];
	WorkoutStepSecondaryCustomTargetValueHigh         = 22  // [ WorkoutStep ] [Type: Uint32, Base: uint32];
	ZonesTargetMaxHeartRate                           = 1   // [ ZonesTarget ] [Type: Uint8, Base: uint8];
	ZonesTargetThresholdHeartRate                     = 2   // [ ZonesTarget ] [Type: Uint8, Base: uint8];
	ZonesTargetFunctionalThresholdPower               = 3   // [ ZonesTarget ] [Type: Uint16, Base: uint16];
	ZonesTargetHrCalcType                             = 5   // [ ZonesTarget ] [Type: HrZoneCalc, Base: enum];
	ZonesTargetPwrCalcType                            = 7   // [ ZonesTarget ] [Type: PwrZoneCalc, Base: enum];
	Invalid                                           = 255
)
